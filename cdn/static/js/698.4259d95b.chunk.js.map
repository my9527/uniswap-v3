{"version":3,"file":"static/js/698.4259d95b.chunk.js","mappings":"gLAAM,SAAUA,EAAOC,CAAS,EAC9B,GAAI,CAACC,OAAOC,aAAa,CAACF,IAAMA,EAAI,EAAG,MAAM,MAAU,CAAC,wBAAwB,EAAEA,EAAC,CAAE,CACvF,CAMM,SAAUG,EAAMC,CAAyB,CAAE,GAAGC,CAAiB,EACnE,GAAI,CAAED,CAAAA,aAAaE,UAAS,EAAI,MAAM,UAAc,uBACpD,GAAID,EAAQE,MAAM,CAAG,GAAK,CAACF,EAAQG,QAAQ,CAACJ,EAAEG,MAAM,EAClD,MAAM,UAAc,CAAC,8BAA8B,EAAEF,EAAO,kBAAmBD,EAAEG,MAAM,CAAC,CAAC,CAC7F,C,qUAoCA,MATe,CACbR,OAAAA,EACAU,KArCI,SAAeL,CAAU,EAC7B,GAAI,kBAAOA,EAAiB,MAAM,MAAU,CAAC,sBAAsB,EAAEA,EAAC,CAAE,CAC1E,EAoCED,MAAAA,EACAO,KAvBI,SAAeA,CAAU,EAC7B,GAAI,mBAAOA,GAAuB,mBAAOA,EAAKC,MAAM,CAClD,MAAM,MAAU,mDAClBZ,EAAOW,EAAKE,SAAS,EACrBb,EAAOW,EAAKG,QAAQ,CACtB,EAmBEC,OAjBI,SAAiBC,CAAa,CAAEC,EAAgB,EAAI,EACxD,GAAID,EAASE,SAAS,CAAE,MAAM,MAAU,oCACxC,GAAID,GAAiBD,EAASG,QAAQ,CAAE,MAAM,MAAU,wCAC1D,EAeEC,OAdI,SAAiBC,CAAQ,CAAEL,CAAa,EAC5CZ,EAAMiB,GACN,IAAMC,EAAMN,EAASH,SAAS,CAC9B,GAAIQ,EAAIb,MAAM,CAAGc,EACf,MAAM,MAAU,CAAC,sDAAsD,EAAEA,EAAG,CAAE,CAElF,C,ECpCO,IAAMC,EACX,iBAAOC,YAA2B,WAAYA,WAAaA,WAAWD,MAAM,CAAGE,KAAAA,ECiBpEC,EAAa,GACxB,IAAIC,SAASC,EAAIC,MAAM,CAAED,EAAIE,UAAU,CAAEF,EAAIG,UAAU,EAG5CC,EAAO,CAACC,EAAcC,IAAkB,GAAU,GAAKA,EAAWD,IAASC,EAI3EC,EAAO,SAAI5B,WAAW,IAAI6B,YAAY,CAAC,UAAW,EAAEP,MAAM,CAAC,CAAC,EAAE,CAC3E,GAAI,CAACM,EAAM,MAAM,MAAU,+CAkErB,SAAUE,EAAQC,CAAW,EAEjC,GADoB,UAAhB,OAAOA,GAAmBA,CAAAA,EAAOC,SATXC,CAAW,EACrC,GAAI,iBAAOA,EACT,MAAM,UAAc,CAAC,iCAAiC,EAAE,OAAOA,EAAG,CAAE,EAEtE,OAAO,IAAIC,cAAcC,MAAM,CAACF,EAClC,EAImDF,EAAI,EACjD,CAAEA,CAAAA,aAAgB/B,UAAS,EAC7B,MAAM,UAAc,CAAC,uCAAuC,EAAE,OAAO+B,EAAI,EAAG,EAC9E,OAAOA,CACT,CArEcK,MAAMC,IAAI,CAAC,CAAEpC,OAAQ,GAAG,EAAI,CAACqC,EAAGC,IAAMA,EAAEC,QAAQ,CAAC,IAAIC,QAAQ,CAAC,EAAG,KAyFzE,OAAgBC,EAsBpBC,OAAK,CACH,OAAO,IAAI,CAACC,UAAU,EACxB,C,CA+BI,SAAUC,EAAmCC,CAA8B,EAC/E,IAAMC,EAAQ,GAAgCD,IAAkBE,MAAM,CAAClB,EAAQmB,IAAUC,MAAM,GACzFC,EAAML,IAIZ,OAHAC,EAAMzC,SAAS,CAAG6C,EAAI7C,SAAS,CAC/ByC,EAAMxC,QAAQ,CAAG4C,EAAI5C,QAAQ,CAC7BwC,EAAM1C,MAAM,CAAG,IAAMyC,IACdC,CACT,CAgBM,SAAUK,EAAYC,EAAc,EAAE,EAC1C,GAAIrC,GAAU,mBAAOA,EAAOsC,eAAe,CACzC,OAAOtC,EAAOsC,eAAe,CAAC,IAAItD,WAAWqD,GAE/C,OAAM,MAAU,yCAClB,CCzLM,MAAgBE,UAAgCb,EAwBpDM,OAAOjB,CAAW,EAChByB,EAAAA,MAAa,CAAC,IAAI,EAClB,GAAM,CAAEC,KAAAA,CAAI,CAAEnC,OAAAA,CAAM,CAAEf,SAAAA,CAAQ,CAAE,CAAG,IAAI,CACvCwB,EAAOD,EAAQC,GACf,IAAM2B,EAAM3B,EAAK9B,MAAM,CACvB,IAAK,IAAI0D,EAAM,EAAGA,EAAMD,GAAO,CAC7B,IAAME,EAAOC,KAAK9C,GAAG,CAACR,EAAW,IAAI,CAACoD,GAAG,CAAED,EAAMC,GAEjD,GAAIC,IAASrD,EAAU,CACrB,IAAMuD,EAAW3C,EAAWY,GAC5B,KAAOxB,GAAYmD,EAAMC,EAAKA,GAAOpD,EAAU,IAAI,CAACwD,OAAO,CAACD,EAAUH,GACtE,Q,CAEFrC,EAAO0C,GAAG,CAACjC,EAAKkC,QAAQ,CAACN,EAAKA,EAAMC,GAAO,IAAI,CAACD,GAAG,EACnD,IAAI,CAACA,GAAG,EAAIC,EACZD,GAAOC,EACH,IAAI,CAACD,GAAG,GAAKpD,IACf,IAAI,CAACwD,OAAO,CAACN,EAAM,GACnB,IAAI,CAACE,GAAG,CAAG,E,CAKf,OAFA,IAAI,CAAC1D,MAAM,EAAI8B,EAAK9B,MAAM,CAC1B,IAAI,CAACiE,UAAU,GACR,IAAI,CAEbC,WAAWrD,CAAe,CAAE,CAC1B0C,EAAAA,MAAa,CAAC,IAAI,EAClBA,EAAAA,MAAa,CAAC1C,EAAK,IAAI,EACvB,IAAI,CAACF,QAAQ,CAAG,GAIhB,GAAM,CAAEU,OAAAA,CAAM,CAAEmC,KAAAA,CAAI,CAAElD,SAAAA,CAAQ,CAAEqB,KAAAA,CAAI,CAAE,CAAG,IAAI,CACzC,CAAE+B,IAAAA,CAAG,CAAE,CAAG,IAAI,CAElBrC,CAAM,CAACqC,IAAM,CAAG,IAChB,IAAI,CAACrC,MAAM,CAAC2C,QAAQ,CAACN,GAAKS,IAAI,CAAC,GAE3B,IAAI,CAACC,SAAS,CAAG9D,EAAWoD,IAC9B,IAAI,CAACI,OAAO,CAACN,EAAM,GACnBE,EAAM,GAGR,IAAK,IAAIpB,EAAIoB,EAAKpB,EAAIhC,EAAUgC,IAAKjB,CAAM,CAACiB,EAAE,CAAG,GAIjD+B,SApFkBb,CAAc,CAAElC,CAAkB,CAAEgD,CAAa,CAAE3C,CAAa,EACpF,GAAI,mBAAO6B,EAAKa,YAAY,CAAiB,OAAOb,EAAKa,YAAY,CAAC/C,EAAYgD,EAAO3C,GACzF,IAAM4C,EAAOC,OAAO,IACdC,EAAWD,OAAO,YAClBE,EAAKhF,OAAO,GAAU6E,EAAQE,GAC9BE,EAAKjF,OAAO4E,EAAQG,GACpBG,EAAIjD,EAAO,EAAI,EACfkD,EAAIlD,EAAO,EAAI,EACrB6B,EAAKsB,SAAS,CAACxD,EAAasD,EAAGF,EAAI/C,GACnC6B,EAAKsB,SAAS,CAACxD,EAAauD,EAAGF,EAAIhD,EACrC,EA0EiB6B,EAAMlD,EAAW,EAAGkE,OAAO,MAAI,CAACxE,MAAM,EAAO2B,GAC1D,IAAI,CAACmC,OAAO,CAACN,EAAM,GACnB,IAAMuB,EAAQ7D,EAAWL,GACnB4C,EAAM,IAAI,CAACpD,SAAS,CAE1B,GAAIoD,EAAM,EAAG,MAAM,MAAU,+CAC7B,IAAMuB,EAASvB,EAAM,EACfwB,EAAQ,IAAI,CAACC,GAAG,GACtB,GAAIF,EAASC,EAAMjF,MAAM,CAAE,MAAM,MAAU,sCAC3C,IAAK,IAAIsC,EAAI,EAAGA,EAAI0C,EAAQ1C,IAAKyC,EAAMD,SAAS,CAAC,EAAIxC,EAAG2C,CAAK,CAAC3C,EAAE,CAAEX,EACpE,CACAsB,QAAM,CACJ,GAAM,CAAE5B,OAAAA,CAAM,CAAEhB,UAAAA,CAAS,CAAE,CAAG,IAAI,CAClC,IAAI,CAAC6D,UAAU,CAAC7C,GAChB,IAAM8D,EAAM9D,EAAO+D,KAAK,CAAC,EAAG/E,GAE5B,OADA,IAAI,CAACgF,OAAO,GACLF,CACT,CACAxC,WAAW2C,CAAM,EACfA,GAAAA,CAAAA,EAAO,IAAK,IAAI,CAACC,WAAmB,EACpCD,EAAGvB,GAAG,IAAI,IAAI,CAACmB,GAAG,IAClB,GAAM,CAAE5E,SAAAA,CAAQ,CAAEe,OAAAA,CAAM,CAAErB,OAAAA,CAAM,CAAEW,SAAAA,CAAQ,CAAED,UAAAA,CAAS,CAAEgD,IAAAA,CAAG,CAAE,CAAG,IAAI,CAMnE,OALA4B,EAAGtF,MAAM,CAAGA,EACZsF,EAAG5B,GAAG,CAAGA,EACT4B,EAAG3E,QAAQ,CAAGA,EACd2E,EAAG5E,SAAS,CAAGA,EACXV,EAASM,GAAUgF,EAAGjE,MAAM,CAAC0C,GAAG,CAAC1C,GAC9BiE,CACT,CArFAC,YACWjF,CAAgB,CAClBD,CAAiB,CACf+D,CAAiB,CACjBzC,CAAa,EAEtB,KAAK,GALI,KAAArB,QAAQ,CAARA,EACF,KAAAD,SAAS,CAATA,EACE,KAAA+D,SAAS,CAATA,EACA,KAAAzC,IAAI,CAAJA,EATD,KAAAhB,QAAQ,CAAG,GACX,KAAAX,MAAM,CAAG,EACT,KAAA0D,GAAG,CAAG,EACN,KAAAhD,SAAS,CAAG,GASpB,IAAI,CAACW,MAAM,CAAG,IAAItB,WAAWO,GAC7B,IAAI,CAACkD,IAAI,CAAGtC,EAAW,IAAI,CAACG,MAAM,CACpC,C,CCpCF,IAAMmE,EAAM,CAACC,EAAW5F,EAAW6F,IAAc,EAAK7F,EAAM,CAAC4F,EAAIC,EAE3DC,EAAM,CAACF,EAAW5F,EAAW6F,IAAc,EAAK7F,EAAM4F,EAAIC,EAAM7F,EAAI6F,EAKpEE,EAAW,IAAIhE,YAAY,CAC/B,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WACpF,WAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WACpF,WAAY,WAAY,UAAY,UAAY,UAAY,WAAY,WAAY,WACpF,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UACpF,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WACpF,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UACpF,UAAY,UAAY,UAAY,UAAY,UAAY,WAAY,WAAY,WACpF,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WACrF,EAIKiE,EAAK,IAAIjE,YAAY,CACzB,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WACrF,EAIKkE,EAAW,IAAIlE,YAAY,IACjC,gBAAqB0B,EAeT4B,KAAG,CACX,GAAM,CAAEa,EAAAA,CAAC,CAAEC,EAAAA,CAAC,CAAEC,EAAAA,CAAC,CAAEC,EAAAA,CAAC,CAAEC,EAAAA,CAAC,CAAEC,EAAAA,CAAC,CAAEC,EAAAA,CAAC,CAAEC,EAAAA,CAAC,CAAE,CAAG,IAAI,CACvC,MAAO,CAACP,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAE,CAGvBvC,IACRgC,CAAS,CAAEC,CAAS,CAAEC,CAAS,CAAEC,CAAS,CAAEC,CAAS,CAAEC,CAAS,CAAEC,CAAS,CAAEC,CAAS,EAEtF,IAAI,CAACP,CAAC,CAAGA,EAAAA,EACT,IAAI,CAACC,CAAC,CAAGA,EAAAA,EACT,IAAI,CAACC,CAAC,CAAGA,EAAAA,EACT,IAAI,CAACC,CAAC,CAAGA,EAAAA,EACT,IAAI,CAACC,CAAC,CAAGA,EAAAA,EACT,IAAI,CAACC,CAAC,CAAGA,EAAAA,EACT,IAAI,CAACC,CAAC,CAAGA,EAAAA,EACT,IAAI,CAACC,CAAC,CAAGA,EAAAA,CACX,CACUxC,QAAQN,CAAc,CAAE+C,CAAc,EAE9C,IAAK,IAAIjE,EAAI,EAAGA,EAAI,GAAIA,IAAKiE,GAAU,EAAGT,CAAQ,CAACxD,EAAE,CAAGkB,EAAKgD,SAAS,CAACD,EAAQ,IAC/E,IAAK,IAAIjE,EAAI,GAAIA,EAAI,GAAIA,IAAK,CAC5B,IAAMmE,EAAMX,CAAQ,CAACxD,EAAI,GAAG,CACtBoE,EAAKZ,CAAQ,CAACxD,EAAI,EAAE,CACpBqE,EAAKnF,EAAKiF,EAAK,GAAKjF,EAAKiF,EAAK,IAAOA,IAAQ,EAC7CG,EAAKpF,EAAKkF,EAAI,IAAMlF,EAAKkF,EAAI,IAAOA,IAAO,EACjDZ,CAAAA,CAAQ,CAACxD,EAAE,CAAG,EAAMwD,CAAQ,CAACxD,EAAI,EAAE,CAAGqE,EAAKb,CAAQ,CAACxD,EAAI,GAAG,CAAI,C,CAGjE,GAAI,CAAEyD,EAAAA,CAAC,CAAEC,EAAAA,CAAC,CAAEC,EAAAA,CAAC,CAAEC,EAAAA,CAAC,CAAEC,EAAAA,CAAC,CAAEC,EAAAA,CAAC,CAAEC,EAAAA,CAAC,CAAEC,EAAAA,CAAC,CAAE,CAAG,IAAI,CACrC,IAAK,IAAIhE,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,IAAMuE,EAASrF,EAAK2E,EAAG,GAAK3E,EAAK2E,EAAG,IAAM3E,EAAK2E,EAAG,IAC5CW,EAAK,EAAKD,EAASrB,EAAIW,EAAGC,EAAGC,GAAKT,CAAQ,CAACtD,EAAE,CAAGwD,CAAQ,CAACxD,EAAE,CAAI,EAC/DyE,EAASvF,EAAKuE,EAAG,GAAKvE,EAAKuE,EAAG,IAAMvE,EAAKuE,EAAG,IAC5CiB,EAAK,EAAUrB,EAAII,EAAGC,EAAGC,GAAM,EACrCK,EAAID,EACJA,EAAID,EACJA,EAAID,EACJA,EAAI,EAAKW,EAAM,EACfZ,EAAID,EACJA,EAAID,EACJA,EAAID,EACJA,EAAI,EAAMiB,EAAM,C,CAGlBjB,EAAI,EAAK,IAAI,CAACA,CAAC,CAAI,EACnBC,EAAI,EAAK,IAAI,CAACA,CAAC,CAAI,EACnBC,EAAI,EAAK,IAAI,CAACA,CAAC,CAAI,EACnBC,EAAI,EAAK,IAAI,CAACA,CAAC,CAAI,EACnBC,EAAI,EAAK,IAAI,CAACA,CAAC,CAAI,EACnBC,EAAI,EAAK,IAAI,CAACA,CAAC,CAAI,EACnBC,EAAI,EAAK,IAAI,CAACA,CAAC,CAAI,EACnBC,EAAI,EAAK,IAAI,CAACA,CAAC,CAAI,EACnB,IAAI,CAACvC,GAAG,CAACgC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAChC,CACUrC,YAAU,CAClB6B,EAAS3B,IAAI,CAAC,EAChB,CACAkB,SAAO,CACL,IAAI,CAACtB,GAAG,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC9B,IAAI,CAAC1C,MAAM,CAAC8C,IAAI,CAAC,EACnB,CA/DAoB,aAAA,CACE,KAAK,CAAC,GAAI,GAAI,EAAG,IAVnB,KAAAQ,CAAC,CAAGF,EAAAA,CAAE,CAAC,EAAE,CACT,KAAAG,CAAC,CAAGH,EAAAA,CAAE,CAAC,EAAE,CACT,KAAAI,CAAC,CAAGJ,EAAAA,CAAE,CAAC,EAAE,CACT,KAAAK,CAAC,CAAGL,EAAAA,CAAE,CAAC,EAAE,CACT,KAAAM,CAAC,CAAGN,EAAAA,CAAE,CAAC,EAAE,CACT,KAAAO,CAAC,CAAGP,EAAAA,CAAE,CAAC,EAAE,CACT,KAAAQ,CAAC,CAAGR,EAAAA,CAAE,CAAC,EAAE,CACT,KAAAS,CAAC,CAAGT,EAAAA,CAAE,CAAC,EAAE,C,EAoEX,gBAAqBoB,EASnB1B,aAAA,CACE,KAAK,GATP,KAAAQ,CAAC,CAAG,YACJ,KAAAC,CAAC,CAAG,UACJ,KAAAC,CAAC,CAAG,UACJ,KAAAC,CAAC,CAAG,WACJ,KAAAC,CAAC,CAAG,SACJ,KAAAC,CAAC,CAAG,WACJ,KAAAC,CAAC,CAAG,WACJ,KAAAC,CAAC,CAAG,YAGF,IAAI,CAACjG,SAAS,CAAG,EACnB,C,EAOW6G,EAAStE,EAAgB,IAAM,IAAIqE,GAC1BrE,EAAgB,IAAM,IAAIuE,GChIpC3C,OAAO,GACnB,IAAM4C,EAAM5C,OAAO,GACb6C,EAAM7C,OAAO,GACb8C,EAAM,GAA6B7B,aAAa1F,WAchDwH,EAAQpF,MAAMC,IAAI,CAAC,CAAEpC,OAAQ,GAAG,EAAI,CAACqC,EAAGC,IAAMA,EAAEC,QAAQ,CAAC,IAAIC,QAAQ,CAAC,EAAG,MACzE,SAAUgF,EAAW5H,CAAiB,EAC1C,GAAI,CAAC0H,EAAI1H,GAAQ,MAAM,MAAU,uBAEjC,IAAI6H,EAAM,GACV,IAAK,IAAInF,EAAI,EAAGA,EAAI1C,EAAMI,MAAM,CAAEsC,IAChCmF,GAAOF,CAAK,CAAC3H,CAAK,CAAC0C,EAAE,CAAC,CAExB,OAAOmF,CACT,CAOM,SAAUC,EAAYD,CAAW,EACrC,GAAI,iBAAOA,EAAkB,MAAM,MAAU,4BAA8B,OAAOA,GAElF,OAAOjD,OAAOiD,KAAAA,EAAa,IAAM,CAAC,EAAE,EAAEA,EAAG,CAAE,CAC7C,CAGM,SAAUE,EAAWF,CAAW,EACpC,GAAI,iBAAOA,EAAkB,MAAM,MAAU,4BAA8B,OAAOA,GAClF,GAAIA,EAAIzH,MAAM,CAAG,EAAG,MAAM,MAAU,mCAAqCyH,EAAIzH,MAAM,EACnF,IAAM4H,EAAQ,IAAI7H,WAAW0H,EAAIzH,MAAM,CAAG,GAC1C,IAAK,IAAIsC,EAAI,EAAGA,EAAIsF,EAAM5H,MAAM,CAAEsC,IAAK,CACrC,IAAMuF,EAAIvF,EAAAA,EACJwF,EAAUL,EAAIrC,KAAK,CAACyC,EAAGA,EAAI,GAC3BE,EAAOrI,OAAOsI,QAAQ,CAACF,EAAS,IACtC,GAAIpI,OAAOuI,KAAK,CAACF,IAASA,EAAO,EAAG,MAAM,MAAU,wBACpDH,CAAAA,CAAK,CAACtF,EAAE,CAAGyF,C,CAEb,OAAOH,CACT,CAGM,SAAUM,EAAgBtI,CAAiB,EAC/C,OAAO8H,EAAYF,EAAW5H,GAChC,CACM,SAAUuI,EAAgBvI,CAAiB,EAC/C,GAAI,CAAC0H,EAAI1H,GAAQ,MAAM,MAAU,uBACjC,OAAO8H,EAAYF,EAAWzH,WAAWqC,IAAI,CAACxC,GAAOwI,OAAO,IAC9D,CAEO,IAAMC,EAAkB,CAAC5I,EAAWgE,IACzCkE,EAAWlI,EAAE8C,QAAQ,CAAC,IAAIC,QAAQ,CAACiB,EAAAA,EAAS,MACjC6E,EAAkB,CAAC7I,EAAWgE,IAAgB4E,EAAgB5I,EAAGgE,GAAK2E,OAAO,GAIpF,SAAUG,EAAYC,CAAa,CAAEf,CAAQ,CAAEgB,CAAuB,MACtEtD,EACJ,GAAI,iBAAOsC,EACT,GAAI,CACFtC,EAAMwC,EAAWF,E,CACjB,MAAOiB,EAAG,CACV,MAAM,MAAU,CAAC,EAAEF,EAAK,kCAAmCf,EAAG,YAAaiB,EAAC,CAAE,C,MAE3E,GAAIpB,EAAIG,GAGbtC,EAAMpF,WAAWqC,IAAI,CAACqF,QAEtB,MAAM,MAAU,CAAC,EAAEe,EAAK,kCAAmC,EAE7D,IAAM/E,EAAM0B,EAAInF,MAAM,CACtB,GAAI,iBAAOyI,GAA+BhF,IAAQgF,EAChD,MAAM,MAAU,CAAC,EAAED,EAAK,YAAaC,EAAc,cAAehF,EAAG,CAAE,EACzE,OAAO0B,CACT,CAGM,SAAUwD,EAAY,GAAGC,CAAkB,EAC/C,IAAMC,EAAI,IAAI9I,WAAW6I,EAAKE,MAAM,CAAC,CAACC,EAAKtD,IAAMsD,EAAMtD,EAAEzF,MAAM,CAAE,IAC7DgJ,EAAM,EAMV,OALAJ,EAAKK,OAAO,CAAC,IACX,GAAI,CAAC3B,EAAI7B,GAAI,MAAM,MAAU,uBAC7BoD,EAAE9E,GAAG,CAAC0B,EAAGuD,GACTA,GAAOvD,EAAEzF,MAAM,GAEV6I,CACT,CAYM,SAAU9G,EAAYC,CAAW,EACrC,GAAI,iBAAOA,EACT,MAAM,MAAU,CAAC,iCAAiC,EAAE,OAAOA,EAAG,CAAE,EAElE,OAAO,IAAIC,cAAcC,MAAM,CAACF,EAClC,CAkBO,IAAMkH,EAAU,GAAe,CAAC7B,GAAO7C,OAAO/E,EAAI,EAAC,EAAK2H,EAIzD+B,EAAM,GAAgB,IAAIpJ,WAAW+B,GACrCsH,EAAO,GAAcrJ,WAAWqC,IAAI,CAAChB,GASrC,SAAUiI,EACdC,CAAe,CACfC,CAAgB,CAChBC,CAAkE,EAElE,GAAI,iBAAOF,GAAwBA,EAAU,EAAG,MAAM,MAAU,4BAChE,GAAI,iBAAOC,GAAyBA,EAAW,EAAG,MAAM,MAAU,6BAClE,GAAI,mBAAOC,EAAuB,MAAM,MAAU,6BAElD,IAAInH,EAAI8G,EAAIG,GACRG,EAAIN,EAAIG,GACRhH,EAAI,EACFoH,EAAQ,KACZrH,EAAE8B,IAAI,CAAC,GACPsF,EAAEtF,IAAI,CAAC,GACP7B,EAAI,CACN,EACMsC,EAAI,CAAC,GAAG/E,IAAoB2J,EAAOC,EAAGpH,KAAMxC,GAC5C8J,EAAS,CAACC,EAAOT,GAAK,IAE1BM,EAAI7E,EAAEwE,EAAK,CAAC,EAAK,EAAGQ,GACpBvH,EAAIuC,IACgB,IAAhBgF,EAAK5J,MAAM,GACfyJ,EAAI7E,EAAEwE,EAAK,CAAC,EAAK,EAAGQ,GACpBvH,EAAIuC,IACN,EACMiF,EAAM,KAEV,GAAIvH,KAAO,IAAM,MAAM,MAAU,2BACjC,IAAImB,EAAM,EACJ5C,EAAoB,EAAE,CAC5B,KAAO4C,EAAM8F,GAAU,CACrBlH,EAAIuC,IACJ,IAAMkF,EAAKzH,EAAE+C,KAAK,GAClBvE,EAAIkJ,IAAI,CAACD,GACTrG,GAAOpB,EAAErC,MAAM,CAEjB,OAAO2I,KAAe9H,EACxB,EASA,MARiB,CAAC+I,EAAkBI,SAG9B7E,EACJ,IAHAuE,IACAC,EAAOC,GAEA,CAAEzE,CAAAA,EAAM6E,EAAKH,IAAK,GAAIF,IAE7B,OADAD,IACOvE,CACT,CAEF,CAIA,IAAM8E,EAAe,CACnBC,OAAQ,GAAc,iBAAOC,EAC7BC,SAAU,GAAc,mBAAOD,EAC/BE,QAAS,GAAc,kBAAOF,EAC9BG,OAAQ,GAAc,iBAAOH,EAC7BxK,cAAe,GAAcD,OAAOC,aAAa,CAACwK,GAClDvC,MAAO,GAAczF,MAAMoI,OAAO,CAACJ,GACnCK,MAAO,CAACL,EAAUM,IAAiBA,EAAeC,EAAE,CAACC,OAAO,CAACR,GAC7DhK,KAAM,GAAc,mBAAOgK,GAAsBzK,OAAOC,aAAa,CAACwK,EAAI9J,SAAS,C,EAM/E,SAAUuK,EACdH,CAAS,CACTI,CAAqB,CACrBC,EAA2B,CAAC,CAAC,EAE7B,IAAMC,EAAa,CAACC,EAAoBC,EAAiBC,KACvD,IAAMC,EAAWlB,CAAY,CAACgB,EAAK,CACnC,GAAI,mBAAOE,EACT,MAAM,MAAU,CAAC,mBAAmB,EAAEF,EAAI,qBAAsB,EAElE,IAAMd,EAAMM,CAAM,CAACO,EAAiC,CACpD,GAAIE,CAAAA,CAAAA,GAAcf,KAAQlJ,IAARkJ,CAAgB,GAC9B,CAACgB,EAAShB,EAAKM,GACjB,MAAM,MACJ,CAAC,cAAc,EAAEW,OAAOJ,GAAU,GAAIb,EAAG,IAAK,OAAOA,EAAG,cAAec,EAAI,CAAE,CAGnF,EACA,IAAK,GAAM,CAACD,EAAWC,EAAK,GAAII,OAAOC,OAAO,CAACT,GAAaE,EAAWC,EAAWC,EAAO,IACzF,IAAK,GAAM,CAACD,EAAWC,EAAK,GAAII,OAAOC,OAAO,CAACR,GAAgBC,EAAWC,EAAWC,EAAO,IAC5F,OAAOR,CACT,CC7OA,oEAAoE,EAYpE,IAAMc,EAAM/G,OAAO,GAAI4C,EAAM5C,OAAO,GAAI6C,EAAM7C,OAAO,GAAIgH,EAAMhH,OAAO,GAEhEiH,EAAMjH,OAAO,GAAIkH,EAAMlH,OAAO,GAAImH,EAAMnH,OAAO,GAK/C,SAAUoH,EAAInG,CAAS,CAAE5F,CAAS,EACtC,IAAMgM,EAASpG,EAAI5F,EACnB,OAAOgM,GAAUN,EAAMM,EAAShM,EAAIgM,CACtC,CAqBM,SAAUC,EAAKC,CAAS,CAAEC,CAAa,CAAEC,CAAc,EAC3D,IAAI9G,EAAM4G,EACV,KAAOC,KAAUT,GACfpG,GAAOA,EACPA,GAAO8G,EAET,OAAO9G,CACT,CAGM,SAAU+G,EAAO1M,CAAc,CAAEyM,CAAc,EACnD,GAAIzM,IAAW+L,GAAOU,GAAUV,EAC9B,MAAM,MAAU,CAAC,0CAA0C,EAAE/L,EAAM,OAAQyM,EAAM,CAAE,EAIrF,IAAIxG,EAAImG,EAAIpM,EAAQyM,GAChBpM,EAAIoM,EAEJF,EAAIR,EAAKY,EAAI/E,EAAKgF,EAAIhF,EAAK/E,EAAIkJ,EACnC,KAAO9F,IAAM8F,GAAK,CAEhB,IAAMc,EAAIxM,EAAI4F,EACRoD,EAAIhJ,EAAI4F,EACR6G,EAAIP,EAAIK,EAAIC,EACZ5M,EAAI0M,EAAI9J,EAAIgK,CAElBxM,CAAAA,EAAI4F,EAAGA,EAAIoD,EAAGkD,EAAIK,EAAGD,EAAI9J,EAAG+J,EAAIE,EAAGjK,EAAI5C,C,CAEzC,IAAM8M,EAAM1M,EACZ,GAAI0M,IAAQnF,EAAK,MAAM,MAAU,0BACjC,OAAOwE,EAAIG,EAAGE,EAChB,CA3DYzH,OAAO,GAAWA,OAAO,IAsOrC,IAAMgI,GAAe,CACnB,SAAU,UAAW,MAAO,MAAO,MAAO,OAAQ,MAClD,MAAO,MAAO,MAAO,MAAO,MAAO,MACnC,OAAQ,OAAQ,OAAQ,OAChB,CACJ,SAAUC,GAAiBjC,CAAgB,EAO/C,IAAMkC,EAAOF,GAAa1D,MAAM,CAAC,CAAC6D,EAAKxC,KACrCwC,CAAG,CAACxC,EAAI,CAAG,WACJwC,GARO,CACdC,MAAO,SACPC,KAAM,SACNC,MAAO,gBACPC,KAAM,e,GAMR,OAAOnC,EAAeJ,EAAOkC,EAC/B,CAqDM,SAAUM,GAAQvN,CAAS,CAAEwN,CAAmB,EAEpD,IAAMC,EAAcD,KAAehM,IAAfgM,EAA2BA,EAAaxN,EAAE8C,QAAQ,CAAC,GAAGvC,MAAM,CAEhF,MAAO,CAAEiN,WAAYC,EAAaC,YADdvJ,KAAKwJ,IAAI,CAACF,EAAc,EACC,CAC/C,CCjUA,oEAAoE,EAIpE,IAAM3B,GAAM/G,OAAO,GACb4C,GAAM5C,OAAO,GAgLb,SAAU6I,GAAqBC,CAAyB,EAgB5D,OAfAb,GAAca,EAAM5C,EAAE,EACtBE,EACE0C,EACA,CACE7N,EAAG,SACHmF,EAAG,SACH2I,GAAI,QACJC,GAAI,O,EAEN,CACEP,WAAY,gBACZE,YAAa,e,GAIV9B,OAAOoC,MAAM,CAAC,CACnB,GAAGT,GAAQM,EAAM7N,CAAC,CAAE6N,EAAML,UAAU,CAAC,CACrC,GAAGK,CAAK,CACHI,EAAGJ,EAAM5C,EAAE,CAACkC,KAAK,EAE1B,CCtEA,GAAM,CAAE1E,gBAAiByF,EAAG,CAAEhG,WAAYiG,EAAG,CAAE,CAAGC,EACrCC,GAAM,CAEjBC,IAAK,cAAqBC,MACxBzI,YAAY+G,EAAI,EAAE,CAAC,CACjB,KAAK,CAACA,EACR,C,EAEF2B,UAAUnM,CAAgB,EACxB,GAAM,CAAEiM,IAAK5H,CAAC,CAAE,CAAG2H,GACnB,GAAIhM,EAAK9B,MAAM,CAAG,GAAK8B,IAAAA,CAAI,CAAC,EAAE,CAAW,MAAM,IAAIqE,EAAE,iCACrD,IAAM1C,EAAM3B,CAAI,CAAC,EAAE,CACbqD,EAAMrD,EAAKkC,QAAQ,CAAC,EAAGP,EAAM,GACnC,GAAI,CAACA,GAAO0B,EAAInF,MAAM,GAAKyD,EAAK,MAAM,IAAI0C,EAAE,2CAK5C,GAAIhB,IAAAA,CAAG,CAAC,EAAE,CAAe,MAAM,IAAIgB,EAAE,uCACrC,GAAIhB,IAAAA,CAAG,CAAC,EAAE,EAAa,CAAEA,CAAAA,IAAAA,CAAG,CAAC,EAAE,EAC7B,MAAM,IAAIgB,EAAE,uDACd,MAAO,CAAE+H,EAAGP,GAAIxI,GAAMN,EAAG/C,EAAKkC,QAAQ,CAACP,EAAM,EAAE,CACjD,EACA0K,MAAM1G,CAAwB,EAE5B,GAAM,CAAEsG,IAAK5H,CAAC,CAAE,CAAG2H,GACbhM,EAAO,iBAAO2F,EAAmBmG,GAAInG,GAAOA,EAClD,GAAI,CAAE3F,CAAAA,aAAgB/B,UAAS,EAAI,MAAM,MAAU,iBACnD,IAAI8E,EAAI/C,EAAK9B,MAAM,CACnB,GAAI6E,EAAI,GAAK/C,IAAAA,CAAI,CAAC,EAAE,CAAU,MAAM,IAAIqE,EAAE,yBAC1C,GAAIrE,CAAI,CAAC,EAAE,GAAK+C,EAAI,EAAG,MAAM,IAAIsB,EAAE,uCACnC,GAAM,CAAE+H,EAAGrF,CAAC,CAAEhE,EAAGuJ,CAAM,CAAE,CAAGN,GAAIG,SAAS,CAACnM,EAAKkC,QAAQ,CAAC,IAClD,CAAEkK,EAAGG,CAAC,CAAExJ,EAAGyJ,CAAU,CAAE,CAAGR,GAAIG,SAAS,CAACG,GAC9C,GAAIE,EAAWtO,MAAM,CAAE,MAAM,IAAImG,EAAE,+CACnC,MAAO,CAAE0C,EAAAA,EAAGwF,EAAAA,CAAC,CACf,EACAE,WAAWC,CAA6B,EAEtC,IAAMpJ,EAAQ,GAAwB1F,EAAAA,OAAOsI,QAAQ,CAACqG,CAAC,CAAC,EAAE,CAAE,IAAe,KAAOA,EAAIA,EAChFzJ,EAAI,IACR,IAAM6C,EAAMgH,EAAIlM,QAAQ,CAAC,IACzB,OAAOkF,EAAAA,EAAIzH,MAAM,CAAO,CAAC,CAAC,EAAEyH,EAAG,CAAE,CAAGA,CACtC,EACM4G,EAAIjJ,EAAMR,EAAE4J,EAAIH,CAAC,GACjBxF,EAAIzD,EAAMR,EAAE4J,EAAI3F,CAAC,GACjB6F,EAAML,EAAErO,MAAM,CAAG,EACjB2O,EAAM9F,EAAE7I,MAAM,CAAG,EACjB8J,EAAKlF,EAAE8J,GACPE,EAAKhK,EAAE+J,GACb,MAAO,CAAC,EAAE,EAAE/J,EAAE+J,EAAMD,EAAM,GAAE,IAAKE,EAAE,EAAG/F,EAAC,IAAKiB,EAAE,EAAGuE,EAAC,CAAE,C,EAMlD9C,GAAM/G,OAAO,GAAI4C,GAAM5C,OAAO,GAAI6C,GAAM7C,OAAO,GAAIgH,GAAMhH,OAAO,GAAIiH,GAAMjH,OAAO,GC7JjFqK,GAAQ3G,EAGd,SAAS4G,GAAMxK,CAAa,CAAEtE,CAAc,EAC1C,GAAIsE,EAAQ,GAAKA,GAAS,GAAM,EAAItE,EAClC,MAAM,MAAU,CAAC,sBAAsB,EAAEsE,EAAK,UAAWtE,EAAM,CAAE,EAEnE,IAAMmF,EAAMhD,MAAMC,IAAI,CAAC,CAAEpC,OAAAA,CAAM,GAAImE,IAAI,CAAC,GACxC,IAAK,IAAI7B,EAAItC,EAAS,EAAGsC,GAAK,EAAGA,IAC/B6C,CAAG,CAAC7C,EAAE,CAAGgC,IAAAA,EACTA,KAAW,EAEb,OAAO,IAAIvE,WAAWoF,EACxB,CAUA,SAAS4J,GAAQC,CAAa,EAC5B,GAAI,CAAEA,CAAAA,aAAgBjP,UAAS,EAAI,MAAM,MAAU,sBACrD,CACA,SAASkP,GAAMD,CAAa,EAC1B,GAAI,CAACtP,OAAOC,aAAa,CAACqP,GAAO,MAAM,MAAU,kBACnD,CAqEM,SAAUE,GAAcC,CAAe,CAAEC,CAAa,CAAEC,CAAa,MAerEC,EAdJ1E,EAAeyE,EAAS,CACtBE,IAAK,SACL7B,EAAG,SACHpB,EAAG,gBACH7C,EAAG,gBACHtJ,KAAM,M,GAER,GAAM,CAAEuN,EAAAA,CAAC,CAAEjE,EAAAA,CAAC,CAAE6C,EAAAA,CAAC,CAAEnM,KAAAA,CAAI,CAAEqP,OAAAA,CAAM,CAAED,IAAKE,CAAI,CAAE,CAAGJ,EAC7CN,GAAQI,GACRF,GAAMG,GACN,IAAMG,EAAMG,SAnHOC,CAAmB,EACtC,GAAIA,aAAe5P,WAAY,OAAO4P,EACtC,GAAI,iBAAOA,EAAkB,OAAO5N,EAAY4N,EAChD,OAAM,MAAU,mCAClB,EA+G0BF,GAClBG,EAAQlC,EAAEnL,QAAQ,CAAC,GAAGvC,MAAM,CAC5B6P,EAAIjM,KAAKwJ,IAAI,CAAC,CAACwC,EAAQnG,CAAAA,EAAK,GAC5BqG,EAAeV,EAAQ9C,EAAIuD,EAEjC,GAAIL,QAAAA,EACFF,EAAMS,SAjFRZ,CAAe,CACfI,CAAe,CACfS,CAAkB,CAClB1J,CAAQ,EAERyI,GAAQI,GACRJ,GAAQQ,GACRN,GAAMe,GAEFT,EAAIvP,MAAM,CAAG,KAAKuP,CAAAA,EAAMjJ,EAAEqC,EAAY5G,EAAY,qBAAsBwN,GAAI,EAChF,GAAM,CAAElP,UAAW4P,CAAU,CAAE3P,SAAU4P,CAAU,CAAE,CAAG5J,EAClD6J,EAAMvM,KAAKwJ,IAAI,CAAC4C,EAAaC,GACnC,GAAIE,EAAM,IAAK,MAAM,MAAU,sBAC/B,IAAMC,EAAYzH,EAAY4G,EAAKT,GAAMS,EAAIvP,MAAM,CAAE,IAC/CqQ,EAAQvB,GAAM,EAAGoB,GACjBI,EAAYxB,GAAMkB,EAAY,GAC9BnQ,EAAI,MAAsBsQ,GAC1BI,EAAMjK,EAAEqC,EAAY0H,EAAOlB,EAAKmB,EAAWxB,GAAM,EAAG,GAAIsB,GAC9DvQ,CAAAA,CAAC,CAAC,EAAE,CAAGyG,EAAEqC,EAAY4H,EAAKzB,GAAM,EAAG,GAAIsB,IACvC,IAAK,IAAI9N,EAAI,EAAGA,GAAK6N,EAAK7N,IAAK,CAC7B,IAAMkO,EAAO,CAACC,SAtCFhL,CAAa,CAAE5F,CAAa,EAC1C,IAAMuB,EAAM,IAAIrB,WAAW0F,EAAEzF,MAAM,EACnC,IAAK,IAAIsC,EAAI,EAAGA,EAAImD,EAAEzF,MAAM,CAAEsC,IAC5BlB,CAAG,CAACkB,EAAE,CAAGmD,CAAC,CAACnD,EAAE,CAAGzC,CAAC,CAACyC,EAAE,CAEtB,OAAOlB,CACT,EAgCyBmP,EAAK1Q,CAAC,CAACyC,EAAI,EAAE,EAAGwM,GAAMxM,EAAI,EAAG,GAAI8N,EAAU,CAChEvQ,CAAC,CAACyC,EAAE,CAAGgE,EAAEqC,KAAe6H,G,CAE1B,IAAME,EAAsB/H,KAAe9I,GAC3C,OAAO6Q,EAAoBtL,KAAK,CAAC,EAAG4K,EACtC,EAwD6Bb,EAAKI,EAAKO,EAAc3P,QAC5C,GAAIqP,QAAAA,EACTF,EAAMqB,SAvDRxB,CAAe,CACfI,CAAe,CACfS,CAAkB,CAClBvG,CAAS,CACTnD,CAAQ,EAWR,GATAyI,GAAQI,GACRJ,GAAQQ,GACRN,GAAMe,GAGFT,EAAIvP,MAAM,CAAG,KAEfuP,CAAAA,EAAMjJ,EAAElG,MAAM,CAAC,CAAEwQ,MADHhN,KAAKwJ,IAAI,CAAC,EAAK3D,EAAK,EACZ,GAAI1G,MAAM,CAAChB,EAAY,sBAAsBgB,MAAM,CAACwM,GAAKtM,MAAM,EAAC,EAEpF+M,EAAa,OAAST,EAAIvP,MAAM,CAAG,IACrC,MAAM,MAAU,0CAClB,OACEsG,EAAElG,MAAM,CAAC,CAAEwQ,MAAOZ,CAAU,GACzBjN,MAAM,CAACoM,GACPpM,MAAM,CAAC+L,GAAMkB,EAAY,IAEzBjN,MAAM,CAACwM,GACPxM,MAAM,CAAC+L,GAAMS,EAAIvP,MAAM,CAAE,IACzBiD,MAAM,EAEb,EA6B6BkM,EAAKI,EAAKO,EAAcrG,EAAGtJ,QAC/C,GAAIqP,mBAAAA,EAETF,EAAMH,OAEN,MAAM,MAAU,iCAElB,IAAM/C,EAAI,MAAUgD,GACpB,IAAK,IAAI9M,EAAI,EAAGA,EAAI8M,EAAO9M,IAAK,CAC9B,IAAMoG,EAAI,MAAU4D,GACpB,IAAK,IAAIzE,EAAI,EAAGA,EAAIyE,EAAGzE,IAAK,CAC1B,IAAMgJ,EAAahB,EAAKhI,CAAAA,EAAIvF,EAAIgK,CAAAA,EAC1BwE,EAAKxB,EAAItL,QAAQ,CAAC6M,EAAYA,EAAahB,EACjDnH,CAAAA,CAAC,CAACb,EAAE,CAAG+D,EAAIiD,GAAMiC,GAAKpD,E,CAExBtB,CAAC,CAAC9J,EAAE,CAAGoG,C,CAET,OAAO0D,CACT,CCjKA,qBAAsC3J,EA8BpCM,OAAOgO,CAAU,CAAE,CAGjB,OAFAxN,EAAAA,MAAa,CAAC,IAAI,EAClB,IAAI,CAACyN,KAAK,CAACjO,MAAM,CAACgO,GACX,IAAI,CAEb7M,WAAWrD,CAAe,CAAE,CAC1B0C,EAAAA,MAAa,CAAC,IAAI,EAClBA,EAAAA,KAAY,CAAC1C,EAAK,IAAI,CAACR,SAAS,EAChC,IAAI,CAACM,QAAQ,CAAG,GAChB,IAAI,CAACqQ,KAAK,CAAC9M,UAAU,CAACrD,GACtB,IAAI,CAACoQ,KAAK,CAAClO,MAAM,CAAClC,GAClB,IAAI,CAACoQ,KAAK,CAAC/M,UAAU,CAACrD,GACtB,IAAI,CAACwE,OAAO,EACd,CACApC,QAAM,CACJ,IAAMpC,EAAM,IAAId,WAAW,IAAI,CAACkR,KAAK,CAAC5Q,SAAS,EAE/C,OADA,IAAI,CAAC6D,UAAU,CAACrD,GACTA,CACT,CACA8B,WAAW2C,CAAY,EAErBA,GAAAA,CAAAA,EAAO+F,OAAOjL,MAAM,CAACiL,OAAO6F,cAAc,CAAC,IAAI,EAAG,CAAC,EAAC,EACpD,GAAM,CAAED,MAAAA,CAAK,CAAED,MAAAA,CAAK,CAAErQ,SAAAA,CAAQ,CAAED,UAAAA,CAAS,CAAEJ,SAAAA,CAAQ,CAAED,UAAAA,CAAS,CAAE,CAAG,IAAI,CAQvE,OANAiF,EAAG3E,QAAQ,CAAGA,EACd2E,EAAG5E,SAAS,CAAGA,EACf4E,EAAGhF,QAAQ,CAAGA,EACdgF,EAAGjF,SAAS,CAAGA,EACfiF,EAAG2L,KAAK,CAAGA,EAAMtO,UAAU,CAAC2C,EAAG2L,KAAK,EACpC3L,EAAG0L,KAAK,CAAGA,EAAMrO,UAAU,CAAC2C,EAAG0L,KAAK,EAC7B1L,CACT,CACAD,SAAO,CACL,IAAI,CAAC3E,SAAS,CAAG,GACjB,IAAI,CAACuQ,KAAK,CAAC5L,OAAO,GAClB,IAAI,CAAC2L,KAAK,CAAC3L,OAAO,EACpB,CA1DAE,YAAYpF,CAAW,CAAEgR,CAAW,CAAC,CACnC,KAAK,GAJC,KAAAxQ,QAAQ,CAAG,GACX,KAAAD,SAAS,CAAG,GAIlB6C,EAAAA,IAAW,CAACpD,GACZ,IAAMiR,EAAMvP,EAAQsP,GAEpB,GADA,IAAI,CAACH,KAAK,CAAG7Q,EAAKC,MAAM,GACpB,mBAAO,IAAI,CAAC4Q,KAAK,CAACjO,MAAM,CAC1B,MAAM,UAAc,sDACtB,KAAI,CAACzC,QAAQ,CAAG,IAAI,CAAC0Q,KAAK,CAAC1Q,QAAQ,CACnC,IAAI,CAACD,SAAS,CAAG,IAAI,CAAC2Q,KAAK,CAAC3Q,SAAS,CACrC,IAAMC,EAAW,IAAI,CAACA,QAAQ,CACxB0I,EAAM,IAAIjJ,WAAWO,GAE3B0I,EAAIjF,GAAG,CAACqN,EAAIpR,MAAM,CAAGM,EAAWH,EAAKC,MAAM,GAAG2C,MAAM,CAACqO,GAAKnO,MAAM,GAAKmO,GACrE,IAAK,IAAI9O,EAAI,EAAGA,EAAI0G,EAAIhJ,MAAM,CAAEsC,IAAK0G,CAAG,CAAC1G,EAAE,EAAI,GAC/C,IAAI,CAAC0O,KAAK,CAACjO,MAAM,CAACiG,GAElB,IAAI,CAACiI,KAAK,CAAG9Q,EAAKC,MAAM,GAExB,IAAK,IAAIkC,EAAI,EAAGA,EAAI0G,EAAIhJ,MAAM,CAAEsC,IAAK0G,CAAG,CAAC1G,EAAE,EAAI,IAC/C,IAAI,CAAC2O,KAAK,CAAClO,MAAM,CAACiG,GAClBA,EAAI7E,IAAI,CAAC,EACX,C,EA8CWkN,GAAO,CAAClR,EAAaiR,EAAYpO,IAC5C,IAAIsO,GAAUnR,EAAMiR,GAAKrO,MAAM,CAACC,GAASC,MAAM,EACjDoO,CAAAA,GAAKjR,MAAM,CAAG,CAACD,EAAaiR,IAAe,IAAIE,GAAUnR,EAAMiR,EChF/D,qEAAoE,EAUpE,IAAMG,GAAa/M,OAAO,sEACpBgN,GAAahN,OAAO,sEACpB4C,GAAM5C,OAAO,GACb6C,GAAM7C,OAAO,GACbiN,GAAa,CAAChM,EAAW5F,IAAc,CAAC4F,EAAI5F,EAAIwH,EAAAA,EAAOxH,EA8BvD6K,GAAKgH,SLqST9E,CAAa,CACb+E,CAAe,CACfhQ,EAAO,EAAK,CACZiQ,EAAiC,CAAC,CAAC,EAEnC,GAAIhF,GAASrB,EAAK,MAAM,MAAU,CAAC,2BAA2B,EAAEqB,EAAK,CAAE,EACvE,GAAM,CAAEK,WAAYF,CAAI,CAAEI,YAAaL,CAAK,CAAE,CAAGE,GAAQJ,EAAO+E,GAChE,GAAI7E,EAAQ,KAAM,MAAM,MAAU,mDAClC,IAAM+E,EAAQC,SAjNOC,CAAS,EAM9B,GAAIA,EAAItG,IAAQD,EAAK,CAKnB,IAAMwG,EAAS,CAACD,EAAI3K,CAAAA,EAAOqE,EAC3B,OAAO,SAAsBf,CAAa,CAAEjL,CAAI,EAC9C,IAAMwS,EAAOvH,EAAGwH,GAAG,CAACzS,EAAGuS,GAEvB,GAAI,CAACtH,EAAGyH,GAAG,CAACzH,EAAG0H,GAAG,CAACH,GAAOxS,GAAI,MAAM,MAAU,2BAC9C,OAAOwS,CACT,C,CAIF,GAAIF,EAAIpG,IAAQD,EAAK,CACnB,IAAM2G,EAAK,CAACN,EAAIrG,CAAE,EAAKC,EACvB,OAAO,SAAsBjB,CAAa,CAAEjL,CAAI,EAC9C,IAAM6S,EAAK5H,EAAG6H,GAAG,CAAC9S,EAAG4H,GACfhF,EAAIqI,EAAGwH,GAAG,CAACI,EAAID,GACfG,EAAK9H,EAAG6H,GAAG,CAAC9S,EAAG4C,GACfC,EAAIoI,EAAG6H,GAAG,CAAC7H,EAAG6H,GAAG,CAACC,EAAInL,GAAMhF,GAC5B4P,EAAOvH,EAAG6H,GAAG,CAACC,EAAI9H,EAAG+H,GAAG,CAACnQ,EAAGoI,EAAGgI,GAAG,GACxC,GAAI,CAAChI,EAAGyH,GAAG,CAACzH,EAAG0H,GAAG,CAACH,GAAOxS,GAAI,MAAM,MAAU,2BAC9C,OAAOwS,CACT,C,CA2BF,OAAOU,SAlHqBZ,CAAS,MAQjCa,EAAWC,EAAWC,EAF1B,IAAMC,EAAY,CAAChB,EAAI3K,CAAAA,EAAOC,EAK9B,IAAKuL,EAAIb,EAAI3K,EAAKyL,EAAI,EAAGD,EAAIvL,IAAQkE,EAAKqH,GAAKvL,EAAKwL,KAGpD,IAAKC,EAAIzL,EAAKyL,EAAIf,GAAKG,SAhELzD,CAAW,CAAEzC,CAAa,CAAEC,CAAc,EAC5D,GAAIA,GAAUV,GAAOS,EAAQT,EAAK,MAAM,MAAU,6BAClD,GAAIU,IAAW7E,EAAK,OAAOmE,EAC3B,IAAIpG,EAAMiC,EACV,KAAO4E,EAAQT,GACTS,EAAQ5E,GAAKjC,CAAAA,EAAM,EAAOsJ,EAAOxC,CAAK,EAC1CwC,EAAM,EAAOA,EAAOxC,EACpBD,IAAU5E,EAEZ,OAAOjC,CACT,EAsD6B2N,EAAGC,EAAWhB,KAAOA,EAAI3K,EAAK0L,KAGzD,GAAID,IAAAA,EAAS,CACX,IAAMb,EAAS,CAACD,EAAI3K,CAAAA,EAAOqE,EAC3B,OAAO,SAAwBf,CAAa,CAAEjL,CAAI,EAChD,IAAMwS,EAAOvH,EAAGwH,GAAG,CAACzS,EAAGuS,GACvB,GAAI,CAACtH,EAAGyH,GAAG,CAACzH,EAAG0H,GAAG,CAACH,GAAOxS,GAAI,MAAM,MAAU,2BAC9C,OAAOwS,CACT,C,CAIF,IAAMe,EAAS,CAACJ,EAAIxL,CAAAA,EAAOC,EAC3B,OAAO,SAAwBqD,CAAa,CAAEjL,CAAI,EAEhD,GAAIiL,EAAGwH,GAAG,CAACzS,EAAGsT,KAAerI,EAAGuI,GAAG,CAACvI,EAAGgI,GAAG,EAAG,MAAM,MAAU,2BAC7D,IAAI7J,EAAIgK,EAEJK,EAAIxI,EAAGwH,GAAG,CAACxH,EAAG6H,GAAG,CAAC7H,EAAGgI,GAAG,CAAEI,GAAIF,GAC9B7G,EAAIrB,EAAGwH,GAAG,CAACzS,EAAGuT,GACdnT,EAAI6K,EAAGwH,GAAG,CAACzS,EAAGmT,GAElB,KAAO,CAAClI,EAAGyH,GAAG,CAACtS,EAAG6K,EAAGgI,GAAG,GAAG,CACzB,GAAIhI,EAAGyH,GAAG,CAACtS,EAAG6K,EAAGyI,IAAI,EAAG,OAAOzI,EAAGyI,IAAI,CAEtC,IAAI7G,EAAI,EACR,IAAK,IAAI8G,EAAK1I,EAAG0H,GAAG,CAACvS,GACnB,EAD2BgJ,IACvB6B,EAAGyH,GAAG,CAACiB,EAAI1I,EAAGgI,GAAG,EADSpG,IAE9B8G,EAAK1I,EAAG0H,GAAG,CAACgB,GAGd,IAAMC,EAAK3I,EAAGwH,GAAG,CAACgB,EAAG9L,GAAO5C,OAAOqE,EAAIyD,EAAI,IAC3C4G,EAAIxI,EAAG0H,GAAG,CAACiB,GACXtH,EAAIrB,EAAG6H,GAAG,CAACxG,EAAGsH,GACdxT,EAAI6K,EAAG6H,GAAG,CAAC1S,EAAGqT,GACdrK,EAAIyD,C,CAEN,OAAOP,CACT,CACF,EA4DuBgG,EACvB,EAsJuBnF,GACf0G,EAAuBjI,OAAOoC,MAAM,CAAC,CACzCb,MAAAA,EACAG,KAAAA,EACAD,MAAAA,EACAD,KAAM3D,EAAQ6D,GACdoG,KAAM5H,EACNmH,IAAKtL,EACLhH,OAAQ,GAASwL,EAAI6C,EAAK7B,GAC1BjC,QAAS,IACP,GAAI,iBAAO8D,EACT,MAAM,MAAU,CAAC,4CAA4C,EAAE,OAAOA,EAAG,CAAE,EAC7E,OAAOlD,GAAOkD,GAAOA,EAAM7B,CAC7B,EACA2G,IAAK,GAAS9E,IAAQlD,EACtBiI,MAAO,GAAS,CAAC/E,EAAMrH,CAAAA,IAASA,EAChC6L,IAAK,GAASrH,EAAI,CAAC6C,EAAK7B,GACxBuF,IAAK,CAACsB,EAAKC,IAAQD,IAAQC,EAE3BtB,IAAK,GAASxG,EAAI6C,EAAMA,EAAK7B,GAC7B+G,IAAK,CAACF,EAAKC,IAAQ9H,EAAI6H,EAAMC,EAAK9G,GAClC6F,IAAK,CAACgB,EAAKC,IAAQ9H,EAAI6H,EAAMC,EAAK9G,GAClC2F,IAAK,CAACkB,EAAKC,IAAQ9H,EAAI6H,EAAMC,EAAK9G,GAClCsF,IAAK,CAACzD,EAAKzC,IAAU4H,CAtGnB,SAAmBN,CAAY,CAAE7E,CAAM,CAAEzC,CAAa,EAG1D,GAAIA,EAAQT,EAAK,MAAM,MAAU,sBACjC,GAAIS,IAAUT,EAAK,OAAO+H,EAAEZ,GAAG,CAC/B,GAAI1G,IAAU5E,EAAK,OAAOqH,EAC1B,IAAIf,EAAI4F,EAAEZ,GAAG,CACTxE,EAAIO,EACR,KAAOzC,EAAQT,GACTS,EAAQ5E,GAAKsG,CAAAA,EAAI4F,EAAEf,GAAG,CAAC7E,EAAGQ,EAAC,EAC/BA,EAAIoF,EAAElB,GAAG,CAAClE,GACVlC,IAAU5E,EAEZ,OAAOsG,CACT,GAwF+B4F,EAAG7E,EAAKzC,GACnC6H,IAAK,CAACJ,EAAKC,IAAQ9H,EAAI6H,EAAMvH,EAAOwH,EAAK9G,GAAQA,GAGjDkH,KAAM,GAASrF,EAAMA,EACrBsF,KAAM,CAACN,EAAKC,IAAQD,EAAMC,EAC1BM,KAAM,CAACP,EAAKC,IAAQD,EAAMC,EAC1BO,KAAM,CAACR,EAAKC,IAAQD,EAAMC,EAE1BQ,IAAK,GAAShI,EAAOuC,EAAK7B,GAC1BuH,KAAMvC,EAAMuC,IAAI,EAAM,IAAMtC,EAAMyB,EAAG7T,EAAC,EACtC2U,YAAa,GAASC,CAhGpB,SAA2Bf,CAAY,CAAEgB,CAAS,EACtD,IAAMpR,EAAM,MAAUoR,EAAKtU,MAAM,EAE3BuU,EAAiBD,EAAKxL,MAAM,CAAC,CAAC0L,EAAK/F,EAAKnM,IAC5C,EAAMiR,GAAG,CAAC9E,GAAa+F,GACvBtR,CAAG,CAACZ,EAAE,CAAGkS,EACFlB,EAAEf,GAAG,CAACiC,EAAK/F,IACjB6E,EAAEZ,GAAG,EAEF+B,EAAWnB,EAAEY,GAAG,CAACK,GAOvB,OALAD,EAAKI,WAAW,CAAC,CAACF,EAAK/F,EAAKnM,IAC1B,EAAMiR,GAAG,CAAC9E,GAAa+F,GACvBtR,CAAG,CAACZ,EAAE,CAAGgR,EAAEf,GAAG,CAACiC,EAAKtR,CAAG,CAACZ,EAAE,EACnBgR,EAAEf,GAAG,CAACiC,EAAK/F,IACjBgG,GACIvR,CACT,GA+EwCoQ,EAAGqB,GAGvCC,KAAM,CAACnP,EAAG5F,EAAG6F,IAAOA,EAAI7F,EAAI4F,EAC5B5D,QAAS,GAAUF,EAAO2G,EAAgBmG,EAAK3B,GAASzE,EAAgBoG,EAAK3B,GAC7E+H,UAAW,IACT,GAAIjV,EAAMI,MAAM,GAAK8M,EACnB,MAAM,MAAU,CAAC,uBAAuB,EAAEA,EAAK,QAASlN,EAAMI,MAAM,CAAC,CAAC,EACxE,OAAO2B,EAAOwG,EAAgBvI,GAASsI,EAAgBtI,EACzD,C,GAEF,OAAOyL,OAAOoC,MAAM,CAAC6F,EACvB,EK3ViB/B,GAAYtQ,KAAAA,EAAWA,KAAAA,EAAW,CAAEkT,KAxBrD,SAAiBhI,CAAS,EAGxB,IAAMX,EAAMhH,OAAO,GAAIsQ,EAAMtQ,OAAO,GAAIuQ,EAAOvQ,OAAO,IAAKwQ,EAAOxQ,OAAO,IAEnEyQ,EAAOzQ,OAAO,IAAK0Q,EAAO1Q,OAAO,IAAK2Q,EAAO3Q,OAAO,IACpD4Q,EAAK,EAAKjJ,EAAIA,EALVoF,GAMJ8D,EAAK,EAAMD,EAAKjJ,EANZoF,GAOJ+D,EAAK,EAAMD,EAAI7J,EAPX+F,IAOqB8D,EAPrB9D,GAQJgE,EAAK,EAAMD,EAAI9J,EARX+F,IAQqB8D,EARrB9D,GASJiE,EAAM,EAAMD,EAAIlO,GATZkK,IASsB6D,EATtB7D,GAUJkE,EAAM,EAAMD,EAAKT,EAVbxD,IAUwBiE,EAVxBjE,GAWJmE,EAAM,EAAMD,EAAKT,EAXbzD,IAWwBkE,EAXxBlE,GAYJoE,EAAM,EAAMD,EAAKR,EAZb3D,IAYwBmE,EAZxBnE,GAaJqE,EAAO,EAAMD,EAAKR,EAbd5D,IAayBoE,EAbzBpE,GAcJsE,EAAO,EAAMD,EAAMV,EAdf3D,IAc0BmE,EAd1BnE,GAeJuE,EAAO,EAAMD,EAAMrK,EAff+F,IAeyB8D,EAfzB9D,GAgBJwE,EAAK,EAAMD,EAAMb,EAhBb1D,IAgBwBkE,EAhBxBlE,GAiBJ6B,EAAK,EAAM2C,EAAIjB,EAjBXvD,IAiBqB6D,EAjBrB7D,GAkBJU,EAAOnG,EAAKsH,EAAI/L,GAlBZkK,IAmBV,GAAI,CAAC7G,GAAGyH,GAAG,CAACzH,GAAG0H,GAAG,CAACH,GAAO9F,GAAI,MAAM,MAAU,2BAC9C,OAAO8F,CACT,CAEkE,GAErD+D,GAAYC,SC9BGC,CAAkB,CAAEC,CAAc,EAC5D,IAAM/V,EAAS,GAAiBgW,CJ0pB5B,SAAsBF,CAAmB,EAC7C,IAAMG,EAAQC,SAnCMhJ,CAAgB,EACpC,IAAMZ,EAAOW,GAAcC,GAc3B,OAbAO,EACEnB,EACA,CACEvM,KAAM,OACNkR,KAAM,WACNlO,YAAa,U,EAEf,CACEoT,SAAU,WACVC,cAAe,WACfC,KAAM,S,GAGHpL,OAAOoC,MAAM,CAAC,CAAEgJ,KAAM,GAAM,GAAG/J,CAAI,EAC5C,EAmB6BwJ,GACrB,CAAExL,GAAAA,CAAE,CAAEjL,EAAGiX,CAAW,CAAE,CAAGL,EACzBM,EAAgBjM,EAAGoC,KAAK,CAAG,EAC3B8J,EAAkB,EAAIlM,EAAGoC,KAAK,CAAG,EAKvC,SAAS+J,EAAKpR,CAAS,EACrB,OAAOmG,EAAQnG,EAAGiR,EACpB,CAKA,GAAM,CACJI,gBAAiBC,CAAK,CACtBC,uBAAAA,CAAsB,CACtBC,oBAAAA,CAAmB,CACnBC,mBAAAA,CAAkB,CACnB,CAAGC,SAngB+BzK,CAAwB,EAC3D,IAAM2J,EAAQe,oEA9LoD,EA0FpE,SAA8B9J,CAAyB,EACrD,IAAMZ,EAAOW,GAAcC,GAC3BO,EACEnB,EACA,CACEjH,EAAG,QACH5F,EAAG,O,EAEL,CACEwX,yBAA0B,QAC1BC,eAAgB,UAChBC,cAAe,WACfC,cAAe,WACfC,mBAAoB,UACpB5C,UAAW,WACXhT,QAAS,U,GAGb,GAAM,CAAE6V,KAAAA,CAAI,CAAEhN,GAAAA,CAAE,CAAEjF,EAAAA,CAAC,CAAE,CAAGiH,EACxB,GAAIgL,EAAM,CACR,GAAI,CAAChN,EAAGyH,GAAG,CAAC1M,EAAGiF,EAAGyI,IAAI,EACpB,MAAM,MAAU,qEAElB,GACE,iBAAOuE,GACP,iBAAOA,EAAKC,IAAI,EAChB,mBAAOD,EAAKE,WAAW,CAEvB,MAAM,MAAU,oE,CAGpB,OAAOvM,OAAOoC,MAAM,CAAC,CAAE,GAAGf,CAAI,EAChC,EAoEkCA,GAC1B,CAAEhC,GAAAA,CAAE,CAAE,CAAG2L,EAETxU,EACJwU,EAAMxU,OAAO,EACX,EAAA6D,EAAuBmS,EAAyBC,KAChD,IAAMrS,EAAIoS,EAAME,QAAQ,GACxB,OAAOlK,EAAe9N,WAAWqC,IAAI,CAAC,CAAC,EAAK,EAAGsI,EAAG7I,OAAO,CAAC4D,EAAEsG,CAAC,EAAGrB,EAAG7I,OAAO,CAAC4D,EAAE0G,CAAC,EAChF,GACI0I,EACJwB,EAAMxB,SAAS,EACb,KAEA,IAAMmD,EAAOpY,EAAMoE,QAAQ,CAAC,GAEtB+H,EAAIrB,EAAGmK,SAAS,CAACmD,EAAKhU,QAAQ,CAAC,EAAG0G,EAAGoC,KAAK,GAC1CX,EAAIzB,EAAGmK,SAAS,CAACmD,EAAKhU,QAAQ,CAAC0G,EAAGoC,KAAK,CAAE,EAAIpC,EAAGoC,KAAK,GAC3D,MAAO,CAAEf,EAAAA,EAAGI,EAAAA,CAAC,CACf,GAMF,SAAS8K,EAAoBlL,CAAI,EAC/B,GAAM,CAAEtG,EAAAA,CAAC,CAAE5F,EAAAA,CAAC,CAAE,CAAGwW,EACX4B,EAAKvN,EAAG0H,GAAG,CAACrG,GACZmM,EAAKxN,EAAG6H,GAAG,CAAC0F,EAAIlM,GACtB,OAAOrB,EAAGiJ,GAAG,CAACjJ,EAAGiJ,GAAG,CAACuE,EAAIxN,EAAG6H,GAAG,CAACxG,EAAGtG,IAAK5F,EAC1C,CAKA,GAAI,CAAC6K,EAAGyH,GAAG,CAACzH,EAAG0H,GAAG,CAACiE,EAAM7I,EAAE,EAAGyJ,EAAoBZ,EAAM9I,EAAE,GACxD,MAAM,MAAU,+CAGlB,SAAS2J,EAAmBzI,CAAW,EACrC,MAAO,iBAAOA,GAAoBlD,GAAMkD,GAAOA,EAAM4H,EAAM5W,CAAC,CAE9D,SAAS0Y,EAAS1J,CAAW,EAC3B,GAAI,CAACyI,EAAmBzI,GAAM,MAAM,MAAU,8CAChD,CAGA,SAASuI,EAAuB5F,CAAY,MAQtC3C,EAPJ,GAAM,CAAE4I,yBAA0BvX,CAAO,CAAEqN,YAAAA,CAAW,CAAEmK,eAAAA,CAAc,CAAE7X,EAAAA,CAAC,CAAE,CAAG4W,EAC9E,GAAIvW,GAAW,iBAAOsR,EAAkB,CAGtC,GAFIA,aAAerR,YAAYqR,CAAAA,EAAMvD,EAAcuD,EAAG,EAElD,iBAAOA,GAAoB,CAACtR,EAAQG,QAAQ,CAACmR,EAAIpR,MAAM,EAAG,MAAM,MAAU,eAC9EoR,EAAMA,EAAI5O,QAAQ,CAAC2K,EAAAA,EAAiB,I,CAGtC,GAAI,CACFsB,EACE,iBAAO2C,EACHA,EACAvD,EAAmBtF,EAAY,cAAe6I,EAAKjE,G,CACzD,MAAOiL,EAAO,CACd,MAAM,MAAU,CAAC,oBAAoB,EAAEjL,EAAW,6BAA8B,OAAOiE,EAAG,CAAE,C,CAI9F,OAFIkG,GAAgB7I,CAAAA,EAAM7C,EAAQ6C,EAAKhP,EAAC,EACxC0Y,EAAS1J,GACFA,CACT,CAEA,IAAM4J,EAAmB,IAAIC,IAC7B,SAASC,EAAeC,CAAc,EACpC,GAAI,CAAEA,CAAAA,aAAiBzB,CAAI,EAAI,MAAM,MAAU,2BACjD,CAMA,YAAMA,EAYJ,OAAO0B,WAAW/K,CAAiB,EACjC,GAAM,CAAE3B,EAAAA,CAAC,CAAEI,EAAAA,CAAC,CAAE,CAAGuB,GAAK,CAAC,EACvB,GAAI,CAACA,GAAK,CAAChD,EAAGC,OAAO,CAACoB,IAAM,CAACrB,EAAGC,OAAO,CAACwB,GAAI,MAAM,MAAU,wBAC5D,GAAIuB,aAAaqJ,EAAO,MAAM,MAAU,gCACxC,IAAMxD,EAAM,GAAU7I,EAAGyH,GAAG,CAAC7P,EAAGoI,EAAGyI,IAAI,SAEvC,EAAQpH,IAAMwH,EAAIpH,GAAW4K,EAAM5D,IAAI,CAChC,IAAI4D,EAAMhL,EAAGI,EAAGzB,EAAGgI,GAAG,CAC/B,CAEA,IAAI3G,GAAC,CACH,OAAO,IAAI,CAACgM,QAAQ,GAAGhM,CAAC,CAE1B,IAAII,GAAC,CACH,OAAO,IAAI,CAAC4L,QAAQ,GAAG5L,CAAC,CAS1B,OAAOuM,WAAWC,CAAe,EAC/B,IAAMC,EAAQlO,EAAG0J,WAAW,CAACuE,EAAOhM,GAAG,CAAC,GAAOe,EAAEmL,EAAE,GACnD,OAAOF,EAAOhM,GAAG,CAAC,CAACe,EAAGpL,IAAMoL,EAAEqK,QAAQ,CAACa,CAAK,CAACtW,EAAE,GAAGqK,GAAG,CAACoK,EAAM0B,UAAU,CACxE,CAMA,OAAOK,QAAQrR,CAAQ,EACrB,IAAMsK,EAAIgF,EAAM0B,UAAU,CAAC5D,EAAUtM,EAAY,WAAYd,KAE7D,OADAsK,EAAEgH,cAAc,GACThH,CACT,CAGA,OAAOiH,eAAeC,CAAmB,CAAE,CACzC,OAAOlC,EAAMmC,IAAI,CAACC,QAAQ,CAACnC,EAAuBiC,GACpD,CAQAG,eAAeC,CAAkB,CAAE,CACjC,IAAI,CAACC,YAAY,CAAGD,EACpBhB,EAAiBkB,MAAM,CAAC,IAAI,CAC9B,CAGAR,gBAAc,CAEZ,GAAI,IAAI,CAACxF,GAAG,GAAI,CACd,GAAI8C,EAAMoB,kBAAkB,CAAE,MAC9B,OAAM,MAAU,kB,CAGlB,GAAM,CAAE1L,EAAAA,CAAC,CAAEI,EAAAA,CAAC,CAAE,CAAG,IAAI,CAAC4L,QAAQ,GAE9B,GAAI,CAACrN,EAAGC,OAAO,CAACoB,IAAM,CAACrB,EAAGC,OAAO,CAACwB,GAAI,MAAM,MAAU,4BACtD,IAAMqN,EAAO9O,EAAG0H,GAAG,CAACjG,GACdsN,EAAQxC,EAAoBlL,GAClC,GAAI,CAACrB,EAAGyH,GAAG,CAACqH,EAAMC,GAAQ,MAAM,MAAU,qCAC1C,GAAI,CAAC,IAAI,CAAClC,aAAa,GAAI,MAAM,MAAU,yCAC7C,CACAmC,UAAQ,CACN,GAAM,CAAEvN,EAAAA,CAAC,CAAE,CAAG,IAAI,CAAC4L,QAAQ,GAC3B,GAAIrN,EAAG8I,KAAK,CAAE,MAAO,CAAC9I,EAAG8I,KAAK,CAACrH,EAC/B,OAAM,MAAU,8BAClB,CAKAwN,OAAOnB,CAAY,EACjBD,EAAeC,GACf,GAAM,CAAEoB,GAAIC,CAAE,CAAEC,GAAIC,CAAE,CAAElB,GAAImB,CAAE,CAAE,CAAG,IAAI,CACjC,CAAEJ,GAAIK,CAAE,CAAEH,GAAII,CAAE,CAAErB,GAAIsB,CAAE,CAAE,CAAG3B,EAC7B4B,EAAK1P,EAAGyH,GAAG,CAACzH,EAAG6H,GAAG,CAACsH,EAAIM,GAAKzP,EAAG6H,GAAG,CAAC0H,EAAID,IACvCK,EAAK3P,EAAGyH,GAAG,CAACzH,EAAG6H,GAAG,CAACwH,EAAII,GAAKzP,EAAG6H,GAAG,CAAC2H,EAAIF,IAC7C,OAAOI,GAAMC,CACf,CAKAC,QAAM,CACJ,OAAO,IAAIvD,EAAM,IAAI,CAAC6C,EAAE,CAAElP,EAAGuI,GAAG,CAAC,IAAI,CAAC6G,EAAE,EAAG,IAAI,CAACjB,EAAE,CACpD,CAMA0B,QAAM,CACJ,GAAM,CAAE9U,EAAAA,CAAC,CAAE5F,EAAAA,CAAC,CAAE,CAAGwW,EACXhB,EAAK3K,EAAG6H,GAAG,CAAC1S,EAAG2L,IACf,CAAEoO,GAAIC,CAAE,CAAEC,GAAIC,CAAE,CAAElB,GAAImB,CAAE,CAAE,CAAG,IAAI,CACnCQ,EAAK9P,EAAGyI,IAAI,CAAEsH,EAAK/P,EAAGyI,IAAI,CAAEuH,EAAKhQ,EAAGyI,IAAI,CACxCwH,EAAKjQ,EAAG6H,GAAG,CAACsH,EAAIA,GAChB9D,EAAKrL,EAAG6H,GAAG,CAACwH,EAAIA,GAChB3G,EAAK1I,EAAG6H,GAAG,CAACyH,EAAIA,GAChBY,EAAKlQ,EAAG6H,GAAG,CAACsH,EAAIE,GA4BpB,OA3BAa,EAAKlQ,EAAGiJ,GAAG,CAACiH,EAAIA,GAChBF,EAAKhQ,EAAG6H,GAAG,CAACsH,EAAIG,GAChBU,EAAKhQ,EAAGiJ,GAAG,CAAC+G,EAAIA,GAChBF,EAAK9P,EAAG6H,GAAG,CAAC9M,EAAGiV,GACfD,EAAK/P,EAAG6H,GAAG,CAAC8C,EAAIjC,GAChBqH,EAAK/P,EAAGiJ,GAAG,CAAC6G,EAAIC,GAChBD,EAAK9P,EAAG+H,GAAG,CAACsD,EAAI0E,GAChBA,EAAK/P,EAAGiJ,GAAG,CAACoC,EAAI0E,GAChBA,EAAK/P,EAAG6H,GAAG,CAACiI,EAAIC,GAChBD,EAAK9P,EAAG6H,GAAG,CAACqI,EAAIJ,GAChBE,EAAKhQ,EAAG6H,GAAG,CAAC8C,EAAIqF,GAChBtH,EAAK1I,EAAG6H,GAAG,CAAC9M,EAAG2N,GACfwH,EAAKlQ,EAAG+H,GAAG,CAACkI,EAAIvH,GAChBwH,EAAKlQ,EAAG6H,GAAG,CAAC9M,EAAGmV,GACfA,EAAKlQ,EAAGiJ,GAAG,CAACiH,EAAIF,GAChBA,EAAKhQ,EAAGiJ,GAAG,CAACgH,EAAIA,GAChBA,EAAKjQ,EAAGiJ,GAAG,CAAC+G,EAAIC,GAChBA,EAAKjQ,EAAGiJ,GAAG,CAACgH,EAAIvH,GAChBuH,EAAKjQ,EAAG6H,GAAG,CAACoI,EAAIC,GAChBH,EAAK/P,EAAGiJ,GAAG,CAAC8G,EAAIE,GAChBvH,EAAK1I,EAAG6H,GAAG,CAACwH,EAAIC,GAChB5G,EAAK1I,EAAGiJ,GAAG,CAACP,EAAIA,GAChBuH,EAAKjQ,EAAG6H,GAAG,CAACa,EAAIwH,GAChBJ,EAAK9P,EAAG+H,GAAG,CAAC+H,EAAIG,GAChBD,EAAKhQ,EAAG6H,GAAG,CAACa,EAAI2C,GAChB2E,EAAKhQ,EAAGiJ,GAAG,CAAC+G,EAAIA,GAChBA,EAAKhQ,EAAGiJ,GAAG,CAAC+G,EAAIA,GACT,IAAI3D,EAAMyD,EAAIC,EAAIC,EAC3B,CAMA/G,IAAI6E,CAAY,EACdD,EAAeC,GACf,GAAM,CAAEoB,GAAIC,CAAE,CAAEC,GAAIC,CAAE,CAAElB,GAAImB,CAAE,CAAE,CAAG,IAAI,CACjC,CAAEJ,GAAIK,CAAE,CAAEH,GAAII,CAAE,CAAErB,GAAIsB,CAAE,CAAE,CAAG3B,EAC/BgC,EAAK9P,EAAGyI,IAAI,CAAEsH,EAAK/P,EAAGyI,IAAI,CAAEuH,EAAKhQ,EAAGyI,IAAI,CACtC1N,EAAI4Q,EAAM5Q,CAAC,CACX4P,EAAK3K,EAAG6H,GAAG,CAAC8D,EAAMxW,CAAC,CAAE2L,IACvBmP,EAAKjQ,EAAG6H,GAAG,CAACsH,EAAII,GAChBlE,EAAKrL,EAAG6H,GAAG,CAACwH,EAAIG,GAChB9G,EAAK1I,EAAG6H,GAAG,CAACyH,EAAIG,GAChBS,EAAKlQ,EAAGiJ,GAAG,CAACkG,EAAIE,GAChBc,EAAKnQ,EAAGiJ,GAAG,CAACsG,EAAIC,GACpBU,EAAKlQ,EAAG6H,GAAG,CAACqI,EAAIC,GAChBA,EAAKnQ,EAAGiJ,GAAG,CAACgH,EAAI5E,GAChB6E,EAAKlQ,EAAG+H,GAAG,CAACmI,EAAIC,GAChBA,EAAKnQ,EAAGiJ,GAAG,CAACkG,EAAIG,GAChB,IAAIc,EAAKpQ,EAAGiJ,GAAG,CAACsG,EAAIE,GA+BpB,OA9BAU,EAAKnQ,EAAG6H,GAAG,CAACsI,EAAIC,GAChBA,EAAKpQ,EAAGiJ,GAAG,CAACgH,EAAIvH,GAChByH,EAAKnQ,EAAG+H,GAAG,CAACoI,EAAIC,GAChBA,EAAKpQ,EAAGiJ,GAAG,CAACoG,EAAIC,GAChBQ,EAAK9P,EAAGiJ,GAAG,CAACuG,EAAIC,GAChBW,EAAKpQ,EAAG6H,GAAG,CAACuI,EAAIN,GAChBA,EAAK9P,EAAGiJ,GAAG,CAACoC,EAAI3C,GAChB0H,EAAKpQ,EAAG+H,GAAG,CAACqI,EAAIN,GAChBE,EAAKhQ,EAAG6H,GAAG,CAAC9M,EAAGoV,GACfL,EAAK9P,EAAG6H,GAAG,CAAC8C,EAAIjC,GAChBsH,EAAKhQ,EAAGiJ,GAAG,CAAC6G,EAAIE,GAChBF,EAAK9P,EAAG+H,GAAG,CAACsD,EAAI2E,GAChBA,EAAKhQ,EAAGiJ,GAAG,CAACoC,EAAI2E,GAChBD,EAAK/P,EAAG6H,GAAG,CAACiI,EAAIE,GAChB3E,EAAKrL,EAAGiJ,GAAG,CAACgH,EAAIA,GAChB5E,EAAKrL,EAAGiJ,GAAG,CAACoC,EAAI4E,GAChBvH,EAAK1I,EAAG6H,GAAG,CAAC9M,EAAG2N,GACfyH,EAAKnQ,EAAG6H,GAAG,CAAC8C,EAAIwF,GAChB9E,EAAKrL,EAAGiJ,GAAG,CAACoC,EAAI3C,GAChBA,EAAK1I,EAAG+H,GAAG,CAACkI,EAAIvH,GAChBA,EAAK1I,EAAG6H,GAAG,CAAC9M,EAAG2N,GACfyH,EAAKnQ,EAAGiJ,GAAG,CAACkH,EAAIzH,GAChBuH,EAAKjQ,EAAG6H,GAAG,CAACwD,EAAI8E,GAChBJ,EAAK/P,EAAGiJ,GAAG,CAAC8G,EAAIE,GAChBA,EAAKjQ,EAAG6H,GAAG,CAACuI,EAAID,GAChBL,EAAK9P,EAAG6H,GAAG,CAACqI,EAAIJ,GAChBA,EAAK9P,EAAG+H,GAAG,CAAC+H,EAAIG,GAChBA,EAAKjQ,EAAG6H,GAAG,CAACqI,EAAI7E,GAChB2E,EAAKhQ,EAAG6H,GAAG,CAACuI,EAAIJ,GAChBA,EAAKhQ,EAAGiJ,GAAG,CAAC+G,EAAIC,GACT,IAAI5D,EAAMyD,EAAIC,EAAIC,EAC3B,CAEAK,SAASvC,CAAY,CAAE,CACrB,OAAO,IAAI,CAAC7E,GAAG,CAAC6E,EAAM8B,MAAM,GAC9B,CAEQ/G,KAAG,CACT,OAAO,IAAI,CAACoG,MAAM,CAAC5C,EAAM5D,IAAI,CAC/B,CACQ6H,KAAKvb,CAAS,EACpB,OAAOwb,EAAKC,UAAU,CAAC,IAAI,CAAE7C,EAAkB5Y,EAAG,IAChD,IAAMmZ,EAAQlO,EAAG0J,WAAW,CAAC+G,EAAKxO,GAAG,CAAC,GAAOe,EAAEmL,EAAE,GACjD,OAAOsC,EAAKxO,GAAG,CAAC,CAACe,EAAGpL,IAAMoL,EAAEqK,QAAQ,CAACa,CAAK,CAACtW,EAAE,GAAGqK,GAAG,CAACoK,EAAM0B,UAAU,CACtE,EACF,CAOA2C,eAAe3b,CAAS,EACtB,IAAM4b,EAAItE,EAAM5D,IAAI,CACpB,GAAI1T,IAAM8L,GAAK,OAAO8P,EAEtB,GADAlD,EAAS1Y,GACLA,IAAM2H,GAAK,OAAO,IAAI,CAC1B,GAAM,CAAEsQ,KAAAA,CAAI,CAAE,CAAGrB,EACjB,GAAI,CAACqB,EAAM,OAAOuD,EAAKK,YAAY,CAAC,IAAI,CAAE7b,GAG1C,GAAI,CAAE8b,MAAAA,CAAK,CAAEC,GAAAA,CAAE,CAAEC,MAAAA,CAAK,CAAEC,GAAAA,CAAE,CAAE,CAAGhE,EAAKE,WAAW,CAACnY,GAC5Ckc,EAAMN,EACNO,EAAMP,EACNnN,EAAW,IAAI,CACnB,KAAOsN,EAAKjQ,IAAOmQ,EAAKnQ,IAClBiQ,EAAKpU,IAAKuU,CAAAA,EAAMA,EAAIhI,GAAG,CAACzF,EAAC,EACzBwN,EAAKtU,IAAKwU,CAAAA,EAAMA,EAAIjI,GAAG,CAACzF,EAAC,EAC7BA,EAAIA,EAAEqM,MAAM,GACZiB,IAAOpU,GACPsU,IAAOtU,GAKT,OAHImU,GAAOI,CAAAA,EAAMA,EAAIrB,MAAM,EAAC,EACxBmB,GAAOG,CAAAA,EAAMA,EAAItB,MAAM,EAAC,EAC5BsB,EAAM,IAAI7E,EAAMrM,EAAG6H,GAAG,CAACqJ,EAAIhC,EAAE,CAAElC,EAAKC,IAAI,EAAGiE,EAAI9B,EAAE,CAAE8B,EAAI/C,EAAE,EAClD8C,EAAIhI,GAAG,CAACiI,EACjB,CAWAzC,SAAS0C,CAAc,MAGjBhE,EAAciE,EAFlB3D,EAAS0D,GAGT,GAAM,CAAEnE,KAAAA,CAAI,CAAE,CAAGrB,EACjB,GAAIqB,EAAM,CACR,GAAM,CAAE6D,MAAAA,CAAK,CAAEC,GAAAA,CAAE,CAAEC,MAAAA,CAAK,CAAEC,GAAAA,CAAE,CAAE,CAAGhE,EAAKE,WAAW,CAJ3CiE,GAKF,CAAEnO,EAAGiO,CAAG,CAAErI,EAAGyI,CAAG,CAAE,CAAG,IAAI,CAACf,IAAI,CAACQ,GAC/B,CAAE9N,EAAGkO,CAAG,CAAEtI,EAAG0I,CAAG,CAAE,CAAG,IAAI,CAAChB,IAAI,CAACU,GACnCC,EAAMV,EAAKgB,eAAe,CAACV,EAAOI,GAClCC,EAAMX,EAAKgB,eAAe,CAACR,EAAOG,GAClCA,EAAM,IAAI7E,EAAMrM,EAAG6H,GAAG,CAACqJ,EAAIhC,EAAE,CAAElC,EAAKC,IAAI,EAAGiE,EAAI9B,EAAE,CAAE8B,EAAI/C,EAAE,EACzDhB,EAAQ8D,EAAIhI,GAAG,CAACiI,GAChBE,EAAOC,EAAIpI,GAAG,CAACqI,E,KACV,CACL,GAAM,CAAEtO,EAAAA,CAAC,CAAE4F,EAAAA,CAAC,CAAE,CAAG,IAAI,CAAC0H,IAAI,CAbpBa,GAcNhE,EAAQnK,EACRoO,EAAOxI,C,CAGT,OAAOyD,EAAM2B,UAAU,CAAC,CAACb,EAAOiE,EAAK,CAAC,CAAC,EAAE,CAS3CI,qBAAqBtJ,CAAQ,CAAEnN,CAAS,CAAE5F,CAAS,EACjD,IAAMwG,EAAI0Q,EAAMmC,IAAI,CACd3G,EAAM,CACVR,EACAtM,IACIA,IAAM8F,IAAO9F,IAAM2B,IAAQ2K,EAAE4H,MAAM,CAACtT,GAA2B0L,EAAEoH,QAAQ,CAAC1T,GAAjCsM,EAAEqJ,cAAc,CAAC3V,GAC1DsD,EAAMwJ,EAAI,IAAI,CAAE9M,GAAGkO,GAAG,CAACpB,EAAIK,EAAG/S,IACpC,OAAOkJ,EAAIwK,GAAG,GAAKtS,KAAAA,EAAY8H,CACjC,CAKAgP,SAASoE,CAAM,EACb,GAAM,CAAEvC,GAAI7N,CAAC,CAAE+N,GAAI3N,CAAC,CAAE0M,GAAIuD,CAAC,CAAE,CAAG,IAAI,CAC9B7I,EAAM,IAAI,CAACA,GAAG,EAGV,OAAN4I,GAAYA,CAAAA,EAAK5I,EAAM7I,EAAGgI,GAAG,CAAGhI,EAAGwJ,GAAG,CAACkI,EAAC,EAC5C,IAAMC,EAAK3R,EAAG6H,GAAG,CAACxG,EAAGoQ,GACfG,EAAK5R,EAAG6H,GAAG,CAACpG,EAAGgQ,GACfI,EAAK7R,EAAG6H,GAAG,CAAC6J,EAAGD,GACrB,GAAI5I,EAAK,MAAO,CAAExH,EAAGrB,EAAGyI,IAAI,CAAEhH,EAAGzB,EAAGyI,IAAI,EACxC,GAAI,CAACzI,EAAGyH,GAAG,CAACoK,EAAI7R,EAAGgI,GAAG,EAAG,MAAM,MAAU,oBACzC,MAAO,CAAE3G,EAAGsQ,EAAIlQ,EAAGmQ,CAAE,CACvB,CACA/E,eAAa,CACX,GAAM,CAAE3S,EAAG4X,CAAQ,CAAEjF,cAAAA,CAAa,CAAE,CAAGlB,EACvC,GAAImG,IAAapV,GAAK,MAAO,GAC7B,GAAImQ,EAAe,OAAOA,EAAcR,EAAO,IAAI,CACnD,OAAM,MAAU,+DAClB,CACAS,eAAa,CACX,GAAM,CAAE5S,EAAG4X,CAAQ,CAAEhF,cAAAA,CAAa,CAAE,CAAGnB,SACvC,IAAiBjP,GAAY,IAAI,CAC7BoQ,EAAsBA,EAAcT,EAAO,IAAI,EAC5C,IAAI,CAACqE,cAAc,CAAC/E,EAAMzR,CAAC,CACpC,CAEA6X,WAAW3E,EAAe,EAAI,EAE5B,OADA,IAAI,CAACiB,cAAc,GACZlX,EAAQkV,EAAO,IAAI,CAAEe,EAC9B,CAEA4E,MAAM5E,EAAe,EAAI,EACvB,OAAOjK,EAAc,IAAI,CAAC4O,UAAU,CAAC3E,GACvC,CAzUAvS,YAAqBqU,CAAK,CAAWE,CAAK,CAAWjB,CAAK,CAAC,CACzD,GADmB,KAAAe,EAAE,CAAFA,EAAgB,KAAAE,EAAE,CAAFA,EAAgB,KAAAjB,EAAE,CAAFA,EAC/Ce,MAAAA,GAAc,CAAClP,EAAGC,OAAO,CAACiP,GAAK,MAAM,MAAU,cACnD,GAAIE,MAAAA,GAAc,CAACpP,EAAGC,OAAO,CAACmP,GAAK,MAAM,MAAU,cACnD,GAAIjB,MAAAA,GAAc,CAACnO,EAAGC,OAAO,CAACkO,GAAK,MAAM,MAAU,aACrD,C,CAPgB9B,CAAAA,EAAAmC,IAAI,CAAG,IAAInC,EAAMV,EAAM9I,EAAE,CAAE8I,EAAM7I,EAAE,CAAE9C,EAAGgI,GAAG,EAC3CqE,EAAA5D,IAAI,CAAG,IAAI4D,EAAMrM,EAAGyI,IAAI,CAAEzI,EAAGgI,GAAG,CAAEhI,EAAGyI,IAAI,EA6U3D,IAAMwJ,EAAQtG,EAAMpJ,UAAU,CACxBgO,EAAOD,SDrjB0BtV,CAAsB,CAAEkX,CAAY,EAC3E,IAAMX,EAAkB,CAACY,EAAoB7N,KAC3C,IAAMiE,EAAMjE,EAAKsL,MAAM,GACvB,OAAOuC,EAAY5J,EAAMjE,CAC3B,EACMtC,EAAO,GAGJ,EAAEoQ,QAFOlZ,KAAKwJ,IAAI,CAACwP,EAAOG,GAAK,EAEpB1D,WADC,GAAM0D,CAAAA,EAAI,EACD,GAE9B,MAAO,CACLd,gBAAAA,EAEAX,aAAa0B,CAAM,CAAEvd,CAAS,EAC5B,IAAIiO,EAAIhI,EAAEyN,IAAI,CACVjF,EAAO8O,EACX,KAAOvd,EAAI8L,IACL9L,EAAI2H,IAAKsG,CAAAA,EAAIA,EAAEiG,GAAG,CAACzF,EAAC,EACxBA,EAAIA,EAAEqM,MAAM,GACZ9a,IAAM2H,GAER,OAAOsG,CACT,EAYAuP,iBAAiBD,CAAM,CAAED,CAAS,EAChC,GAAM,CAAED,QAAAA,CAAO,CAAEzD,WAAAA,CAAU,CAAE,CAAG3M,EAAKqQ,GAC/BpE,EAAc,EAAE,CAClBjL,EAAOsP,EACPE,EAAOxP,EACX,IAAK,IAAIyP,EAAS,EAAGA,EAASL,EAASK,IAAU,CAC/CD,EAAOxP,EACPiL,EAAO5O,IAAI,CAACmT,GAEZ,IAAK,IAAI5a,EAAI,EAAGA,EAAI+W,EAAY/W,IAC9B4a,EAAOA,EAAKvJ,GAAG,CAACjG,GAChBiL,EAAO5O,IAAI,CAACmT,GAEdxP,EAAIwP,EAAK3C,MAAM,E,CAEjB,OAAO5B,CACT,EASAqC,KAAK+B,CAAS,CAAEK,CAAgB,CAAE3d,CAAS,EAGzC,GAAM,CAAEqd,QAAAA,CAAO,CAAEzD,WAAAA,CAAU,CAAE,CAAG3M,EAAKqQ,GAEjCrP,EAAIhI,EAAEyN,IAAI,CACVG,EAAI5N,EAAEwT,IAAI,CAERmE,EAAO7Y,OAAO,GAAKuY,EAAI,GACvBO,EAAY,GAAKP,EACjBQ,EAAU/Y,OAAOuY,GAEvB,IAAK,IAAII,EAAS,EAAGA,EAASL,EAASK,IAAU,CAC/C,IAAM5W,EAAS4W,EAAS9D,EAEpBmE,EAAQ9d,OAAOD,EAAI4d,GAGvB5d,IAAM8d,EAIFC,EAAQnE,IACVmE,GAASF,EACT7d,GAAK2H,IAYP,IAAMqW,EAAUlX,EAAS3C,KAAK8Z,GAAG,CAACF,GAAS,EACrCG,EAAQR,EAAS,GAAM,EACvBS,EAAQJ,EAAQ,CAClBA,CAAU,IAAVA,EAEFlK,EAAIA,EAAEK,GAAG,CAACsI,EAAgB0B,EAAOP,CAAW,CAN9B7W,EAMuC,GAErDmH,EAAIA,EAAEiG,GAAG,CAACsI,EAAgB2B,EAAOR,CAAW,CAACK,EAAQ,E,CAQzD,MAAO,CAAE/P,EAAAA,EAAG4F,EAAAA,CAAC,CACf,EAEA4H,WAAWnJ,CAAI,CAAE8L,CAA2B,CAAEpe,CAAS,CAAEqe,CAAoB,EAE3E,IAAMf,EAAYhL,EAAEuH,YAAY,EAAI,EAEhC6B,EAAO0C,EAAe3Y,GAAG,CAAC6M,GAO9B,OANKoJ,IACHA,EAAO,IAAI,CAAC8B,gBAAgB,CAAClL,EAAGgL,GACtB,IAANA,GACFc,EAAe9Z,GAAG,CAACgO,EAAG+L,EAAU3C,KAG7B,IAAI,CAACH,IAAI,CAAC+B,EAAG5B,EAAM1b,EAC5B,C,CAEJ,ECsboBsX,EAAOV,EAAMqB,IAAI,CAAG9T,KAAKwJ,IAAI,CAACuP,EAAQ,GAAKA,GAE7D,MAAO,CACLtG,MAAAA,EACAS,gBAAiBC,EACjBC,uBAAAA,EACAC,oBAAAA,EACAC,mBAAAA,C,CAEJ,EA4FwB,CACpB,GAAGb,CAAK,CACRxU,QAAQ6D,CAAC,CAAEmS,CAAK,CAAEC,CAAqB,EACrC,IAAMrS,EAAIoS,EAAME,QAAQ,GAClBhM,EAAIrB,EAAG7I,OAAO,CAAC4D,EAAEsG,CAAC,EAClBgS,EAAMlQ,SACZ,EACSkQ,EAAIhe,WAAWqC,IAAI,CAAC,CAACyV,EAAM6B,QAAQ,GAAK,EAAO,EAAK,EAAG3N,GAEvDgS,EAAIhe,WAAWqC,IAAI,CAAC,CAAC,EAAK,EAAG2J,EAAGrB,EAAG7I,OAAO,CAAC4D,EAAE0G,CAAC,EAEzD,EACA0I,UAAUjV,CAAiB,EACzB,IAAM6D,EAAM7D,EAAMI,MAAM,CAClBge,EAAOpe,CAAK,CAAC,EAAE,CACfoY,EAAOpY,EAAMoE,QAAQ,CAAC,GAE5B,GAAIP,IAAQkT,GAAkBqH,CAAAA,IAAAA,GAAiBA,IAAAA,CAAY,EAAI,CAC7D,IAAMjS,EAAI8B,EAAmBmK,GAC7B,GAAI,CAjCDzM,CAAAA,GAiCsBQ,GAjCT0C,EAAM/D,EAAGkC,KAAK,EAiCD,MAAM,MAAU,yBAC7C,IAAMqR,EAAKhH,EAAoBlL,GAC3BI,EAAIzB,EAAGyJ,IAAI,CAAC8J,GACVC,EAAS,CAAC/R,EAAI/E,EAAAA,IAASA,GAI7B,MAFmB4W,CAAAA,EAAAA,CAAO,GAAO,IACfE,GAAQ/R,CAAAA,EAAIzB,EAAGuI,GAAG,CAAC9G,EAAC,EAC/B,CAAEJ,EAAAA,EAAGI,EAAAA,CAAC,C,CACR,GAAI1I,IAAQmT,GAAmBoH,IAAAA,EAAe,CACnD,IAAMjS,EAAIrB,EAAGmK,SAAS,CAACmD,EAAKhU,QAAQ,CAAC,EAAG0G,EAAGoC,KAAK,GAC1CX,EAAIzB,EAAGmK,SAAS,CAACmD,EAAKhU,QAAQ,CAAC0G,EAAGoC,KAAK,CAAE,EAAIpC,EAAGoC,KAAK,GAC3D,MAAO,CAAEf,EAAAA,EAAGI,EAAAA,CAAC,C,CAEb,MAAM,MACJ,CAAC,gBAAgB,EAAE1I,EAAG,yBAA0BkT,EAAa,uBAAwBC,EAAe,oBAAqB,CAG/H,C,GAEIuH,EAAgB,GACpBtQ,EAAcA,EAAmBY,EAAK4H,EAAMlJ,WAAW,GAEzD,SAASiR,EAAsB5e,CAAc,EAC3C,IAAM6e,EAAO3H,GAAetP,GAC5B,OAAO5H,EAAS6e,CAClB,CAMA,IAAMC,EAAS,CAACze,EAAeuC,EAAckD,IAAeuI,EAAmBhO,EAAEuF,KAAK,CAAChD,EAAMkD,IAK7F,QAAMiZ,EAMJ,OAAOC,YAAY/W,CAAQ,CAAE,CAC3B,IAAM5C,EAAIwR,EAAMlJ,WAAW,CAE3B,OADA1F,EAAMc,EAAY,mBAAoBd,EAAK5C,EAAAA,GACpC,IAAI0Z,EAAUD,EAAO7W,EAAK,EAAG5C,GAAIyZ,EAAO7W,EAAK5C,EAAG,EAAIA,GAC7D,CAIA,OAAO4Z,QAAQhX,CAAQ,CAAE,CACvB,GAAM,CAAEoB,CAAC,CAAEwF,EAAAA,CAAC,CAAE,CAAGP,GAAIK,KAAK,CAAC5F,EAAY,MAAOd,IAC9C,OAAO,IAAI8W,EAAU1V,EAAGwF,EAC1B,CAEA0K,gBAAc,CAEZ,GAAI,CAAC7B,EAAmB,IAAI,CAACrO,CAAC,EAAG,MAAM,MAAU,6BACjD,GAAI,CAACqO,EAAmB,IAAI,CAAC7I,CAAC,EAAG,MAAM,MAAU,4BACnD,CAEAqQ,eAAeC,CAAgB,CAAE,CAC/B,OAAO,IAAIJ,EAAU,IAAI,CAAC1V,CAAC,CAAE,IAAI,CAACwF,CAAC,CAAEsQ,EACvC,CAEAC,iBAAiBC,CAAY,EAC3B,GAAM,CAAEhW,EAAAA,CAAC,CAAEwF,EAAAA,CAAC,CAAEsQ,SAAUG,CAAG,CAAE,CAAG,IAAI,CAC9Bla,EAAI4R,EAAcjO,EAAY,UAAWsW,IAC/C,GAAIC,MAAAA,GAAe,CAAC,CAAC,EAAG,EAAG,EAAG,EAAE,CAAC7e,QAAQ,CAAC6e,GAAM,MAAM,MAAU,uBAChE,IAAMC,EAAOD,IAAAA,GAAaA,IAAAA,EAAYjW,EAAIwN,EAAM5W,CAAC,CAAGoJ,EACpD,GAAIkW,GAAQrU,EAAGkC,KAAK,CAAE,MAAM,MAAU,8BACtC,IAAMoS,EAAS,CAACF,EAAAA,CAAM,GAAO,EAAI,KAAO,KAClCG,EAAIlI,EAAM+B,OAAO,CAACkG,EAASb,EAAcY,IACzCG,EApGDtT,EAoGWmT,EApGGrI,GAqGbyI,EAAKtI,EAAK,CAACjS,EAAIsa,GACfE,EAAKvI,EAAKxI,EAAI6Q,GACdtM,EAAImE,EAAMmC,IAAI,CAACgD,oBAAoB,CAAC+C,EAAGE,EAAIC,GACjD,GAAI,CAACxM,EAAG,MAAM,MAAU,qBAExB,OADAA,EAAEmG,cAAc,GACTnG,CACT,CAGAyM,UAAQ,CACN,OAAOjB,EAAsB,IAAI,CAAC/P,CAAC,CACrC,CAEAiR,YAAU,CACR,OAAO,IAAI,CAACD,QAAQ,GAAK,IAAId,EAAU,IAAI,CAAC1V,CAAC,CAAEgO,EAAK,CAAC,IAAI,CAACxI,CAAC,EAAG,IAAI,CAACsQ,QAAQ,EAAI,IAAI,CAIrFY,eAAa,CACX,OAAO1R,EAAc,IAAI,CAAC2R,QAAQ,GACpC,CACAA,UAAQ,CACN,OAAO1R,GAAIS,UAAU,CAAC,CAAE1F,EAAG,IAAI,CAACA,CAAC,CAAEwF,EAAG,IAAI,CAACA,CAAC,EAC9C,CAGAoR,mBAAiB,CACf,OAAO5R,EAAc,IAAI,CAAC6R,YAAY,GACxC,CACAA,cAAY,CACV,OAAOvB,EAAc,IAAI,CAACtV,CAAC,EAAIsV,EAAc,IAAI,CAAC9P,CAAC,CACrD,CApEA9I,YAAqBsD,CAAS,CAAWwF,CAAS,CAAWsQ,CAAiB,CAAC,CAA1D,KAAA9V,CAAC,CAADA,EAAoB,KAAAwF,CAAC,CAADA,EAAoB,KAAAsQ,QAAQ,CAARA,EAC3D,IAAI,CAAC5F,cAAc,EACrB,C,EAsHF,SAAS4G,EAAU3Q,CAAsB,EACvC,IAAM5N,EAAM4N,aAAgBjP,WACtBiC,EAAM,iBAAOgN,EACbvL,EAAM,CAACrC,GAAOY,CAAE,GAAOgN,EAAahP,MAAM,QAChD,EAAgByD,IAAQkT,GAAiBlT,IAAQmT,EAC7C5U,EAAYyB,IAAQ,EAAIkT,GAAiBlT,IAAQ,EAAImT,EACrD5H,aAAgB+H,CAEtB,CAuBA,IAAMR,EACJF,EAAME,QAAQ,EACd,SAAU3W,CAAiB,EAGzB,IAAM6O,EAAMZ,EAAmBjO,GACzBggB,EAAQhgB,EAAAA,EAAMI,MAAM,CAAOqW,EAAMpJ,UAAU,CACjD,OAAO2S,EAAQ,EAAInR,GAAOjK,OAAOob,GAASnR,CAC5C,EACI+H,EACJH,EAAMG,aAAa,EACnB,SAAU5W,CAAiB,EACzB,OAAOiX,EAAKN,EAAS3W,GACvB,EAEIigB,EAAahS,EAAWwI,EAAMpJ,UAAU,EAI9C,SAAS6S,EAAWrR,CAAW,EAC7B,GAAI,iBAAOA,EAAkB,MAAM,MAAU,mBAC7C,GAAI,CAAElD,CAAAA,IAAOkD,GAAOA,EAAMoR,CAAS,EACjC,MAAM,MAAU,CAAC,oBAAoB,EAAExJ,EAAMpJ,UAAU,CAAC,CAAC,EAE3D,OAAOY,EAAmBY,EAAK4H,EAAMlJ,WAAW,CAClD,CAsDA,IAAM4S,EAA2B,CAAEtJ,KAAMJ,EAAMI,IAAI,CAAEuJ,QAAS,EAAK,EAC7DC,EAA0B,CAAExJ,KAAMJ,EAAMI,IAAI,CAAEuJ,QAAS,EAAK,SAmBlEjJ,EAAMmC,IAAI,CAACE,cAAc,CAAC,GAgEnB,CACL/C,MAAAA,EACA6J,aA3MF,SAAsBjH,CAAmB,CAAEnB,EAAe,EAAI,EAC5D,OAAOf,EAAMiC,cAAc,CAACC,GAAYwD,UAAU,CAAC3E,EACrD,EA0MEqI,gBAjLF,SAAyBC,CAAiB,CAAEC,CAAY,CAAEvI,EAAe,EAAI,EAC3E,GAAI6H,EAAUS,GAAW,MAAM,MAAU,iCACzC,GAAI,CAACT,EAAUU,GAAU,MAAM,MAAU,iCACzC,IAAMxgB,EAAIkX,EAAM+B,OAAO,CAACuH,GACxB,OAAOxgB,EAAEsZ,QAAQ,CAACnC,EAAuBoJ,IAAW3D,UAAU,CAAC3E,EACjE,EA6KEwI,KA3EF,SAAczB,CAAY,CAAE0B,CAAgB,CAAE7T,EAAOqT,CAAc,EACjE,GAAM,CAAEnW,KAAAA,CAAI,CAAE4W,MAAAA,CAAK,CAAE,CAAGC,SA7DT5B,CAAY,CAAE5F,CAAmB,CAAEvM,EAAOqT,CAAc,EACvE,GAAI,CAAC,YAAa,YAAY,CAACW,IAAI,CAAC,GAAOjX,KAAKiD,GAC9C,MAAM,MAAU,uCAClB,GAAM,CAAEvM,KAAAA,CAAI,CAAEgD,YAAAA,CAAW,CAAE,CAAGkT,EAC1B,CAAEI,KAAAA,CAAI,CAAEuJ,QAAAA,CAAO,CAAEW,aAAcC,CAAG,CAAE,CAAGlU,CAC/B,OAAR+J,GAAcA,CAAAA,EAAO,EAAG,EAC5BoI,EAAUtW,EAAY,UAAWsW,GAC7BmB,GAASnB,CAAAA,EAAUtW,EAAY,oBAAqBpI,EAAK0e,GAAQ,EAKrE,IAAMgC,EAAQrK,EAAcqI,GACtB3Q,EAAI8I,EAAuBiC,GAC3B6H,EAAW,CAAChB,EAAW5R,GAAI4R,EAAWe,GAAO,CAEnD,GAAID,MAAAA,EAAa,CAEf,IAAMlY,EAAIkY,CAAQ,IAARA,EAAezd,EAAYuH,EAAGoC,KAAK,EAAI8T,EACjDE,EAAS/W,IAAI,CAACxB,EAAY,eAAgBG,EAAGgC,EAAGoC,KAAK,E,CAEvD,IAAMlD,EAAOiE,KAAkBiT,GAwB/B,MAAO,CAAElX,KAAAA,EAAM4W,MArBf,SAAeO,CAAkB,EAE/B,IAAMtX,EAAI8M,EAASwK,GACnB,GAAI,CAAC7J,EAAmBzN,GAAI,OAC5B,IAAMuX,EAnRDpV,EAmRWnC,EAnRGiN,GAoRbrK,EAAI0K,EAAMmC,IAAI,CAACC,QAAQ,CAAC1P,GAAGsO,QAAQ,GACnClP,EAAIgO,EAAKxK,EAAEN,CAAC,EAClB,GAAIlD,IAAM0C,GAAK,OAIf,IAAM8C,EAAIwI,EAAKmK,EAAKnK,EAAKvK,EAAIzD,EAAIqF,IACjC,GAAIG,IAAM9C,GAAK,OACf,IAAIoT,EAAW,CAACtS,EAAEN,CAAC,GAAKlD,EAAI,EAAI,GAAKnJ,OAAO2M,EAAEF,CAAC,CAAG/E,IAC9C6Z,EAAQ5S,EAKZ,OAJIoI,GAAQ2H,EAAsB/P,KAChC4S,EAxOG7C,EAwOgB/P,GAxOWwI,EAAK,CAwOhBxI,GAAAA,EACnBsQ,GAAY,GAEP,IAAIJ,EAAU1V,EAAGoY,EAAOtC,EACjC,CACoB,CACtB,EAekCE,EAAS0B,EAAS7T,GAC5CwU,EAAOrT,EAA6BwI,EAAMlW,IAAI,CAACE,SAAS,CAAEgW,EAAMlJ,WAAW,CAAEkJ,EAAMhF,IAAI,EAC7F,OAAO6P,EAAKtX,EAAM4W,EACpB,EAwEEW,OArDF,SACEC,CAA8B,CAC9BvC,CAAY,CACZwC,CAAc,CACd3U,EAAOuT,CAAc,MASjBlO,EADAuP,EAHJ,GAFAzC,EAAUtW,EAAY,UAAWsW,GACjCwC,EAAY9Y,EAAY,YAAa8Y,GACjC,WAAY3U,EAAM,MAAM,MAAU,sCACtC,GAAM,CAAE+J,KAAAA,CAAI,CAAEuJ,QAAAA,CAAO,CAAE,CAAGtT,EAI1B,GAAI,CACF,GAAI,iBATK0U,GASqBG,aAAcxhB,WAG1C,GAAI,CACFuhB,EAAO/C,EAAUE,OAAO,CAbnB2C,E,CAcL,MAAOI,EAAU,CACjB,GAAI,CAAEA,CAAAA,aAAoB1T,GAAIC,GAAG,EAAG,MAAMyT,EAC1CF,EAAO/C,EAAUC,WAAW,CAhBvB4C,E,MAkBF,GAAI,iBAlBFA,GAkB4B,iBAAOG,EAAG1Y,CAAC,EAAiB,iBAAO0Y,EAAGlT,CAAC,CAAe,CACzF,GAAM,CAAExF,EAAAA,CAAC,CAAEwF,EAAAA,CAAC,CAAE,CAnBP+S,EAoBPE,EAAO,IAAI/C,EAAU1V,EAAGwF,E,MAExB,MAAM,MAAU,SAElB0D,EAAIgF,EAAM+B,OAAO,CAACuI,E,CAClB,MAAOjJ,EAAO,CACd,GAAKA,UAAAA,EAAgBpV,OAAO,CAC1B,MAAM,MAAU,kEAClB,MAAO,E,CAET,GAAIyT,GAAQ6K,EAAKjC,QAAQ,GAAI,MAAO,GAChCW,GAASnB,CAAAA,EAAUxI,EAAMlW,IAAI,CAAC0e,EAAO,EACzC,GAAM,CAAEhW,EAAAA,CAAC,CAAEwF,EAAAA,CAAC,CAAE,CAAGiT,EACX1c,EAAI4R,EAAcqI,GAClB4C,EAlXC7V,EAkXSyC,EAlXKqI,GAmXfyI,EAAKtI,EAAKjS,EAAI6c,GACdrC,EAAKvI,EAAKhO,EAAI4Y,GACdxC,EAAIlI,EAAMmC,IAAI,CAACgD,oBAAoB,CAACnK,EAAGoN,EAAIC,IAAKrH,WACtD,GAAI,CAACkH,EAAG,MAAO,GACf,IAAM5c,EAAIwU,EAAKoI,EAAElT,CAAC,EAClB,OAAO1J,IAAMwG,CACf,EAOEiO,gBAAiBC,EACjBwH,UAAAA,EACAmD,MA3PY,CACZC,kBAAkB1I,CAAmB,EACnC,GAAI,CAEF,OADAjC,EAAuBiC,GAChB,E,CACP,MAAOb,EAAO,CACd,MAAO,E,CAEX,EACApB,uBAAwBA,EAMxB4K,iBAAkB,KAChB,IAAMC,EAAOxL,EAAMlT,WAAW,CAACuH,EAAGoC,KAAK,CAAG,GACpC2B,EAAM7C,SFjbhBzL,CAAyB,CACzB2hB,CAAkB,CAClBngB,EAAO,EAAK,EAEZxB,EAAOoI,EAAY,cAAepI,GAClC,IAAMmJ,EAAUnJ,EAAKH,MAAM,CACrB+hB,EAAS/U,GAAQ8U,GAAY3U,WAAW,CAAG,EACjD,GAAI4U,EAAS,IAAMzY,EAAUyY,GAAUzY,EAAU,KAC/C,MAAM,MAAU,CAAC,8BAA8B,EAAEyY,EAAM,4BAA6BzY,EAAO,CAAE,EAC/F,IAAMmF,EAAM9M,EAAOwG,EAAgBhI,GAAQ+H,EAAgB/H,GAC3D,OAAOyL,EAAI6C,EAAKqT,EAAa1a,GAAOA,CACtC,EEsa0Cya,EAAMnL,GAC1C,OAAO7I,EAAmBY,EAAK4H,EAAMlJ,WAAW,CAClD,EAUA6U,WAAW3I,EAAa,CAAC,CAAExB,EAAQd,EAAMmC,IAAI,EAG3C,OAFArB,EAAMuB,cAAc,CAACC,GACrBxB,EAAMsB,QAAQ,CAAC3U,OAAO,IACfqT,CACT,C,EA4NJ,GI3iC8C,CAAE,GAAG3B,CAAQ,CARvD/V,KAQoEA,EAPpEkR,KAAM,CAACD,EAAiB,GAAG6Q,IAAuB5Q,GAOkBlR,EAPPiR,EAAKzI,SV+F1C,GAAGuZ,CAAoB,EACjD,GAAI,CAACA,EAAOC,KAAK,CAAC,GAAO1c,aAAa1F,YAAa,MAAM,MAAU,4BACnE,GAAImiB,IAAAA,EAAOliB,MAAM,CAAQ,OAAOkiB,CAAM,CAAC,EAAE,CACzC,IAAMliB,EAASkiB,EAAOpZ,MAAM,CAAC,CAACrD,EAAGrE,IAAQqE,EAAIrE,EAAIpB,MAAM,CAAE,GACnD6L,EAAS,IAAI9L,WAAWC,GAC9B,IAAK,IAAIsC,EAAI,EAAG0G,EAAM,EAAG1G,EAAI4f,EAAOliB,MAAM,CAAEsC,IAAK,CAC/C,IAAMlB,EAAM8gB,CAAM,CAAC5f,EAAE,CACrBuJ,EAAO9H,GAAG,CAAC3C,EAAK4H,GAChBA,GAAO5H,EAAIpB,MAAM,CAEnB,OAAO6L,CACT,KU1GqFoW,IACjF9e,YAAWA,CAM8D,GAC3E,OAAOkI,OAAOoC,MAAM,CAAC,CAAE,GAAGrN,EAAO+V,EAAQ,CAAE/V,OAAAA,CAAM,EACnD,ED4BE,CACEqF,EAAGjB,OAAO,GACV3E,EAAG2E,OAAO,GACVkG,GAAAA,GACAjL,EAAG+R,GAEHjE,GAAI/I,OAAO,iFACXgJ,GAAIhJ,OAAO,iFACXI,EAAGJ,OAAO,GACViS,KAAM,GAONiB,KAAM,CACJC,KAAMnT,OAAO,sEACboT,YAAa,IAEX,IAAMwK,EAAK5d,OAAO,sCACZ6d,EAAK,CAACjb,GAAM5C,OAAO,sCACnB8d,EAAK9d,OAAO,uCAEZ+d,EAAY/d,OAAO,uCAEnB6N,EAAKZ,GAAW2D,EAAK3L,EAPjB+H,IAQJgR,EAAK/Q,GAAW,CAAC4Q,EAAK5Y,EARlB+H,IASNgK,EAAK5P,EAAInC,EAAI4I,EAAK+P,EAAKI,EAAKF,EATtB9Q,IAUNkK,EAAK9P,EAAI,CAACyG,EAAKgQ,EAAKG,EANbJ,EAJD5Q,IAWJ+J,EAAQC,EAAK+G,EACb9G,EAAQC,EAAK6G,EAGnB,GAFIhH,GAAOC,CAAAA,EAAK/b,GAAI+b,CAAC,EACjBC,GAAOC,CAAAA,EAAKjc,GAAIic,CAAC,EACjBF,EAAK+G,GAAa7G,EAAK6G,EACzB,MAAM,MAAU,uCAAyC9Y,GAE3D,MAAO,CAAE8R,MAAAA,EAAOC,GAAAA,EAAIC,MAAAA,EAAOC,GAAAA,CAAE,CAC/B,C,GAGJxU,GAKU1C,OAAO,GAoBLwR,GAAUc,eAAe,CA6FjBd,GAAU0L,KAAK,CAACE,gBAAgB,CAUtD,IAAMa,GAASC,SFlDoClY,CAAQ,CAAEmC,CAAyB,EAEpF,IAAMgW,EAAQhW,EAAIA,GAAG,CAAC,GAAOxK,MAAMC,IAAI,CAACE,GAAG8F,OAAO,IAClD,MAAO,CAAC2D,EAAMI,KACZ,GAAM,CAACyW,EAAMC,EAAMC,EAAMC,EAAK,CAAGJ,EAAMhW,GAAG,CAAC,GACzCxC,EAAIrB,MAAM,CAAC,CAAC0L,EAAKlS,IAAMkI,EAAMmJ,GAAG,CAACnJ,EAAM+H,GAAG,CAACiC,EAAKzI,GAAIzJ,KAItD,MAAO,CAAEyJ,EAFTA,EAAIvB,EAAMqJ,GAAG,CAAC+O,EAAMC,GAER1W,EADZA,EAAI3B,EAAM+H,GAAG,CAACpG,EAAG3B,EAAMqJ,GAAG,CAACiP,EAAMC,GACpB,CACf,CACF,EEwCErY,GACA,CAEE,CACE,qEACA,oEACA,qEACA,qEACD,CAED,CACE,qEACA,qEACA,qEACD,CAED,CACE,qEACA,qEACA,qEACA,qEACD,CAED,CACE,qEACA,qEACA,qEACA,qEACD,CACF,CAACiC,GAAG,CAAC,GAAOrK,EAAEqK,GAAG,CAAC,GAAOnI,OAAOqD,MAE7Bmb,GAASC,SH24BbvY,CAAiB,CACjBgC,CAIC,EAGD,GADAd,GAAkBlB,GACd,CAACA,EAAGC,OAAO,CAAC+B,EAAK3G,CAAC,GAAK,CAAC2E,EAAGC,OAAO,CAAC+B,EAAK1G,CAAC,GAAK,CAAC0E,EAAGC,OAAO,CAAC+B,EAAKoG,CAAC,EAClE,MAAM,MAAU,qCAClB,IAAMoQ,EAAYC,SA3EczY,CAAiB,CAAEoI,CAAI,EAEvD,IAAMzG,EAAI3B,EAAGkC,KAAK,CACd/H,EAAI0G,GACR,IAAK,IAAI6X,EAAI/W,EAAIjF,GAAKgc,EAAI/b,KAAQkE,GAAK6X,GAAK/b,GAAKxC,GAAKuC,GACtD,IAAMiL,EAAKxN,EACL2d,EAAK,CAACnW,EAAIjF,EAAAA,EAAOC,IAAOgL,EACxBgR,EAAK,CAACb,EAAKpb,EAAAA,EAAOC,GAClBic,EAAKjc,IAAOgL,EAAKjL,GACjBmc,EAAKlc,IAAQgL,CAAAA,EAAKjL,EAAAA,EAClBoc,EAAK9Y,EAAGwH,GAAG,CAACY,EAAG0P,GACfiB,EAAK/Y,EAAGwH,GAAG,CAACY,EAAG,CAAC0P,EAAKpb,EAAAA,EAAOC,IAC9B6b,EAAY,CAAC9W,EAAM/J,KACrB,IAAIqhB,EAAMF,EACNG,EAAMjZ,EAAGwH,GAAG,CAAC7P,EAAGihB,GAChBM,EAAMlZ,EAAG0H,GAAG,CAACuR,GACjBC,EAAMlZ,EAAG6H,GAAG,CAACqR,EAAKvhB,GAClB,IAAIwhB,EAAMnZ,EAAG6H,GAAG,CAACnG,EAAGwX,GACpBC,EAAMnZ,EAAGwH,GAAG,CAAC2R,EAAKR,GAClBQ,EAAMnZ,EAAG6H,GAAG,CAACsR,EAAKF,GAClBA,EAAMjZ,EAAG6H,GAAG,CAACsR,EAAKxhB,GAClBuhB,EAAMlZ,EAAG6H,GAAG,CAACsR,EAAKzX,GAClB,IAAI0X,EAAMpZ,EAAG6H,GAAG,CAACqR,EAAKD,GACtBE,EAAMnZ,EAAGwH,GAAG,CAAC4R,EAAKP,GAClB,IAAIQ,EAAOrZ,EAAGyH,GAAG,CAAC0R,EAAKnZ,EAAGgI,GAAG,EAC7BiR,EAAMjZ,EAAG6H,GAAG,CAACqR,EAAKH,GAClBI,EAAMnZ,EAAG6H,GAAG,CAACuR,EAAKJ,GAClBE,EAAMlZ,EAAGkK,IAAI,CAAC+O,EAAKC,EAAKG,GACxBD,EAAMpZ,EAAGkK,IAAI,CAACiP,EAAKC,EAAKC,GAExB,IAAK,IAAIzhB,EAAI+P,EAAI/P,EAAI8E,GAAK9E,IAAK,CAC7B,IAAIuhB,EAAMxc,IAAQ/E,CAAAA,EAAI+E,EAAAA,EAClB2c,EAAOtZ,EAAGwH,GAAG,CAAC4R,EAAKD,GACjBI,EAAKvZ,EAAGyH,GAAG,CAAC6R,EAAMtZ,EAAGgI,GAAG,EAC9BiR,EAAMjZ,EAAG6H,GAAG,CAACqR,EAAKF,GAClBA,EAAMhZ,EAAG6H,GAAG,CAACmR,EAAKA,GAClBM,EAAOtZ,EAAG6H,GAAG,CAACuR,EAAKJ,GACnBE,EAAMlZ,EAAGkK,IAAI,CAAC+O,EAAKC,EAAKK,GACxBH,EAAMpZ,EAAGkK,IAAI,CAACoP,EAAMF,EAAKG,E,CAE3B,MAAO,CAAEtZ,QAASoZ,EAAMzf,MAAOsf,CAAG,CACpC,EACA,GAAIlZ,EAAGkC,KAAK,CAAGnB,KAAQD,GAAK,CAE1B,IAAM6G,EAAK,CAAC3H,EAAGkC,KAAK,CAAGpB,EAAAA,EAAOC,GACxB+W,EAAK9X,EAAGyJ,IAAI,CAACzJ,EAAGuI,GAAG,CAACH,IAC1BoQ,EAAY,CAAC9W,EAAM/J,KACjB,IAAIqhB,EAAMhZ,EAAG0H,GAAG,CAAC/P,GACXshB,EAAMjZ,EAAG6H,GAAG,CAACnG,EAAG/J,GACtBqhB,EAAMhZ,EAAG6H,GAAG,CAACmR,EAAKC,GAClB,IAAIO,EAAKxZ,EAAGwH,GAAG,CAACwR,EAAKrR,GACrB6R,EAAKxZ,EAAG6H,GAAG,CAAC2R,EAAIP,GAChB,IAAM1F,EAAKvT,EAAG6H,GAAG,CAAC2R,EAAI1B,GAChBoB,EAAMlZ,EAAG6H,GAAG,CAAC7H,EAAG0H,GAAG,CAAC8R,GAAK7hB,GACzB0hB,EAAOrZ,EAAGyH,GAAG,CAACyR,EAAKxX,GACrBD,EAAIzB,EAAGkK,IAAI,CAACqJ,EAAIiG,EAAIH,GACxB,MAAO,CAAEpZ,QAASoZ,EAAMzf,MAAO6H,CAAC,CAClC,C,CAIF,OAAO+W,CACT,EAamCxY,EAAIgC,EAAKoG,CAAC,EAC3C,GAAI,CAACpI,EAAG8I,KAAK,CAAE,MAAM,MAAU,gCAG/B,OAAO,QAEDkQ,EAAKC,EAAKC,EAAKE,EAAKD,EAAKM,EAAKpY,EAAGI,EACrCuX,EAAMhZ,EAAG0H,GAAG,CAAChG,GACbsX,EAAMhZ,EAAG6H,GAAG,CAACmR,EAAKhX,EAAKoG,CAAC,EACxB6Q,EAAMjZ,EAAG0H,GAAG,CAACsR,GACbC,EAAMjZ,EAAGiJ,GAAG,CAACgQ,EAAKD,GAClBE,EAAMlZ,EAAGiJ,GAAG,CAACgQ,EAAKjZ,EAAGgI,GAAG,EACxBkR,EAAMlZ,EAAG6H,GAAG,CAACqR,EAAKlX,EAAK1G,CAAC,EACxB8d,EAAMpZ,EAAGkK,IAAI,CAAClI,EAAKoG,CAAC,CAAEpI,EAAGuI,GAAG,CAAC0Q,GAAM,CAACjZ,EAAGyH,GAAG,CAACwR,EAAKjZ,EAAGyI,IAAI,GACvD2Q,EAAMpZ,EAAG6H,GAAG,CAACuR,EAAKpX,EAAK3G,CAAC,EACxB4d,EAAMjZ,EAAG0H,GAAG,CAACwR,GACbO,EAAMzZ,EAAG0H,GAAG,CAAC0R,GACbD,EAAMnZ,EAAG6H,GAAG,CAAC4R,EAAKzX,EAAK3G,CAAC,EACxB4d,EAAMjZ,EAAGiJ,GAAG,CAACgQ,EAAKE,GAClBF,EAAMjZ,EAAG6H,GAAG,CAACoR,EAAKC,GAClBO,EAAMzZ,EAAG6H,GAAG,CAAC4R,EAAKL,GAClBD,EAAMnZ,EAAG6H,GAAG,CAAC4R,EAAKzX,EAAK1G,CAAC,EACxB2d,EAAMjZ,EAAGiJ,GAAG,CAACgQ,EAAKE,GAClB9X,EAAIrB,EAAG6H,GAAG,CAACmR,EAAKE,GAChB,GAAM,CAAEjZ,QAAAA,CAAO,CAAErG,MAAAA,CAAK,CAAE,CAAG4e,EAAUS,EAAKQ,GAC1ChY,EAAIzB,EAAG6H,GAAG,CAACmR,EAAKtX,GAChBD,EAAIzB,EAAG6H,GAAG,CAACpG,EAAG7H,GACdyH,EAAIrB,EAAGkK,IAAI,CAAC7I,EAAG6X,EAAKjZ,GACpBwB,EAAIzB,EAAGkK,IAAI,CAACzI,EAAG7H,EAAOqG,GACtB,IAAMsZ,EAAKvZ,EAAG8I,KAAM,CAACpH,KAAO1B,EAAG8I,KAAM,CAACrH,GAGtC,OAFAA,EAAIzB,EAAGkK,IAAI,CAAClK,EAAGuI,GAAG,CAAC9G,GAAIA,EAAG8X,GAEnB,CAAElY,EADTA,EAAIrB,EAAGmJ,GAAG,CAAC9H,EAAG+X,GACF3X,EAAAA,CAAC,CACf,CACF,EGv7BmCzB,GAAI,CACrC3E,EAAGvB,OAAO,sEACVwB,EAAGxB,OAAO,QACVsO,EAAGpI,GAAGtK,MAAM,CAACoE,OAAO,O,GAET,CAAE4f,YAAAA,EAAW,CAAEC,cAAAA,EAAa,CAAE,CAAG3B,SFxD5C3L,CAA6B,CAC7BuN,CAAyB,CACzBC,CAA0C,EAE1C,GAAI,mBAAOD,EAA2B,MAAM,MAAU,gCACtD,MAAO,CAGLF,YAAYjV,CAAe,CAAEE,CAAsB,EACjD,IAAMjD,EAAI8C,GAAcC,EAAK,EAAG,CAAE,GAAGoV,CAAG,CAAEhV,IAAKgV,EAAIhV,GAAG,CAAE,GAAGF,CAAO,GAC5DmV,EAAKzN,EAAM0B,UAAU,CAAC6L,EAAWlY,CAAC,CAAC,EAAE,GACrC+S,EAAKpI,EAAM0B,UAAU,CAAC6L,EAAWlY,CAAC,CAAC,EAAE,GACrC2F,EAAIyS,EAAG7Q,GAAG,CAACwL,GAAI3H,aAAa,GAElC,OADAzF,EAAEgH,cAAc,GACThH,CACT,EAGAsS,cAAclV,CAAe,CAAEE,CAAsB,EACnD,IAAMjD,EAAI8C,GAAcC,EAAK,EAAG,CAAE,GAAGoV,CAAG,CAAEhV,IAAKgV,EAAIE,SAAS,CAAE,GAAGpV,CAAO,GAClE0C,EAAIgF,EAAM0B,UAAU,CAAC6L,EAAWlY,CAAC,CAAC,EAAE,GAAGoL,aAAa,GAE1D,OADAzF,EAAEgH,cAAc,GACThH,CACT,C,CAEJ,EEgCEiE,GAAUc,eAAe,CACzB,IACE,GAAM,CAAE/K,EAAAA,CAAC,CAAEI,EAAAA,CAAC,CAAE,CAAG6W,GAAOtY,GAAGtK,MAAM,CAACskB,CAAO,CAAC,EAAE,GAC5C,OAAOjC,GAAO1W,EAAGI,EACnB,EACA,CACEoD,IAAK,iCACLkV,UAAW,iCACX/W,EAAGhD,GAAGkC,KAAK,CACXN,EAAG,EACH7C,EAAG,IACH+F,OAAQ,MACRrP,KAAM+G,C","sources":["../node_modules/@noble/hashes/src/_assert.ts","../node_modules/@noble/hashes/src/crypto.ts","../node_modules/@noble/hashes/src/utils.ts","../node_modules/@noble/hashes/src/_sha2.ts","../node_modules/@noble/hashes/src/sha256.ts","../node_modules/@noble/curves/src/abstract/utils.ts","../node_modules/@noble/curves/src/abstract/modular.ts","../node_modules/@noble/curves/src/abstract/curve.ts","../node_modules/@noble/curves/src/abstract/weierstrass.ts","../node_modules/@noble/curves/src/abstract/hash-to-curve.ts","../node_modules/@noble/hashes/src/hmac.ts","../node_modules/@noble/curves/src/secp256k1.ts","../node_modules/@noble/curves/src/_shortw_utils.ts"],"sourcesContent":["export function number(n: number) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);\n}\n\nexport function bool(b: boolean) {\n  if (typeof b !== 'boolean') throw new Error(`Expected boolean, not ${b}`);\n}\n\nexport function bytes(b: Uint8Array | undefined, ...lengths: number[]) {\n  if (!(b instanceof Uint8Array)) throw new TypeError('Expected Uint8Array');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\n\ntype Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\nexport function hash(hash: Hash) {\n  if (typeof hash !== 'function' || typeof hash.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(hash.outputLen);\n  number(hash.blockLen);\n}\n\nexport function exists(instance: any, checkFinished = true) {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nexport function output(out: any, instance: any) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\n\nconst assert = {\n  number,\n  bool,\n  bytes,\n  hash,\n  exists,\n  output,\n};\n\nexport default assert;\n","declare const globalThis: Record<string, any> | undefined;\nexport const crypto =\n  typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use `globalThis.crypto`, but node.js versions earlier than v19 don't\n// declare it in global scope. For node.js, package.json#exports field mapping\n// rewrites import from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated, we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\n// Cast array to different type\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr: TypedArray) =>\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n\n// Cast array to view\nexport const createView = (arr: TypedArray) =>\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\n\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE) throw new Error('Non little-endian hardware is not supported');\n\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef])) // 'deadbeef'\n */\nexport function bytesToHex(uint8a: Uint8Array): string {\n  // pre-caching improves the speed 6x\n  if (!(uint8a instanceof Uint8Array)) throw new Error('Uint8Array expected');\n  let hex = '';\n  for (let i = 0; i < uint8a.length; i++) {\n    hex += hexes[uint8a[i]];\n  }\n  return hex;\n}\n\n/**\n * @example hexToBytes('deadbeef') // Uint8Array.from([0xde, 0xad, 0xbe, 0xef])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') {\n    throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n  }\n  if (hex.length % 2) throw new Error('hexToBytes: received invalid unpadded hex');\n  const array = new Uint8Array(hex.length / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\n\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => {};\n\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\ndeclare const TextDecoder: any;\n\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') {\n    throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n  }\n  return new TextEncoder().encode(str);\n}\n\nexport type Input = Uint8Array | string;\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  if (!(data instanceof Uint8Array))\n    throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n  return data;\n}\n\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  if (!arrays.every((a) => a instanceof Uint8Array)) throw new Error('Uint8Array list expected');\n  if (arrays.length === 1) return arrays[0];\n  const length = arrays.reduce((a, arr) => a + arr.length, 0);\n  const result = new Uint8Array(length);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const arr = arrays[i];\n    result.set(arr, pad);\n    pad += arr.length;\n  }\n  return result;\n}\n\n// For runtime check if class implements interface\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj: any) =>\n  Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\n\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n    throw new TypeError('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\nexport type CHash = ReturnType<typeof wrapConstructor>;\n\nexport function wrapConstructor<T extends Hash<T>>(hashConstructor: () => Hash<T>) {\n  const hashC = (message: Input): Uint8Array => hashConstructor().update(toBytes(message)).digest();\n  const tmp = hashConstructor();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashConstructor();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/**\n * Secure PRNG. Uses `globalThis.crypto` or node.js crypto module.\n */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n","import assert from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n// Polyfill for Safari 14\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n// Base SHA2 class (RFC 6234)\nexport abstract class SHA2<T extends SHA2<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    assert.exists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assert.exists(this);\n    assert.output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n","import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n\n// Choice: a ? b : c\nconst Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\n\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends SHA2<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  A = IV[0] | 0;\n  B = IV[1] | 0;\n  C = IV[2] | 0;\n  D = IV[3] | 0;\n  E = IV[4] | 0;\n  F = IV[5] | 0;\n  G = IV[6] | 0;\n  H = IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean() {\n    SHA256_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n  A = 0xc1059ed8 | 0;\n  B = 0x367cd507 | 0;\n  C = 0x3070dd17 | 0;\n  D = 0xf70e5939 | 0;\n  E = 0xffc00b31 | 0;\n  F = 0x68581511 | 0;\n  G = 0x64f98fa7 | 0;\n  H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = wrapConstructor(() => new SHA256());\nexport const sha224 = wrapConstructor(() => new SHA224());\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst u8a = (a: any): a is Uint8Array => a instanceof Uint8Array;\n\n// We accept hex strings besides Uint8Array for simplicity\nexport type Hex = Uint8Array | string;\n// Very few implementations accept numbers, we do it to ease learning curve\nexport type PrivKey = Hex | bigint;\nexport type CHash = {\n  (message: Uint8Array | string): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create(opts?: { dkLen?: number }): any; // For shake\n};\nexport type FHash = (message: Uint8Array | string) => Uint8Array;\n\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nexport function bytesToHex(bytes: Uint8Array): string {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\nexport function numberToHexUnpadded(num: number | bigint): string {\n  const hex = num.toString(16);\n  return hex.length & 1 ? `0${hex}` : hex;\n}\n\nexport function hexToNumber(hex: string): bigint {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  // Big Endian\n  return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n\n// Caching slows it down 2-3x\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  if (hex.length % 2) throw new Error('hex string is invalid: unpadded ' + hex.length);\n  const array = new Uint8Array(hex.length / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\n\n// Big Endian\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\n  return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes: Uint8Array): bigint {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\n\nexport const numberToBytesBE = (n: bigint, len: number) =>\n  hexToBytes(n.toString(16).padStart(len * 2, '0'));\nexport const numberToBytesLE = (n: bigint, len: number) => numberToBytesBE(n, len).reverse();\n// Returns variable number bytes (minimal bigint encoding?)\nexport const numberToVarBytesBE = (n: bigint) => hexToBytes(numberToHexUnpadded(n));\n\nexport function ensureBytes(title: string, hex: Hex, expectedLength?: number): Uint8Array {\n  let res: Uint8Array;\n  if (typeof hex === 'string') {\n    try {\n      res = hexToBytes(hex);\n    } catch (e) {\n      throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n    }\n  } else if (u8a(hex)) {\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\n    res = Uint8Array.from(hex);\n  } else {\n    throw new Error(`${title} must be hex string or Uint8Array`);\n  }\n  const len = res.length;\n  if (typeof expectedLength === 'number' && len !== expectedLength)\n    throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n  return res;\n}\n\n// Copies several Uint8Arrays into one.\nexport function concatBytes(...arrs: Uint8Array[]): Uint8Array {\n  const r = new Uint8Array(arrs.reduce((sum, a) => sum + a.length, 0));\n  let pad = 0; // walk through each item, ensure they have proper type\n  arrs.forEach((a) => {\n    if (!u8a(a)) throw new Error('Uint8Array expected');\n    r.set(a, pad);\n    pad += a.length;\n  });\n  return r;\n}\n\nexport function equalBytes(b1: Uint8Array, b2: Uint8Array) {\n  // We don't care about timing attacks here\n  if (b1.length !== b2.length) return false;\n  for (let i = 0; i < b1.length; i++) if (b1[i] !== b2[i]) return false;\n  return true;\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') {\n    throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  }\n  return new TextEncoder().encode(str);\n}\n\n// Bit operations\n\n// Amount of bits inside bigint (Same as n.toString(2).length)\nexport function bitLen(n: bigint) {\n  let len;\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\n  return len;\n}\n// Gets single bit at position. NOTE: first bit position is 0 (same as arrays)\n// Same as !!+Array.from(n.toString(2)).reverse()[pos]\nexport const bitGet = (n: bigint, pos: number) => (n >> BigInt(pos)) & _1n;\n// Sets single bit at position\nexport const bitSet = (n: bigint, pos: number, value: boolean) =>\n  n | ((value ? _1n : _0n) << BigInt(pos));\n// Return mask for N bits (Same as BigInt(`0b${Array(i).fill('1').join('')}`))\n// Not using ** operator with bigints for old engines.\nexport const bitMask = (n: number) => (_2n << BigInt(n - 1)) - _1n;\n\n// DRBG\n\nconst u8n = (data?: any) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr: any) => Uint8Array.from(arr); // another shortcut\ntype Pred<T> = (v: Uint8Array) => T | undefined;\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg<T>(\n  hashLen: number,\n  qByteLen: number,\n  hmacFn: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array\n): (seed: Uint8Array, predicate: Pred<T>) => T {\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n  let i = 0; // Iterations counter, will throw when over 1000\n  const reset = () => {\n    v.fill(1);\n    k.fill(0);\n    i = 0;\n  };\n  const h = (...b: Uint8Array[]) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n  const reseed = (seed = u8n()) => {\n    // HMAC-DRBG reseed() function. Steps D-G\n    k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n    v = h(); // v = hmac(k || v)\n    if (seed.length === 0) return;\n    k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n    v = h(); // v = hmac(k || v)\n  };\n  const gen = () => {\n    // HMAC-DRBG generate() function\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\n    let len = 0;\n    const out: Uint8Array[] = [];\n    while (len < qByteLen) {\n      v = h();\n      const sl = v.slice();\n      out.push(sl);\n      len += v.length;\n    }\n    return concatBytes(...out);\n  };\n  const genUntil = (seed: Uint8Array, pred: Pred<T>): T => {\n    reset();\n    reseed(seed); // Steps D-G\n    let res: T | undefined = undefined; // Step H: grind until k is in [1..n-1]\n    while (!(res = pred(gen()))) reseed();\n    reset();\n    return res;\n  };\n  return genUntil;\n}\n\n// Validating curves and fields\n\nconst validatorFns = {\n  bigint: (val: any) => typeof val === 'bigint',\n  function: (val: any) => typeof val === 'function',\n  boolean: (val: any) => typeof val === 'boolean',\n  string: (val: any) => typeof val === 'string',\n  isSafeInteger: (val: any) => Number.isSafeInteger(val),\n  array: (val: any) => Array.isArray(val),\n  field: (val: any, object: any) => (object as any).Fp.isValid(val),\n  hash: (val: any) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n} as const;\ntype Validator = keyof typeof validatorFns;\ntype ValMap<T extends Record<string, any>> = { [K in keyof T]?: Validator };\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\n\nexport function validateObject<T extends Record<string, any>>(\n  object: T,\n  validators: ValMap<T>,\n  optValidators: ValMap<T> = {}\n) {\n  const checkField = (fieldName: keyof T, type: Validator, isOptional: boolean) => {\n    const checkVal = validatorFns[type];\n    if (typeof checkVal !== 'function')\n      throw new Error(`Invalid validator \"${type}\", expected function`);\n\n    const val = object[fieldName as keyof typeof object];\n    if (isOptional && val === undefined) return;\n    if (!checkVal(val, object)) {\n      throw new Error(\n        `Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`\n      );\n    }\n  };\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type!, false);\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type!, true);\n  return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport {\n  bitMask,\n  numberToBytesBE,\n  numberToBytesLE,\n  bytesToNumberBE,\n  bytesToNumberLE,\n  ensureBytes,\n  validateObject,\n} from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n\n// Calculates a modulo b\nexport function mod(a: bigint, b: bigint): bigint {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently exponentiate num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * powMod(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\n  if (modulo <= _0n || power < _0n) throw new Error('Expected power/modulo > 0');\n  if (modulo === _1n) return _0n;\n  let res = _1n;\n  while (power > _0n) {\n    if (power & _1n) res = (res * num) % modulo;\n    num = (num * num) % modulo;\n    power >>= _1n;\n  }\n  return res;\n}\n\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n\n// Inverses number over modulo\nexport function invert(number: bigint, modulo: bigint): bigint {\n  if (number === _0n || modulo <= _0n) {\n    throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n  }\n  // Eucledian GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n, y = _1n, u = _1n, v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\n// Tonelli-Shanks algorithm\n// Paper 1: https://eprint.iacr.org/2012/685.pdf (page 12)\n// Paper 2: Square Roots from 1; 24, 51, 10 to Dan Shanks\nexport function tonelliShanks(P: bigint) {\n  // Legendre constant: used to calculate Legendre symbol (a | p),\n  // which denotes the value of a^((p-1)/2) (mod p).\n  // (a | p) ≡ 1    if a is a square (mod p)\n  // (a | p) ≡ -1   if a is not a square (mod p)\n  // (a | p) ≡ 0    if a ≡ 0 (mod p)\n  const legendreC = (P - _1n) / _2n;\n\n  let Q: bigint, S: number, Z: bigint;\n  // Step 1: By factoring out powers of 2 from p - 1,\n  // find q and s such that p - 1 = q*(2^s) with q odd\n  for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);\n\n  // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n  for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++);\n\n  // Fast-path\n  if (S === 1) {\n    const p1div4 = (P + _1n) / _4n;\n    return function tonelliFast<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Slow-path\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\n    // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');\n    let r = S;\n    // TODO: will fail at Fp2/etc\n    let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n    let x = Fp.pow(n, Q1div2); // first guess at the square root\n    let b = Fp.pow(n, Q); // first guess at the fudge factor\n\n    while (!Fp.eql(b, Fp.ONE)) {\n      if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n      // Find m such b^(2^m)==1\n      let m = 1;\n      for (let t2 = Fp.sqr(b); m < r; m++) {\n        if (Fp.eql(t2, Fp.ONE)) break;\n        t2 = Fp.sqr(t2); // t2 *= t2\n      }\n      // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n      const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n      g = Fp.sqr(ge); // g = ge * ge\n      x = Fp.mul(x, ge); // x *= ge\n      b = Fp.mul(b, g); // b *= g\n      r = m;\n    }\n    return x;\n  };\n}\n\nexport function FpSqrt(P: bigint) {\n  // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n  // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n\n  // P ≡ 3 (mod 4)\n  // √n = n^((P+1)/4)\n  if (P % _4n === _3n) {\n    // Not all roots possible!\n    // const ORDER =\n    //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n    // const NUM = 72057594037927816n;\n    const p1div4 = (P + _1n) / _4n;\n    return function sqrt3mod4<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      // Throw if root**2 != n\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n  if (P % _8n === _5n) {\n    const c1 = (P - _5n) / _8n;\n    return function sqrt5mod8<T>(Fp: IField<T>, n: T) {\n      const n2 = Fp.mul(n, _2n);\n      const v = Fp.pow(n2, c1);\n      const nv = Fp.mul(n, v);\n      const i = Fp.mul(Fp.mul(nv, _2n), v);\n      const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // P ≡ 9 (mod 16)\n  if (P % _16n === _9n) {\n    // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n    // Means we cannot use sqrt for constants at all!\n    //\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    // sqrt = (x) => {\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n    // }\n  }\n\n  // Other cases: Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num: bigint, modulo: bigint) => (mod(num, modulo) & _1n) === _1n;\n\n// Currently completly inconsistent naming:\n// - readable: add, mul, sqr, sqrt, inv, div, pow, eq, sub\n// - unreadable mess: addition, multiply, square, squareRoot, inversion, divide, power, equals, subtract\n\n// Field is not always over prime, Fp2 for example has ORDER(q)=p^m\nexport interface IField<T> {\n  ORDER: bigint;\n  BYTES: number;\n  BITS: number;\n  MASK: bigint;\n  ZERO: T;\n  ONE: T;\n  // 1-arg\n  create: (num: T) => T;\n  isValid: (num: T) => boolean;\n  is0: (num: T) => boolean;\n  neg(num: T): T;\n  inv(num: T): T;\n  sqrt(num: T): T;\n  sqr(num: T): T;\n  // 2-args\n  eql(lhs: T, rhs: T): boolean;\n  add(lhs: T, rhs: T): T;\n  sub(lhs: T, rhs: T): T;\n  mul(lhs: T, rhs: T | bigint): T;\n  pow(lhs: T, power: bigint): T;\n  div(lhs: T, rhs: T | bigint): T;\n  // N for NonNormalized (for now)\n  addN(lhs: T, rhs: T): T;\n  subN(lhs: T, rhs: T): T;\n  mulN(lhs: T, rhs: T | bigint): T;\n  sqrN(num: T): T;\n\n  // Optional\n  // Should be same as sgn0 function in https://datatracker.ietf.org/doc/draft-irtf-cfrg-hash-to-curve/\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\n  // legendre?(num: T): T;\n  pow(lhs: T, power: bigint): T;\n  invertBatch: (lst: T[]) => T[];\n  toBytes(num: T): Uint8Array;\n  fromBytes(bytes: Uint8Array): T;\n  // If c is False, CMOV returns a, otherwise it returns b.\n  cmov(a: T, b: T, c: boolean): T;\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\n  'addN', 'subN', 'mulN', 'sqrN'\n] as const;\nexport function validateField<T>(field: IField<T>) {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'isSafeInteger',\n    BITS: 'isSafeInteger',\n  } as Record<string, string>;\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  return validateObject(field, opts);\n}\n\n// Generic field functions\nexport function FpPow<T>(f: IField<T>, num: T, power: bigint): T {\n  // Should have same speed as pow for bigints\n  // TODO: benchmark!\n  if (power < _0n) throw new Error('Expected power > 0');\n  if (power === _0n) return f.ONE;\n  if (power === _1n) return num;\n  let p = f.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = f.mul(p, d);\n    d = f.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n\n// 0 is non-invertible: non-batched version will throw on 0\nexport function FpInvertBatch<T>(f: IField<T>, nums: T[]): T[] {\n  const tmp = new Array(nums.length);\n  // Walk from first to last, multiply them by each other MOD p\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = acc;\n    return f.mul(acc, num);\n  }, f.ONE);\n  // Invert last element\n  const inverted = f.inv(lastMultiplied);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = f.mul(acc, tmp[i]);\n    return f.mul(acc, num);\n  }, inverted);\n  return tmp;\n}\n\nexport function FpDiv<T>(f: IField<T>, lhs: T, rhs: T | bigint): T {\n  return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare<T>(f: IField<T>) {\n  const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n  return (x: T): boolean => {\n    const p = f.pow(x, legendreConst);\n    return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n  };\n}\n\n// CURVE.n lengths\nexport function nLength(n: bigint, nBitLength?: number) {\n  // Bit size, byte size of CURVE.n\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\n\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\n/**\n * Initializes a galois field over prime. Non-primes are not supported for now.\n * Do not init in loop: slow. Very fragile: always run a benchmark on change.\n * Major performance gains:\n * a) non-normalized operations like mulN instead of mul\n * b) `Object.freeze`\n * c) Same object shape: never add or remove keys\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(\n  ORDER: bigint,\n  bitLen?: number,\n  isLE = false,\n  redef: Partial<IField<bigint>> = {}\n): Readonly<FpField> {\n  if (ORDER <= _0n) throw new Error(`Expected Fp ORDER > 0, got ${ORDER}`);\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n  if (BYTES > 2048) throw new Error('Field lengths over 2048 bytes are not supported');\n  const sqrtP = FpSqrt(ORDER);\n  const f: Readonly<FpField> = Object.freeze({\n    ORDER,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== 'bigint')\n        throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: (num) => num === _0n,\n    isOdd: (num) => (num & _1n) === _1n,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n\n    inv: (num) => invert(num, ORDER),\n    sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // TODO: do we really need constant cmov?\n    // We don't have const-time bigints anyway, so probably will be not very useful\n    cmov: (a, b, c) => (c ? b : a),\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n    fromBytes: (bytes) => {\n      if (bytes.length !== BYTES)\n        throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n    },\n  } as FpField);\n  return Object.freeze(f);\n}\n\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\n/**\n * FIPS 186 B.4.1-compliant \"constant-time\" private key generation utility.\n * Can take (n+8) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being neglible.\n * Needs at least 40 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * @param hash hash output from SHA3 or a similar function\n * @returns valid private scalar\n */\nexport function hashToPrivateScalar(\n  hash: string | Uint8Array,\n  groupOrder: bigint,\n  isLE = false\n): bigint {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n    throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { IField, validateField, nLength } from './modular.js';\nimport { validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n\nexport type AffinePoint<T> = {\n  x: T;\n  y: T;\n} & { z?: never; t?: never };\n\nexport interface Group<T extends Group<T>> {\n  double(): T;\n  negate(): T;\n  add(other: T): T;\n  subtract(other: T): T;\n  equals(other: T): boolean;\n  multiply(scalar: bigint): T;\n}\n\nexport type GroupConstructor<T> = {\n  BASE: T;\n  ZERO: T;\n};\nexport type Mapper<T> = (i: T[]) => T[];\n\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF<T extends Group<T>>(c: GroupConstructor<T>, bits: number) {\n  const constTimeNegate = (condition: boolean, item: T): T => {\n    const neg = item.negate();\n    return condition ? neg : item;\n  };\n  const opts = (W: number) => {\n    const windows = Math.ceil(bits / W) + 1; // +1, because\n    const windowSize = 2 ** (W - 1); // -1 because we skip zero\n    return { windows, windowSize };\n  };\n  return {\n    constTimeNegate,\n    // non-const time multiplication ladder\n    unsafeLadder(elm: T, n: bigint) {\n      let p = c.ZERO;\n      let d: T = elm;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    },\n\n    /**\n     * Creates a wNAF precomputation window. Used for caching.\n     * Default window size is set by `utils.precompute()` and is equal to 8.\n     * Number of precomputed points depends on the curve size:\n     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n     * - 𝑊 is the window size\n     * - 𝑛 is the bitlength of the curve order.\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n     * @returns precomputed point tables flattened to a single array\n     */\n    precomputeWindow(elm: T, W: number): Group<T>[] {\n      const { windows, windowSize } = opts(W);\n      const points: T[] = [];\n      let p: T = elm;\n      let base = p;\n      for (let window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n        // =1, because we skip zero\n        for (let i = 1; i < windowSize; i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n        p = base.double();\n      }\n      return points;\n    },\n\n    /**\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @returns real and fake (for const-time) points\n     */\n    wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T } {\n      // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n      // But need to carefully remove other checks before wNAF. ORDER == bits here\n      const { windows, windowSize } = opts(W);\n\n      let p = c.ZERO;\n      let f = c.BASE;\n\n      const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n      const maxNumber = 2 ** W;\n      const shiftBy = BigInt(W);\n\n      for (let window = 0; window < windows; window++) {\n        const offset = window * windowSize;\n        // Extract W bits.\n        let wbits = Number(n & mask);\n\n        // Shift number by W bits.\n        n >>= shiftBy;\n\n        // If the bits are bigger than max size, we'll split those.\n        // +224 => 256 - 32\n        if (wbits > windowSize) {\n          wbits -= maxNumber;\n          n += _1n;\n        }\n\n        // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n        // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n        // there is negate now: it is possible that negated element from low value\n        // would be the same as high element, which will create carry into next window.\n        // It's not obvious how this can fail, but still worth investigating later.\n\n        // Check if we're onto Zero point.\n        // Add random point inside current window to f.\n        const offset1 = offset;\n        const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n        const cond1 = window % 2 !== 0;\n        const cond2 = wbits < 0;\n        if (wbits === 0) {\n          // The most important part for const-time getPublicKey\n          f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n        } else {\n          p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n        }\n      }\n      // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n      // Even if the variable is still unused, there are some checks which will\n      // throw an exception, so compiler needs to prove they won't happen, which is hard.\n      // At this point there is a way to F be infinity-point even if p is not,\n      // which makes it less const-time: around 1 bigint multiply.\n      return { p, f };\n    },\n\n    wNAFCached(P: T, precomputesMap: Map<T, T[]>, n: bigint, transform: Mapper<T>): { p: T; f: T } {\n      // @ts-ignore\n      const W: number = P._WINDOW_SIZE || 1;\n      // Calculate precomputes on a first run, reuse them after\n      let comp = precomputesMap.get(P);\n      if (!comp) {\n        comp = this.precomputeWindow(P, W) as T[];\n        if (W !== 1) {\n          precomputesMap.set(P, transform(comp));\n        }\n      }\n      return this.wNAF(W, comp, n);\n    },\n  };\n}\n\n// Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\n// Though generator can be different (Fp2 / Fp6 for BLS).\nexport type BasicCurve<T> = {\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\n  n: bigint; // Curve order, total count of valid points in the field\n  nBitLength?: number; // bit length of curve order\n  nByteLength?: number; // byte length of curve order\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\n  hEff?: bigint; // Number to multiply to clear cofactor\n  Gx: T; // base point X coordinate\n  Gy: T; // base point Y coordinate\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\n};\n\nexport function validateBasic<FP, T>(curve: BasicCurve<FP> & T) {\n  validateField(curve.Fp);\n  validateObject(\n    curve,\n    {\n      n: 'bigint',\n      h: 'bigint',\n      Gx: 'field',\n      Gy: 'field',\n    },\n    {\n      nBitLength: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n    }\n  );\n  // Set defaults\n  return Object.freeze({\n    ...nLength(curve.n, curve.nBitLength),\n    ...curve,\n    ...{ p: curve.Fp.ORDER },\n  } as const);\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { CHash, Hex, PrivKey, ensureBytes } from './utils.js';\nimport { Group, GroupConstructor, wNAF, BasicCurve, validateBasic, AffinePoint } from './curve.js';\n\nexport type { AffinePoint };\ntype HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\ntype EndomorphismOpts = {\n  beta: bigint;\n  splitScalar: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n};\nexport type BasicWCurve<T> = BasicCurve<T> & {\n  // Params: a, b\n  a: T;\n  b: T;\n\n  // Optional params\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  endo?: EndomorphismOpts; // Endomorphism options for Koblitz curves\n  // When a cofactor != 1, there can be an effective methods to:\n  // 1. Determine whether a point is torsion-free\n  isTorsionFree?: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\n  // 2. Clear torsion component\n  clearCofactor?: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\n};\n\ntype Entropy = Hex | true;\nexport type SignOpts = { lowS?: boolean; extraEntropy?: Entropy; prehash?: boolean };\nexport type VerOpts = { lowS?: boolean; prehash?: boolean };\n\n/**\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance of nominative types in TypeScript and interfaces only check for shape, so it's hard to create unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * TODO: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n */\n\n// Instance for 3d XYZ points\nexport interface ProjPointType<T> extends Group<ProjPointType<T>> {\n  readonly px: T;\n  readonly py: T;\n  readonly pz: T;\n  get x(): T;\n  get y(): T;\n  multiply(scalar: bigint): ProjPointType<T>;\n  toAffine(iz?: T): AffinePoint<T>;\n  isTorsionFree(): boolean;\n  clearCofactor(): ProjPointType<T>;\n  assertValidity(): void;\n  hasEvenY(): boolean;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n\n  multiplyUnsafe(scalar: bigint): ProjPointType<T>;\n  multiplyAndAddUnsafe(Q: ProjPointType<T>, a: bigint, b: bigint): ProjPointType<T> | undefined;\n  _setWindowSize(windowSize: number): void;\n}\n// Static methods for 3d XYZ points\nexport interface ProjConstructor<T> extends GroupConstructor<ProjPointType<T>> {\n  new (x: T, y: T, z: T): ProjPointType<T>;\n  fromAffine(p: AffinePoint<T>): ProjPointType<T>;\n  fromHex(hex: Hex): ProjPointType<T>;\n  fromPrivateKey(privateKey: PrivKey): ProjPointType<T>;\n  normalizeZ(points: ProjPointType<T>[]): ProjPointType<T>[];\n}\n\nexport type CurvePointsType<T> = BasicWCurve<T> & {\n  // Bytes\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes?: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\n};\n\nfunction validatePointOpts<T>(curve: CurvePointsType<T>) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      a: 'field',\n      b: 'field',\n    },\n    {\n      allowedPrivateKeyLengths: 'array',\n      wrapPrivateKey: 'boolean',\n      isTorsionFree: 'function',\n      clearCofactor: 'function',\n      allowInfinityPoint: 'boolean',\n      fromBytes: 'function',\n      toBytes: 'function',\n    }\n  );\n  const { endo, Fp, a } = opts;\n  if (endo) {\n    if (!Fp.eql(a, Fp.ZERO)) {\n      throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n    }\n    if (\n      typeof endo !== 'object' ||\n      typeof endo.beta !== 'bigint' ||\n      typeof endo.splitScalar !== 'function'\n    ) {\n      throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n    }\n  }\n  return Object.freeze({ ...opts } as const);\n}\n\nexport type CurvePointsRes<T> = {\n  ProjectivePoint: ProjConstructor<T>;\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\n  weierstrassEquation: (x: T) => T;\n  isWithinCurveOrder: (num: bigint) => boolean;\n};\n\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexport const DER = {\n  // asn.1 DER encoding utils\n  Err: class DERErr extends Error {\n    constructor(m = '') {\n      super(m);\n    }\n  },\n  _parseInt(data: Uint8Array): { d: bigint; l: Uint8Array } {\n    const { Err: E } = DER;\n    if (data.length < 2 || data[0] !== 0x02) throw new E('Invalid signature integer tag');\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) throw new E('Invalid signature integer: wrong length');\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    if (res[0] & 0b10000000) throw new E('Invalid signature integer: negative');\n    if (res[0] === 0x00 && !(res[1] & 0b10000000))\n      throw new E('Invalid signature integer: unnecessary leading zero');\n    return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n  },\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\n    // parse DER signature\n    const { Err: E } = DER;\n    const data = typeof hex === 'string' ? h2b(hex) : hex;\n    if (!(data instanceof Uint8Array)) throw new Error('ui8a expected');\n    let l = data.length;\n    if (l < 2 || data[0] != 0x30) throw new E('Invalid signature tag');\n    if (data[1] !== l - 2) throw new E('Invalid signature: incorrect length');\n    const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n    const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n    if (rBytesLeft.length) throw new E('Invalid signature: left bytes after parsing');\n    return { r, s };\n  },\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\n    // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n    const slice = (s: string): string => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n    const h = (num: number | bigint) => {\n      const hex = num.toString(16);\n      return hex.length & 1 ? `0${hex}` : hex;\n    };\n    const s = slice(h(sig.s));\n    const r = slice(h(sig.r));\n    const shl = s.length / 2;\n    const rhl = r.length / 2;\n    const sl = h(shl);\n    const rl = h(rhl);\n    return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n  },\n};\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\nexport function weierstrassPoints<T>(opts: CurvePointsType<T>) {\n  const CURVE = validatePointOpts(opts);\n  const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n\n  const toBytes =\n    CURVE.toBytes ||\n    ((c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => {\n      const a = point.toAffine();\n      return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n    });\n  const fromBytes =\n    CURVE.fromBytes ||\n    ((bytes: Uint8Array) => {\n      // const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n      const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n      const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n      return { x, y };\n    });\n\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula\n   * @returns y²\n   */\n  function weierstrassEquation(x: T): T {\n    const { a, b } = CURVE;\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x2 * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n  }\n  // Validate whether the passed curve params are valid.\n  // We check if curve equation works for generator point.\n  // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n  // ProjectivePoint class has not been initialized yet.\n  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n    throw new Error('bad generator point: equation left != right');\n\n  // Valid group elements reside in range 1..n-1\n  function isWithinCurveOrder(num: bigint): boolean {\n    return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n  }\n  function assertGE(num: bigint) {\n    if (!isWithinCurveOrder(num)) throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n  }\n  // Validates if priv key is valid and converts it to bigint.\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n  function normPrivateKeyToScalar(key: PrivKey): bigint {\n    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n    if (lengths && typeof key !== 'bigint') {\n      if (key instanceof Uint8Array) key = ut.bytesToHex(key);\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n      if (typeof key !== 'string' || !lengths.includes(key.length)) throw new Error('Invalid key');\n      key = key.padStart(nByteLength * 2, '0');\n    }\n    let num: bigint;\n    try {\n      num =\n        typeof key === 'bigint'\n          ? key\n          : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n    } catch (error) {\n      throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n    }\n    if (wrapPrivateKey) num = mod.mod(num, n); // disabled by default, enabled for BLS\n    assertGE(num); // num in range [1..N-1]\n    return num;\n  }\n\n  const pointPrecomputes = new Map<Point, Point[]>();\n  function assertPrjPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n   * Default Point works in 2d / affine coordinates: (x, y)\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point implements ProjPointType<T> {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n\n    constructor(readonly px: T, readonly py: T, readonly pz: T) {\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\n      if (py == null || !Fp.isValid(py)) throw new Error('y required');\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\n    }\n\n    // Does not validate if the point is on-curve.\n    // Use fromHex instead, or call assertValidity() later.\n    static fromAffine(p: AffinePoint<T>): Point {\n      const { x, y } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      const is0 = (i: T) => Fp.eql(i, Fp.ZERO);\n      // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n      if (is0(x) && is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n\n    get x(): T {\n      return this.toAffine().x;\n    }\n    get y(): T {\n      return this.toAffine().y;\n    }\n\n    /**\n     * Takes a bunch of Projective Points but executes only one\n     * inversion on all of them. Inversion is very slow operation,\n     * so this improves performance massively.\n     * Optimization: converts a list of projective points to a list of identical points with Z=1.\n     */\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.pz));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    /**\n     * Converts hash string or Uint8Array to Point.\n     * @param hex short/long ECDSA hex\n     */\n    static fromHex(hex: Hex): Point {\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n\n    // Multiplies generator point by privateKey.\n    static fromPrivateKey(privateKey: PrivKey) {\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n    }\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n    _WINDOW_SIZE?: number;\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n\n    // A point on curve is valid if it conforms to equation.\n    assertValidity(): void {\n      // Zero is valid point too!\n      if (this.is0()) {\n        if (CURVE.allowInfinityPoint) return;\n        throw new Error('bad point: ZERO');\n      }\n      // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n      const { x, y } = this.toAffine();\n      // Check if x, y are valid field elements\n      if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\n      const left = Fp.sqr(y); // y²\n      const right = weierstrassEquation(x); // x³ + ax + b\n      if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');\n      if (!this.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    }\n    hasEvenY(): boolean {\n      const { y } = this.toAffine();\n      if (Fp.isOdd) return !Fp.isOdd(y);\n      throw new Error(\"Field doesn't support isOdd\");\n    }\n\n    /**\n     * Compare one point to another.\n     */\n    equals(other: Point): boolean {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n\n    /**\n     * Flips point to one corresponding to (x, -y) in Affine coordinates.\n     */\n    negate(): Point {\n      return new Point(this.px, Fp.neg(this.py), this.pz);\n    }\n\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a, b } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other: Point): Point {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n\n    subtract(other: Point) {\n      return this.add(other.negate());\n    }\n\n    private is0() {\n      return this.equals(Point.ZERO);\n    }\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, pointPrecomputes, n, (comp: Point[]) => {\n        const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n        return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n      });\n    }\n\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(n: bigint): Point {\n      const I = Point.ZERO;\n      if (n === _0n) return I;\n      assertGE(n); // Will throw on 0\n      if (n === _1n) return this;\n      const { endo } = CURVE;\n      if (!endo) return wnaf.unsafeLadder(this, n);\n\n      // Apply endomorphism\n      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n      let k1p = I;\n      let k2p = I;\n      let d: Point = this;\n      while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n) k1p = k1p.add(d);\n        if (k2 & _1n) k2p = k2p.add(d);\n        d = d.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n      }\n      if (k1neg) k1p = k1p.negate();\n      if (k2neg) k2p = k2p.negate();\n      k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n      return k1p.add(k2p);\n    }\n\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar: bigint): Point {\n      assertGE(scalar);\n      let n = scalar;\n      let point: Point, fake: Point; // Fake point is used to const-time mult\n      const { endo } = CURVE;\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n        let { p: k1p, f: f1p } = this.wNAF(k1);\n        let { p: k2p, f: f2p } = this.wNAF(k2);\n        k1p = wnaf.constTimeNegate(k1neg, k1p);\n        k2p = wnaf.constTimeNegate(k2neg, k2p);\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n        point = k1p.add(k2p);\n        fake = f1p.add(f2p);\n      } else {\n        const { p, f } = this.wNAF(n);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return Point.normalizeZ([point, fake])[0];\n    }\n\n    /**\n     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n     * Not using Strauss-Shamir trick: precomputation tables are faster.\n     * The trick could be useful if both P and Q are not G (not in our case).\n     * @returns non-zero affine point\n     */\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\n      const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n      const mul = (\n        P: Point,\n        a: bigint // Select faster multiply() method\n      ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n      const sum = mul(this, a).add(mul(Q, b));\n      return sum.is0() ? undefined : sum;\n    }\n\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    toAffine(iz?: T): AffinePoint<T> {\n      const { px: x, py: y, pz: z } = this;\n      const is0 = this.is0();\n      // If invZ was 0, we return zero point. However we still want to execute\n      // all operations, so we replace invZ with a random number, 1.\n      if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n      const ax = Fp.mul(x, iz);\n      const ay = Fp.mul(y, iz);\n      const zz = Fp.mul(z, iz);\n      if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\n      if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n      return { x: ax, y: ay };\n    }\n    isTorsionFree(): boolean {\n      const { h: cofactor, isTorsionFree } = CURVE;\n      if (cofactor === _1n) return true; // No subgroups, always torsion-free\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n    }\n    clearCofactor(): Point {\n      const { h: cofactor, clearCofactor } = CURVE;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\n      return this.multiplyUnsafe(CURVE.h);\n    }\n\n    toRawBytes(isCompressed = true): Uint8Array {\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n\n    toHex(isCompressed = true): string {\n      return ut.bytesToHex(this.toRawBytes(isCompressed));\n    }\n  }\n  const _bits = CURVE.nBitLength;\n  const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n  // Validate if generator point is on curve\n  return {\n    CURVE,\n    ProjectivePoint: Point as ProjConstructor<T>,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  };\n}\n\n// Instance\nexport interface SignatureType {\n  readonly r: bigint;\n  readonly s: bigint;\n  readonly recovery?: number;\n  assertValidity(): void;\n  addRecoveryBit(recovery: number): SignatureType;\n  hasHighS(): boolean;\n  normalizeS(): SignatureType;\n  recoverPublicKey(msgHash: Hex): ProjPointType<bigint>;\n  toCompactRawBytes(): Uint8Array;\n  toCompactHex(): string;\n  // DER-encoded\n  toDERRawBytes(isCompressed?: boolean): Uint8Array;\n  toDERHex(isCompressed?: boolean): string;\n}\n// Static methods\nexport type SignatureConstructor = {\n  new (r: bigint, s: bigint): SignatureType;\n  fromCompact(hex: Hex): SignatureType;\n  fromDER(hex: Hex): SignatureType;\n};\ntype SignatureLike = { r: bigint; s: bigint };\n\nexport type PubKey = Hex | ProjPointType<bigint>;\n\nexport type CurveType = BasicWCurve<bigint> & {\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\n  hmac: HmacFnSync;\n  randomBytes: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\n\nfunction validateOpts(curve: CurveType) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      hash: 'hash',\n      hmac: 'function',\n      randomBytes: 'function',\n    },\n    {\n      bits2int: 'function',\n      bits2int_modN: 'function',\n      lowS: 'boolean',\n    }\n  );\n  return Object.freeze({ lowS: true, ...opts } as const);\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => SignatureType;\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\n  ProjectivePoint: ProjConstructor<bigint>;\n  Signature: SignatureConstructor;\n  utils: {\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    isValidPrivateKey(privateKey: PrivKey): boolean;\n    randomPrivateKey: () => Uint8Array;\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\n  };\n};\n\nexport function weierstrass(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const { Fp, n: CURVE_ORDER } = CURVE;\n  const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n  const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n\n  function isValidFieldElement(num: bigint): boolean {\n    return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n  }\n  function modN(a: bigint) {\n    return mod.mod(a, CURVE_ORDER);\n  }\n  function invN(a: bigint) {\n    return mod.invert(a, CURVE_ORDER);\n  }\n\n  const {\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  } = weierstrassPoints({\n    ...CURVE,\n    toBytes(c, point, isCompressed: boolean): Uint8Array {\n      const a = point.toAffine();\n      const x = Fp.toBytes(a.x);\n      const cat = ut.concatBytes;\n      if (isCompressed) {\n        return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n      } else {\n        return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n      }\n    },\n    fromBytes(bytes: Uint8Array) {\n      const len = bytes.length;\n      const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // this.assertValidity() is done inside of fromHex\n      if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n        const x = ut.bytesToNumberBE(tail);\n        if (!isValidFieldElement(x)) throw new Error('Point is not on curve');\n        const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n        let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n        const isYOdd = (y & _1n) === _1n;\n        // ECDSA\n        const isHeadOdd = (head & 1) === 1;\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n        return { x, y };\n      } else if (len === uncompressedLen && head === 0x04) {\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n        return { x, y };\n      } else {\n        throw new Error(\n          `Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`\n        );\n      }\n    },\n  });\n  const numToNByteStr = (num: bigint): string =>\n    ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n\n  function isBiggerThanHalfOrder(number: bigint) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n\n  function normalizeS(s: bigint) {\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n  }\n  // slice bytes num\n  const slcNum = (b: Uint8Array, from: number, to: number) => ut.bytesToNumberBE(b.slice(from, to));\n\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature implements SignatureType {\n    constructor(readonly r: bigint, readonly s: bigint, readonly recovery?: number) {\n      this.assertValidity();\n    }\n\n    // pair (bytes of r, bytes of s)\n    static fromCompact(hex: Hex) {\n      const l = CURVE.nByteLength;\n      hex = ensureBytes('compactSignature', hex, l * 2);\n      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n    }\n\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(hex: Hex) {\n      const { r, s } = DER.toSig(ensureBytes('DER', hex));\n      return new Signature(r, s);\n    }\n\n    assertValidity(): void {\n      // can use assertGE here\n      if (!isWithinCurveOrder(this.r)) throw new Error('r must be 0 < r < CURVE.n');\n      if (!isWithinCurveOrder(this.s)) throw new Error('s must be 0 < s < CURVE.n');\n    }\n\n    addRecoveryBit(recovery: number) {\n      return new Signature(this.r, this.s, recovery);\n    }\n\n    recoverPublicKey(msgHash: Hex): typeof Point.BASE {\n      const { r, s, recovery: rec } = this;\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n      if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\n      const prefix = (rec & 1) === 0 ? '02' : '03';\n      const R = Point.fromHex(prefix + numToNByteStr(radj));\n      const ir = invN(radj); // r^-1\n      const u1 = modN(-h * ir); // -hr^-1\n      const u2 = modN(s * ir); // sr^-1\n      const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n      if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n      Q.assertValidity();\n      return Q;\n    }\n\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS(): boolean {\n      return isBiggerThanHalfOrder(this.s);\n    }\n\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n    }\n\n    // DER-encoded\n    toDERRawBytes() {\n      return ut.hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n      return DER.hexFromSig({ r: this.r, s: this.s });\n    }\n\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return ut.hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n      return numToNByteStr(this.r) + numToNByteStr(this.s);\n    }\n  }\n\n  const utils = {\n    isValidPrivateKey(privateKey: PrivKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n\n    /**\n     * Produces cryptographically secure private key from random of size (nBitLength+64)\n     * as per FIPS 186 B.4.1 with modulo bias being neglible.\n     */\n    randomPrivateKey: (): Uint8Array => {\n      const rand = CURVE.randomBytes(Fp.BYTES + 8);\n      const num = mod.hashToPrivateScalar(rand, CURVE_ORDER);\n      return ut.numberToBytesBE(num, CURVE.nByteLength);\n    },\n\n    /**\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n     * Allows to massively speed-up `point.multiply(scalar)`.\n     * @returns cached point\n     * @example\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n     * fast.multiply(privKey); // much faster ECDH now\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n      return point;\n    },\n  };\n\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey: PrivKey, isCompressed = true): Uint8Array {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n  }\n\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item: PrivKey | PubKey): boolean {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && (item as Hex).length;\n    if (arr) return len === compressedLen || len === uncompressedLen;\n    if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\n    if (item instanceof Point) return true;\n    return false;\n  }\n\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA: PrivKey, publicB: Hex, isCompressed = true): Uint8Array {\n    if (isProbPub(privateA)) throw new Error('first arg must be private key');\n    if (!isProbPub(publicB)) throw new Error('second arg must be public key');\n    const b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n  }\n\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int =\n    CURVE.bits2int ||\n    function (bytes: Uint8Array): bigint {\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n  const bits2int_modN =\n    CURVE.bits2int_modN ||\n    function (bytes: Uint8Array): bigint {\n      return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num: bigint): Uint8Array {\n    if (typeof num !== 'bigint') throw new Error('bigint expected');\n    if (!(_0n <= num && num < ORDER_MASK))\n      throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n    // works with order, can have different size than numToField!\n    return ut.numberToBytesBE(num, CURVE.nByteLength);\n  }\n\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n  // Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash: Hex, privateKey: PrivKey, opts = defaultSigOpts) {\n    if (['recovered', 'canonical'].some((k) => k in opts))\n      throw new Error('sign() legacy options not supported');\n    const { hash, randomBytes } = CURVE;\n    let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e, Fp.BYTES)); // check for being of size BYTES\n    }\n    const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    function k2sig(kBytes: Uint8Array): Signature | undefined {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n      const ik = invN(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      const r = modN(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n      const s = modN(ik * modN(m + r * d)); // Not using blinding here\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery); // use normS, not s\n    }\n    return { seed, k2sig };\n  }\n  const defaultSigOpts: SignOpts = { lowS: CURVE.lowS, prehash: false };\n  const defaultVerOpts: VerOpts = { lowS: CURVE.lowS, prehash: false };\n\n  /**\n   * Signs message hash (not message: you need to hash it by yourself).\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param opts `lowS, extraEntropy, prehash`\n   */\n  function sign(msgHash: Hex, privKey: PrivKey, opts = defaultSigOpts): Signature {\n    const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n    const drbg = ut.createHmacDrbg<Signature>(CURVE.hash.outputLen, CURVE.nByteLength, CURVE.hmac);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE._setWindowSize(8);\n  // utils.precompute(8, ProjectivePoint.BASE)\n\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(\n    signature: Hex | SignatureLike,\n    msgHash: Hex,\n    publicKey: Hex,\n    opts = defaultVerOpts\n  ): boolean {\n    const sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    const { lowS, prehash } = opts;\n\n    let _sig: Signature | undefined = undefined;\n    let P: ProjPointType<bigint>;\n    try {\n      if (typeof sg === 'string' || sg instanceof Uint8Array) {\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\n        try {\n          _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n          _sig = Signature.fromCompact(sg);\n        }\n      } else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n        const { r, s } = sg;\n        _sig = new Signature(r, s);\n      } else {\n        throw new Error('PARSE');\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      if ((error as Error).message === 'PARSE')\n        throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n      return false;\n    }\n    if (lowS && _sig.hasHighS()) return false;\n    if (prehash) msgHash = CURVE.hash(msgHash);\n    const { r, s } = _sig;\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    const is = invN(s); // s^-1\n    const u1 = modN(h * is); // u1 = hs^-1 mod n\n    const u2 = modN(r * is); // u2 = rs^-1 mod n\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n    if (!R) return false;\n    const v = modN(R.x);\n    return v === r;\n  }\n  return {\n    CURVE,\n    getPublicKey,\n    getSharedSecret,\n    sign,\n    verify,\n    ProjectivePoint: Point,\n    Signature,\n    utils,\n  };\n}\n\n// Implementation of the Shallue and van de Woestijne method for any Weierstrass curve\n// TODO: check if there is a way to merge this with uvRatio in Edwards && move to modular?\n// b = True and y = sqrt(u / v) if (u / v) is square in F, and\n// b = False and y = sqrt(Z * (u / v)) otherwise.\nexport function SWUFpSqrtRatio<T>(Fp: mod.IField<T>, Z: T) {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  const c2 = (q - _1n) / _2n ** c1; // 2. c2 = (q - 1) / (2^c1)        # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n ** c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n ** (c1 - _1n); // 5. c5 = 2^(c1 - 1)              # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = _2n ** (i - _2n); // 18.    tv5 = i - 2;    19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return { isValid: isQR, value: tv3 };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u: T, v: T) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n// From draft-irtf-cfrg-hash-to-curve-16\nexport function mapToCurveSimpleSWU<T>(\n  Fp: mod.IField<T>,\n  opts: {\n    A: T;\n    B: T;\n    Z: T;\n  }\n) {\n  mod.validateField(Fp);\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return (u: T): { x: T; y: T } => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    x = Fp.div(x, tv4); // 25.   x = x / tv4\n    return { x, y };\n  };\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport type { Group, GroupConstructor, AffinePoint } from './curve.js';\nimport { mod, IField } from './modular.js';\nimport { bytesToNumberBE, CHash, concatBytes, utf8ToBytes, validateObject } from './utils.js';\n\n/**\n * * `DST` is a domain separation tag, defined in section 2.2.5\n * * `p` characteristic of F, where F is a finite field of characteristic p and order q = p^m\n * * `m` is extension degree (1 for prime fields)\n * * `k` is the target security target in bits (e.g. 128), from section 5.1\n * * `expand` is `xmd` (SHA2, SHA3, BLAKE) or `xof` (SHAKE, BLAKE-XOF)\n * * `hash` conforming to `utils.CHash` interface, with `outputLen` / `blockLen` props\n */\ntype UnicodeOrBytes = string | Uint8Array;\nexport type Opts = {\n  DST: UnicodeOrBytes;\n  p: bigint;\n  m: number;\n  k: number;\n  expand: 'xmd' | 'xof';\n  hash: CHash;\n};\n\nfunction validateDST(dst: UnicodeOrBytes): Uint8Array {\n  if (dst instanceof Uint8Array) return dst;\n  if (typeof dst === 'string') return utf8ToBytes(dst);\n  throw new Error('DST must be Uint8Array or string');\n}\n\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = bytesToNumberBE;\n\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value: number, length: number): Uint8Array {\n  if (value < 0 || value >= 1 << (8 * length)) {\n    throw new Error(`bad I2OSP call: value=${value} length=${length}`);\n  }\n  const res = Array.from({ length }).fill(0) as number[];\n  for (let i = length - 1; i >= 0; i--) {\n    res[i] = value & 0xff;\n    value >>>= 8;\n  }\n  return new Uint8Array(res);\n}\n\nfunction strxor(a: Uint8Array, b: Uint8Array): Uint8Array {\n  const arr = new Uint8Array(a.length);\n  for (let i = 0; i < a.length; i++) {\n    arr[i] = a[i] ^ b[i];\n  }\n  return arr;\n}\n\nfunction isBytes(item: unknown): void {\n  if (!(item instanceof Uint8Array)) throw new Error('Uint8Array expected');\n}\nfunction isNum(item: unknown): void {\n  if (!Number.isSafeInteger(item)) throw new Error('number expected');\n}\n\n// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits\n// https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-11#section-5.4.1\nexport function expand_message_xmd(\n  msg: Uint8Array,\n  DST: Uint8Array,\n  lenInBytes: number,\n  H: CHash\n): Uint8Array {\n  isBytes(msg);\n  isBytes(DST);\n  isNum(lenInBytes);\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-5.3.3\n  if (DST.length > 255) DST = H(concatBytes(utf8ToBytes('H2C-OVERSIZE-DST-'), DST));\n  const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n  const ell = Math.ceil(lenInBytes / b_in_bytes);\n  if (ell > 255) throw new Error('Invalid xmd length');\n  const DST_prime = concatBytes(DST, i2osp(DST.length, 1));\n  const Z_pad = i2osp(0, r_in_bytes);\n  const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n  const b = new Array<Uint8Array>(ell);\n  const b_0 = H(concatBytes(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n  b[0] = H(concatBytes(b_0, i2osp(1, 1), DST_prime));\n  for (let i = 1; i <= ell; i++) {\n    const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n    b[i] = H(concatBytes(...args));\n  }\n  const pseudo_random_bytes = concatBytes(...b);\n  return pseudo_random_bytes.slice(0, lenInBytes);\n}\n\nexport function expand_message_xof(\n  msg: Uint8Array,\n  DST: Uint8Array,\n  lenInBytes: number,\n  k: number,\n  H: CHash\n): Uint8Array {\n  isBytes(msg);\n  isBytes(DST);\n  isNum(lenInBytes);\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-5.3.3\n  // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n  if (DST.length > 255) {\n    const dkLen = Math.ceil((2 * k) / 8);\n    DST = H.create({ dkLen }).update(utf8ToBytes('H2C-OVERSIZE-DST-')).update(DST).digest();\n  }\n  if (lenInBytes > 65535 || DST.length > 255)\n    throw new Error('expand_message_xof: invalid lenInBytes');\n  return (\n    H.create({ dkLen: lenInBytes })\n      .update(msg)\n      .update(i2osp(lenInBytes, 2))\n      // 2. DST_prime = DST || I2OSP(len(DST), 1)\n      .update(DST)\n      .update(i2osp(DST.length, 1))\n      .digest()\n  );\n}\n\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-11#section-5.3\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nexport function hash_to_field(msg: Uint8Array, count: number, options: Opts): bigint[][] {\n  validateObject(options, {\n    DST: 'string',\n    p: 'bigint',\n    m: 'isSafeInteger',\n    k: 'isSafeInteger',\n    hash: 'hash',\n  });\n  const { p, k, m, hash, expand, DST: _DST } = options;\n  isBytes(msg);\n  isNum(count);\n  const DST = validateDST(_DST);\n  const log2p = p.toString(2).length;\n  const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n  const len_in_bytes = count * m * L;\n  let prb; // pseudo_random_bytes\n  if (expand === 'xmd') {\n    prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n  } else if (expand === 'xof') {\n    prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n  } else if (expand === '_internal_pass') {\n    // for internal tests only\n    prb = msg;\n  } else {\n    throw new Error('expand must be \"xmd\" or \"xof\"');\n  }\n  const u = new Array(count);\n  for (let i = 0; i < count; i++) {\n    const e = new Array(m);\n    for (let j = 0; j < m; j++) {\n      const elm_offset = L * (j + i * m);\n      const tv = prb.subarray(elm_offset, elm_offset + L);\n      e[j] = mod(os2ip(tv), p);\n    }\n    u[i] = e;\n  }\n  return u;\n}\n\nexport function isogenyMap<T, F extends IField<T>>(field: F, map: [T[], T[], T[], T[]]) {\n  // Make same order as in spec\n  const COEFF = map.map((i) => Array.from(i).reverse());\n  return (x: T, y: T) => {\n    const [xNum, xDen, yNum, yDen] = COEFF.map((val) =>\n      val.reduce((acc, i) => field.add(field.mul(acc, x), i))\n    );\n    x = field.div(xNum, xDen); // xNum / xDen\n    y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n    return { x, y };\n  };\n}\n\nexport interface H2CPoint<T> extends Group<H2CPoint<T>> {\n  add(rhs: H2CPoint<T>): H2CPoint<T>;\n  toAffine(iz?: bigint): AffinePoint<T>;\n  clearCofactor(): H2CPoint<T>;\n  assertValidity(): void;\n}\n\nexport interface H2CPointConstructor<T> extends GroupConstructor<H2CPoint<T>> {\n  fromAffine(ap: AffinePoint<T>): H2CPoint<T>;\n}\n\nexport type MapToCurve<T> = (scalar: bigint[]) => AffinePoint<T>;\n\n// Separated from initialization opts, so users won't accidentally change per-curve parameters\n// (changing DST is ok!)\nexport type htfBasicOpts = { DST: UnicodeOrBytes };\n\nexport function createHasher<T>(\n  Point: H2CPointConstructor<T>,\n  mapToCurve: MapToCurve<T>,\n  def: Opts & { encodeDST?: UnicodeOrBytes }\n) {\n  if (typeof mapToCurve !== 'function') throw new Error('mapToCurve() must be defined');\n  return {\n    // Encodes byte string to elliptic curve\n    // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-3\n    hashToCurve(msg: Uint8Array, options?: htfBasicOpts) {\n      const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options } as Opts);\n      const u0 = Point.fromAffine(mapToCurve(u[0]));\n      const u1 = Point.fromAffine(mapToCurve(u[1]));\n      const P = u0.add(u1).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n\n    // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-3\n    encodeToCurve(msg: Uint8Array, options?: htfBasicOpts) {\n      const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options } as Opts);\n      const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n  };\n}\n","import assert from './_assert.js';\nimport { Hash, CHash, Input, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nclass HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    assert.hash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new TypeError('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n  update(buf: Input) {\n    assert.exists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assert.exists(this);\n    assert.bytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest() {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  destroy() {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport { ProjPointType as PointType, mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nimport type { Hex, PrivKey } from './abstract/utils.js';\nimport { bytesToNumberBE, concatBytes, ensureBytes, numberToBytesBE } from './abstract/utils.js';\nimport * as htf from './abstract/hash-to-curve.js';\nimport { createCurve } from './_shortw_utils.js';\n\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a: bigint, b: bigint) => (a + b / _2n) / b;\n\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y: bigint): bigint {\n  const P = secp256k1P;\n  // prettier-ignore\n  const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n  // prettier-ignore\n  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n  const b2 = (y * y * y) % P; // x^3, 11\n  const b3 = (b2 * b2 * y) % P; // x^7\n  const b6 = (pow2(b3, _3n, P) * b3) % P;\n  const b9 = (pow2(b6, _3n, P) * b3) % P;\n  const b11 = (pow2(b9, _2n, P) * b2) % P;\n  const b22 = (pow2(b11, _11n, P) * b11) % P;\n  const b44 = (pow2(b22, _22n, P) * b22) % P;\n  const b88 = (pow2(b44, _44n, P) * b44) % P;\n  const b176 = (pow2(b88, _88n, P) * b88) % P;\n  const b220 = (pow2(b176, _44n, P) * b44) % P;\n  const b223 = (pow2(b220, _3n, P) * b3) % P;\n  const t1 = (pow2(b223, _23n, P) * b22) % P;\n  const t2 = (pow2(t1, _6n, P) * b2) % P;\n  const root = pow2(t2, _2n, P);\n  if (!Fp.eql(Fp.sqr(root), y)) throw new Error('Cannot find square root');\n  return root;\n}\n\nconst Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\n\nexport const secp256k1 = createCurve(\n  {\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975\n    Fp, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n      beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n      splitScalar: (k: bigint) => {\n        const n = secp256k1N;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg) k1 = n - k1;\n        if (k2neg) k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n          throw new Error('splitScalar: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n      },\n    },\n  },\n  sha256\n);\n\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\nconst fe = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\nconst ge = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES: { [tag: string]: Uint8Array } = {};\nfunction taggedHash(tag: string, ...messages: Uint8Array[]): Uint8Array {\n  let tagP = TAGGED_HASH_PREFIXES[tag];\n  if (tagP === undefined) {\n    const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n    tagP = concatBytes(tagH, tagH);\n    TAGGED_HASH_PREFIXES[tag] = tagP;\n  }\n  return sha256(concatBytes(tagP, ...messages));\n}\n\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point: PointType<bigint>) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n: bigint) => numberToBytesBE(n, 32);\nconst modP = (x: bigint) => mod(x, secp256k1P);\nconst modN = (x: bigint) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q: PointType<bigint>, a: bigint, b: bigint) =>\n  Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv: PrivKey) {\n  let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n  let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n  const scalar = p.hasEvenY() ? d_ : modN(-d_);\n  return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x: bigint): PointType<bigint> {\n  if (!fe(x)) throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n  const xx = modP(x * x);\n  const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n  let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n  if (y % _2n !== _0n) y = modP(-y); // Return the unique point P such that x(P) = x and\n  const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n  p.assertValidity();\n  return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args: Uint8Array[]): bigint {\n  return modN(bytesToNumberBE(taggedHash('BIP0340/challenge', ...args)));\n}\n\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey: Hex): Uint8Array {\n  return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(\n  message: Hex,\n  privateKey: PrivKey,\n  auxRand: Hex = randomBytes(32)\n): Uint8Array {\n  const m = ensureBytes('message', message);\n  const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n  const t = numTo32b(d ^ bytesToNumberBE(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n  const k_ = modN(bytesToNumberBE(rand)); // Let k' = int(rand) mod n\n  if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n  sig.set(rx, 0);\n  sig.set(numTo32b(modN(k + e * d)), 32);\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature: Hex, message: Hex, publicKey: Hex): boolean {\n  const sig = ensureBytes('signature', signature, 64);\n  const m = ensureBytes('message', message);\n  const pub = ensureBytes('publicKey', publicKey, 32);\n  try {\n    const P = lift_x(bytesToNumberBE(pub)); // P = lift_x(int(pk)); fail if that fails\n    const r = bytesToNumberBE(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n    if (!fe(r)) return false;\n    const s = bytesToNumberBE(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n    if (!ge(s)) return false;\n    const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n    const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n    if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P\n    return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n  } catch (error) {\n    return false;\n  }\n}\n\nexport const schnorr = {\n  getPublicKey: schnorrGetPublicKey,\n  sign: schnorrSign,\n  verify: schnorrVerify,\n  utils: {\n    randomPrivateKey: secp256k1.utils.randomPrivateKey,\n    lift_x,\n    pointToBytes,\n    numberToBytesBE,\n    bytesToNumberBE,\n    taggedHash,\n    mod,\n  },\n};\n\nconst isoMap = htf.isogenyMap(\n  Fp,\n  [\n    // xNum\n    [\n      '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n      '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n      '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n      '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n    ],\n    // xDen\n    [\n      '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n      '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n      '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n      '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n      '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n      '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n      '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n    ],\n    // yDen\n    [\n      '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n      '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n      '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n      '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n  ].map((i) => i.map((j) => BigInt(j))) as [bigint[], bigint[], bigint[], bigint[]]\n);\nconst mapSWU = mapToCurveSimpleSWU(Fp, {\n  A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n  B: BigInt('1771'),\n  Z: Fp.create(BigInt('-11')),\n});\nexport const { hashToCurve, encodeToCurve } = htf.createHasher(\n  secp256k1.ProjectivePoint,\n  (scalars: bigint[]) => {\n    const { x, y } = mapSWU(Fp.create(scalars[0]));\n    return isoMap(x, y);\n  },\n  {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256,\n  }\n);\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass, CurveType } from './abstract/weierstrass.js';\nimport { CHash } from './abstract/utils.js';\n\n// connects noble-curves to noble-hashes\nexport function getHash(hash: CHash) {\n  return {\n    hash,\n    hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => hmac(hash, key, concatBytes(...msgs)),\n    randomBytes,\n  };\n}\n// Same API as @noble/hashes, with ability to create curve with custom hash\ntype CurveDef = Readonly<Omit<CurveType, 'hash' | 'hmac' | 'randomBytes'>>;\nexport function createCurve(curveDef: CurveDef, defHash: CHash) {\n  const create = (hash: CHash) => weierstrass({ ...curveDef, ...getHash(hash) });\n  return Object.freeze({ ...create(defHash), create });\n}\n"],"names":["number","n","Number","isSafeInteger","bytes","b","lengths","Uint8Array","length","includes","bool","hash","create","outputLen","blockLen","exists","instance","checkFinished","destroyed","finished","output","out","min","crypto","globalThis","undefined","createView","DataView","arr","buffer","byteOffset","byteLength","rotr","word","shift","isLE","Uint32Array","toBytes","data","utf8ToBytes","str","TextEncoder","encode","Array","from","v","i","toString","padStart","Hash","clone","_cloneInto","wrapConstructor","hashConstructor","hashC","update","message","digest","tmp","randomBytes","bytesLength","getRandomValues","SHA2","assert","view","len","pos","take","Math","dataView","process","set","subarray","roundClean","digestInto","fill","padOffset","setBigUint64","value","_32n","BigInt","_u32_max","wh","wl","h","l","setUint32","oview","outLen","state","get","res","slice","destroy","to","constructor","Chi","a","c","Maj","SHA256_K","IV","SHA256_W","A","B","C","D","E","F","G","H","offset","getUint32","W15","W2","s0","s1","sigma1","T1","sigma0","T2","SHA256","sha256","SHA224","_1n","_2n","u8a","hexes","bytesToHex","hex","hexToNumber","hexToBytes","array","j","hexByte","byte","parseInt","isNaN","bytesToNumberBE","bytesToNumberLE","reverse","numberToBytesBE","numberToBytesLE","ensureBytes","title","expectedLength","e","concatBytes","arrs","r","reduce","sum","pad","forEach","bitMask","u8n","u8fr","createHmacDrbg","hashLen","qByteLen","hmacFn","k","reset","reseed","seed","gen","sl","push","pred","validatorFns","bigint","val","function","boolean","string","isArray","field","object","Fp","isValid","validateObject","validators","optValidators","checkField","fieldName","type","isOptional","checkVal","String","Object","entries","_0n","_3n","_4n","_5n","_8n","mod","result","pow2","x","power","modulo","invert","y","u","q","m","gcd","FIELD_FIELDS","validateField","opts","map","ORDER","MASK","BYTES","BITS","nLength","nBitLength","_nBitLength","nByteLength","ceil","validateBasic","curve","Gx","Gy","freeze","p","b2n","h2b","ut","DER","Err","Error","_parseInt","d","toSig","sBytes","s","rBytesLeft","hexFromSig","sig","num","shl","rhl","rl","os2ip","i2osp","isBytes","item","isNum","hash_to_field","msg","count","options","prb","DST","expand","_DST","validateDST","dst","log2p","L","len_in_bytes","expand_message_xmd","lenInBytes","b_in_bytes","r_in_bytes","ell","DST_prime","Z_pad","l_i_b_str","b_0","args","strxor","pseudo_random_bytes","expand_message_xof","dkLen","elm_offset","tv","buf","iHash","oHash","getPrototypeOf","_key","key","hmac","HMAC","secp256k1P","secp256k1N","divNearest","Field","bitLen","redef","sqrtP","FpSqrt","P","p1div4","root","pow","eql","sqr","c1","n2","mul","nv","sub","ONE","tonelliShanks","Q","S","Z","legendreC","Q1div2","neg","g","ZERO","t2","ge","f","is0","isOdd","lhs","rhs","add","FpPow","div","sqrN","addN","subN","mulN","inv","sqrt","invertBatch","FpInvertBatch","nums","lastMultiplied","acc","inverted","reduceRight","lst","cmov","fromBytes","_6n","_11n","_22n","_23n","_44n","_88n","b2","b3","b6","b9","b11","b22","b44","b88","b176","b220","b223","t1","secp256k1","createCurve","curveDef","defHash","weierstrass","CURVE","validateOpts","bits2int","bits2int_modN","lowS","CURVE_ORDER","compressedLen","uncompressedLen","modN","ProjectivePoint","Point","normPrivateKeyToScalar","weierstrassEquation","isWithinCurveOrder","weierstrassPoints","validatePointOpts","allowedPrivateKeyLengths","wrapPrivateKey","isTorsionFree","clearCofactor","allowInfinityPoint","endo","beta","splitScalar","point","isCompressed","toAffine","tail","x2","x3","assertGE","error","pointPrecomputes","Map","assertPrjPoint","other","fromAffine","normalizeZ","points","toInv","pz","fromHex","assertValidity","fromPrivateKey","privateKey","BASE","multiply","_setWindowSize","windowSize","_WINDOW_SIZE","delete","left","right","hasEvenY","equals","px","X1","py","Y1","Z1","X2","Y2","Z2","U1","U2","negate","double","X3","Y3","Z3","t0","t3","t4","t5","subtract","wNAF","wnaf","wNAFCached","comp","multiplyUnsafe","I","unsafeLadder","k1neg","k1","k2neg","k2","k1p","k2p","scalar","fake","f1p","f2p","constTimeNegate","multiplyAndAddUnsafe","iz","z","ax","ay","zz","cofactor","toRawBytes","toHex","_bits","bits","condition","windows","W","elm","precomputeWindow","base","window","precomputes","mask","maxNumber","shiftBy","wbits","offset2","abs","cond1","cond2","precomputesMap","transform","cat","head","y2","isYOdd","numToNByteStr","isBiggerThanHalfOrder","HALF","slcNum","Signature","fromCompact","fromDER","addRecoveryBit","recovery","recoverPublicKey","msgHash","rec","radj","prefix","R","ir","u1","u2","hasHighS","normalizeS","toDERRawBytes","toDERHex","toCompactRawBytes","toCompactHex","isProbPub","delta","ORDER_MASK","int2octets","defaultSigOpts","prehash","defaultVerOpts","getPublicKey","getSharedSecret","privateA","publicB","sign","privKey","k2sig","prepSig","some","extraEntropy","ent","h1int","seedArgs","kBytes","ik","normS","drbg","verify","signature","publicKey","_sig","sg","derError","is","utils","isValidPrivateKey","randomPrivateKey","rand","groupOrder","minLen","precompute","msgs","arrays","every","a1","b1","a2","POW_2_128","c2","isoMap","htf","COEFF","xNum","xDen","yNum","yDen","mapSWU","mapToCurveSimpleSWU","sqrtRatio","SWUFpSqrtRatio","o","c3","c4","c5","c6","c7","tv1","tv2","tv3","tv5","tv4","isQR","tvv5","e1","y1","tv6","hashToCurve","encodeToCurve","mapToCurve","def","u0","encodeDST","scalars"],"sourceRoot":""}