{"version":3,"file":"static/js/637.35516d77.chunk.js","mappings":"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","sources":["nft/components/bag/ButtonStates.tsx","nft/components/card/utils.tsx","graphql/data/nft/NftUniversalRouterAddress.ts","nft/utils/nftRoute.ts","../node_modules/zustand/esm/shallow.mjs","nft/hooks/useTokenInput.ts","nft/utils/tokenRoutes.ts","nft/components/bag/BagFooter.tsx","nft/hooks/useBagTotalEthPrice.ts","nft/hooks/useSubscribeTransactionState.ts","nft/hooks/useFetchAssets.ts","nft/hooks/usePurchaseAssets.ts","nft/utils/bag.ts","nft/hooks/useDerivedPayWithAnyTokenSwapInfo.ts","nft/hooks/usePayWithAnyTokenSwap.ts","nft/hooks/usePriceImpact.ts","nft/components/bag/TimedLoader.tsx","nft/components/card/media.tsx","nft/components/card/icons.tsx","nft/components/bag/BagRow.css.ts","nft/components/bag/BagRow.tsx","nft/components/bag/BagContent.tsx","nft/components/bag/BagHeader.tsx","nft/components/bag/EmptyContent.tsx","nft/components/bag/profile/ProfileAssetRow.tsx","nft/components/bag/profile/ProfileBagContent.tsx","nft/components/bag/Bag.tsx","nft/components/bag/Bag.css.ts"],"sourcesContent":["import { Trans } from '@lingui/macro'\nimport { PriceImpact } from 'nft/hooks/usePriceImpact'\nimport { ReactNode } from 'react'\nimport { DefaultTheme } from 'styled-components'\n\nexport enum BuyButtonStates {\n  WALLET_NOT_CONNECTED,\n  NOT_SUPPORTED_CHAIN,\n  INSUFFICIENT_BALANCE,\n  ERROR,\n  IN_WALLET_CONFIRMATION,\n  PROCESSING_TRANSACTION,\n  FETCHING_TOKEN_ROUTE,\n  INVALID_TOKEN_ROUTE,\n  NO_TOKEN_ROUTE_FOUND,\n  LOADING_ALLOWANCE,\n  IN_WALLET_ALLOWANCE_APPROVAL,\n  PROCESSING_APPROVAL,\n  REQUIRE_APPROVAL,\n  CONFIRM_UPDATED_PRICE,\n  PRICE_IMPACT_HIGH,\n  PAY,\n}\n\nexport interface BuyButtonStateData {\n  handleClick: (() => void) | (() => Promise<void>)\n  buttonText: ReactNode\n  disabled: boolean\n  warningText?: ReactNode\n  warningTextColor: string\n  helperText?: ReactNode\n  helperTextColor: string\n  buttonColor: string\n  buttonTextColor: string\n}\n\nexport function getBuyButtonStateData(\n  buyButtonState: BuyButtonStates,\n  theme: DefaultTheme,\n  handleClickOverride?: (() => void) | (() => Promise<void>),\n  usingPayWithAnyToken?: boolean,\n  priceImpact?: PriceImpact\n): BuyButtonStateData {\n  const defaultBuyButtonState: BuyButtonStateData = {\n    handleClick: () => undefined,\n    buttonText: <Trans>Something went wrong</Trans>,\n    disabled: true,\n    warningText: undefined,\n    warningTextColor: theme.accentWarning,\n    helperText: undefined,\n    helperTextColor: theme.textSecondary,\n    buttonColor: theme.accentAction,\n    buttonTextColor: theme.accentTextLightPrimary,\n  }\n\n  const buyButtonStateData: Record<BuyButtonStates, BuyButtonStateData> = {\n    [BuyButtonStates.WALLET_NOT_CONNECTED]: {\n      ...defaultBuyButtonState,\n      handleClick: handleClickOverride ?? (() => undefined),\n      disabled: false,\n      buttonText: <Trans>Connect wallet</Trans>,\n    },\n    [BuyButtonStates.NOT_SUPPORTED_CHAIN]: {\n      ...defaultBuyButtonState,\n      handleClick: handleClickOverride ?? (() => undefined),\n      buttonText: <Trans>Switch networks</Trans>,\n      disabled: false,\n      warningText: <Trans>Wrong network</Trans>,\n    },\n    [BuyButtonStates.INSUFFICIENT_BALANCE]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Pay</Trans>,\n      warningText: <Trans>Insufficient funds</Trans>,\n    },\n    [BuyButtonStates.ERROR]: {\n      ...defaultBuyButtonState,\n      warningText: <Trans>Something went wrong. Please try again.</Trans>,\n    },\n    [BuyButtonStates.IN_WALLET_CONFIRMATION]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Proceed in wallet</Trans>,\n    },\n    [BuyButtonStates.PROCESSING_TRANSACTION]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Transaction pending</Trans>,\n    },\n    [BuyButtonStates.FETCHING_TOKEN_ROUTE]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Fetching Route</Trans>,\n    },\n    [BuyButtonStates.INVALID_TOKEN_ROUTE]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Pay</Trans>,\n    },\n    [BuyButtonStates.NO_TOKEN_ROUTE_FOUND]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Insufficient liquidity</Trans>,\n      buttonColor: theme.backgroundInteractive,\n      buttonTextColor: theme.textPrimary,\n      helperText: <Trans>Insufficient pool liquidity to complete transaction</Trans>,\n    },\n    [BuyButtonStates.LOADING_ALLOWANCE]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Loading Allowance</Trans>,\n    },\n    [BuyButtonStates.IN_WALLET_ALLOWANCE_APPROVAL]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Approve in your wallet</Trans>,\n    },\n    [BuyButtonStates.PROCESSING_APPROVAL]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Approval pending</Trans>,\n    },\n    [BuyButtonStates.REQUIRE_APPROVAL]: {\n      ...defaultBuyButtonState,\n      disabled: false,\n      handleClick: handleClickOverride ?? (() => undefined),\n      helperText: <Trans>An approval is needed to use this token. </Trans>,\n      buttonText: <Trans>Approve</Trans>,\n    },\n    [BuyButtonStates.CONFIRM_UPDATED_PRICE]: {\n      ...defaultBuyButtonState,\n      handleClick: handleClickOverride ?? (() => undefined),\n      disabled: false,\n      warningTextColor: theme.accentAction,\n      warningText: <Trans>Price updated</Trans>,\n      buttonText: <Trans>Pay</Trans>,\n    },\n    [BuyButtonStates.PRICE_IMPACT_HIGH]: {\n      ...defaultBuyButtonState,\n      handleClick: handleClickOverride ?? (() => undefined),\n      disabled: false,\n      buttonColor: priceImpact ? priceImpact.priceImpactSeverity.color : defaultBuyButtonState.buttonColor,\n      helperText: <Trans>Price impact warning</Trans>,\n      helperTextColor: priceImpact ? priceImpact.priceImpactSeverity.color : defaultBuyButtonState.helperTextColor,\n      buttonText: <Trans>Pay Anyway</Trans>,\n    },\n    [BuyButtonStates.PAY]: {\n      ...defaultBuyButtonState,\n      handleClick: handleClickOverride ?? (() => undefined),\n      disabled: false,\n      buttonText: <Trans>Pay</Trans>,\n      helperText: usingPayWithAnyToken ? <Trans>Refunds for unavailable items will be given in ETH</Trans> : undefined,\n    },\n  }\n\n  return buyButtonStateData[buyButtonState]\n}\n","import { NftImage, NftPlayableMedia } from 'nft/components/card/media'\nimport {\n  LarvaLabsMarketplaceIcon,\n  LooksRareIcon,\n  Nft20Icon,\n  NftXIcon,\n  OpenSeaMarketplaceIcon,\n  SudoSwapIcon,\n  X2y2Icon,\n} from 'nft/components/icons'\nimport { GenieAsset, Markets, UniformAspectRatio, UniformAspectRatios, WalletAsset } from 'nft/types'\nimport { isAudio, isVideo } from 'nft/utils'\nimport { ReactNode, useCallback } from 'react'\n\nenum AssetMediaType {\n  Image,\n  Video,\n  Audio,\n}\n\nfunction getAssetImageUrl(asset: GenieAsset | WalletAsset) {\n  return asset.imageUrl || asset.smallImageUrl\n}\n\nfunction getAssetMediaUrl(asset: GenieAsset | WalletAsset) {\n  return asset.animationUrl\n}\n\nexport function detailsHref(asset: GenieAsset | WalletAsset) {\n  if ('address' in asset) return `/nfts/asset/${asset.address}/${asset.tokenId}?origin=collection`\n  if ('asset_contract' in asset) return `/nfts/asset/${asset.asset_contract.address}/${asset.tokenId}?origin=profile`\n  return '/nfts/profile'\n}\n\nfunction getAssetMediaType(asset: GenieAsset | WalletAsset) {\n  let assetMediaType = AssetMediaType.Image\n  if (asset.animationUrl) {\n    if (isAudio(asset.animationUrl)) {\n      assetMediaType = AssetMediaType.Audio\n    } else if (isVideo(asset.animationUrl)) {\n      assetMediaType = AssetMediaType.Video\n    }\n  }\n  return assetMediaType\n}\n\nexport function getNftDisplayComponent(\n  asset: GenieAsset | WalletAsset,\n  mediaShouldBePlaying: boolean,\n  setCurrentTokenPlayingMedia: (tokenId: string | undefined) => void,\n  uniformAspectRatio?: UniformAspectRatio,\n  setUniformAspectRatio?: (uniformAspectRatio: UniformAspectRatio) => void,\n  renderedHeight?: number,\n  setRenderedHeight?: (renderedHeight: number | undefined) => void\n) {\n  switch (getAssetMediaType(asset)) {\n    case AssetMediaType.Image:\n      return (\n        <NftImage\n          src={getAssetImageUrl(asset)}\n          uniformAspectRatio={uniformAspectRatio}\n          setUniformAspectRatio={setUniformAspectRatio}\n          renderedHeight={renderedHeight}\n          setRenderedHeight={setRenderedHeight}\n        />\n      )\n    case AssetMediaType.Video:\n      return (\n        <NftPlayableMedia\n          src={getAssetImageUrl(asset)}\n          mediaSrc={getAssetMediaUrl(asset)}\n          tokenId={asset.tokenId}\n          shouldPlay={mediaShouldBePlaying}\n          setCurrentTokenPlayingMedia={setCurrentTokenPlayingMedia}\n          uniformAspectRatio={uniformAspectRatio}\n          setUniformAspectRatio={setUniformAspectRatio}\n          renderedHeight={renderedHeight}\n          setRenderedHeight={setRenderedHeight}\n        />\n      )\n    case AssetMediaType.Audio:\n      return (\n        <NftPlayableMedia\n          isAudio={true}\n          src={getAssetImageUrl(asset)}\n          mediaSrc={getAssetMediaUrl(asset)}\n          tokenId={asset.tokenId}\n          shouldPlay={mediaShouldBePlaying}\n          setCurrentTokenPlayingMedia={setCurrentTokenPlayingMedia}\n          uniformAspectRatio={uniformAspectRatio}\n          setUniformAspectRatio={setUniformAspectRatio}\n          renderedHeight={renderedHeight}\n          setRenderedHeight={setRenderedHeight}\n        />\n      )\n  }\n}\n\nexport function useSelectAsset({\n  selectAsset,\n  unselectAsset,\n  isSelected,\n  isDisabled,\n  onClick,\n}: {\n  selectAsset?: () => void\n  unselectAsset?: () => void\n  isSelected: boolean\n  isDisabled: boolean\n  onClick?: () => void\n}) {\n  return useCallback(\n    (e: React.MouseEvent) => {\n      e.stopPropagation()\n      e.preventDefault()\n\n      if (isDisabled) {\n        return\n      }\n\n      if (onClick) {\n        onClick()\n        return\n      }\n\n      return isSelected ? unselectAsset?.() : selectAsset?.()\n    },\n    [selectAsset, isDisabled, onClick, unselectAsset, isSelected]\n  )\n}\n\nexport function getMarketplaceIcon(market: Markets): ReactNode {\n  switch (market) {\n    case Markets.Opensea:\n      return <OpenSeaMarketplaceIcon />\n    case Markets.LooksRare:\n      return <LooksRareIcon />\n    case Markets.X2Y2:\n      return <X2y2Icon />\n    case Markets.Sudoswap:\n      return <SudoSwapIcon />\n    case Markets.NFT20:\n      return <Nft20Icon />\n    case Markets.NFTX:\n      return <NftXIcon />\n    case Markets.Cryptopunks:\n      return <LarvaLabsMarketplaceIcon />\n    default:\n      return null\n  }\n}\n\nexport const handleUniformAspectRatio = (\n  uniformAspectRatio: UniformAspectRatio,\n  e: React.SyntheticEvent<HTMLElement, Event>,\n  setUniformAspectRatio?: (uniformAspectRatio: UniformAspectRatio) => void,\n  renderedHeight?: number,\n  setRenderedHeight?: (renderedHeight: number | undefined) => void\n) => {\n  if (uniformAspectRatio !== UniformAspectRatios.square && setUniformAspectRatio) {\n    const height = e.currentTarget.clientHeight\n    const width = e.currentTarget.clientWidth\n    const aspectRatio = width / height\n\n    if (\n      (!renderedHeight || renderedHeight !== height) &&\n      aspectRatio < 1 &&\n      uniformAspectRatio !== UniformAspectRatios.square &&\n      setRenderedHeight\n    ) {\n      setRenderedHeight(height)\n    }\n\n    const variance = 0.05\n    if (uniformAspectRatio === UniformAspectRatios.unset) {\n      setUniformAspectRatio(aspectRatio >= 1 ? UniformAspectRatios.square : aspectRatio)\n    } else if (aspectRatio > uniformAspectRatio + variance || aspectRatio < uniformAspectRatio - variance) {\n      setUniformAspectRatio(UniformAspectRatios.square)\n      setRenderedHeight && setRenderedHeight(undefined)\n    }\n  }\n}\n\nexport function getHeightFromAspectRatio(\n  uniformAspectRatio: UniformAspectRatio,\n  renderedHeight?: number\n): number | undefined {\n  return uniformAspectRatio === UniformAspectRatios.square || uniformAspectRatio === UniformAspectRatios.unset\n    ? undefined\n    : renderedHeight\n}\n\nexport function getMediaAspectRatio(\n  uniformAspectRatio?: UniformAspectRatio,\n  setUniformAspectRatio?: (uniformAspectRatio: UniformAspectRatio) => void\n): string {\n  return uniformAspectRatio === UniformAspectRatios.square || !setUniformAspectRatio ? '1' : 'auto'\n}\n","import { ChainId } from '@uniswap/sdk-core'\nimport { UNIVERSAL_ROUTER_ADDRESS } from '@uniswap/universal-router-sdk'\nimport { isSupportedChain } from 'constants/chains'\nimport gql from 'graphql-tag'\n\nimport { useNftUniversalRouterAddressQuery } from '../__generated__/types-and-hooks'\n\ngql`\n  query NftUniversalRouterAddress($chain: Chain = ETHEREUM) {\n    nftRoute(chain: $chain, senderAddress: \"\", nftTrades: []) {\n      toAddress\n    }\n  }\n`\n\nexport function getURAddress(chainId?: number, nftURAddress?: string): string | undefined {\n  if (!chainId) return undefined\n  // if mainnet and on NFT flow, use the contract address returned by GQL\n  if (chainId === ChainId.MAINNET) {\n    return nftURAddress ?? UNIVERSAL_ROUTER_ADDRESS(chainId)\n  }\n  return isSupportedChain(chainId) ? UNIVERSAL_ROUTER_ADDRESS(chainId) : undefined\n}\n\nexport function useNftUniversalRouterAddress() {\n  const { data, loading } = useNftUniversalRouterAddressQuery({\n    // no cache because a different version of nftRoute query is going to be called around the same time\n    fetchPolicy: 'no-cache',\n  })\n\n  return {\n    universalRouterAddress: data?.nftRoute?.toAddress,\n    universalRouterAddressIsLoading: loading,\n  }\n}\n","import { NftRouteResponse, NftTrade } from 'graphql/data/__generated__/types-and-hooks'\nimport { Markets, RouteResponse, RoutingActions, RoutingItem, TokenType } from 'nft/types'\n\nfunction buildRoutingItem(routingItem: NftTrade): RoutingItem {\n  return {\n    action: RoutingActions.Buy,\n    marketplace: routingItem.marketplace.toLowerCase(),\n    amountIn: routingItem.price.value,\n    assetIn: {\n      ETHPrice: routingItem.price.value,\n      baseAsset: routingItem.price.currency,\n      basePrice: routingItem.price.value,\n      baseDecimals: '18',\n    },\n    amountOut: routingItem.amount.toString(),\n    assetOut: {\n      id: routingItem.id,\n      decimals: 18,\n      address: routingItem.contractAddress,\n      priceInfo: {\n        ETHPrice: routingItem.price.value,\n        baseAsset: routingItem.price.currency,\n        basePrice: routingItem.price.value,\n        baseDecimals: '18',\n      },\n      tokenType: routingItem.tokenType as unknown as TokenType,\n      tokenId: routingItem.tokenId,\n      amount: routingItem.amount.toString(),\n      marketplace: routingItem.marketplace.toLowerCase() as Markets,\n      orderSource: 'api',\n    },\n  }\n}\n\nfunction buildRoutingItems(routingItems: readonly NftTrade[]): RoutingItem[] {\n  return routingItems.map(buildRoutingItem)\n}\n\nexport function buildRouteResponse(\n  routeResponse: NftRouteResponse,\n  useErc20Token: boolean\n): { route: RoutingItem[]; routeResponse: RouteResponse } {\n  const route = routeResponse.route ? buildRoutingItems(routeResponse.route) : []\n  return {\n    route,\n    routeResponse: {\n      route,\n      valueToSend: useErc20Token ? undefined : routeResponse.sendAmount.value,\n      data: routeResponse.calldata,\n      to: routeResponse.toAddress,\n    },\n  }\n}\n","function shallow(objA, objB) {\n  if (Object.is(objA, objB)) {\n    return true;\n  }\n  if (typeof objA !== \"object\" || objA === null || typeof objB !== \"object\" || objB === null) {\n    return false;\n  }\n  if (objA instanceof Map && objB instanceof Map) {\n    if (objA.size !== objB.size)\n      return false;\n    for (const [key, value] of objA) {\n      if (!Object.is(value, objB.get(key))) {\n        return false;\n      }\n    }\n    return true;\n  }\n  if (objA instanceof Set && objB instanceof Set) {\n    if (objA.size !== objB.size)\n      return false;\n    for (const value of objA) {\n      if (!objB.has(value)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  const keysA = Object.keys(objA);\n  if (keysA.length !== Object.keys(objB).length) {\n    return false;\n  }\n  for (let i = 0; i < keysA.length; i++) {\n    if (!Object.prototype.hasOwnProperty.call(objB, keysA[i]) || !Object.is(objA[keysA[i]], objB[keysA[i]])) {\n      return false;\n    }\n  }\n  return true;\n}\nvar shallow$1 = (objA, objB) => {\n  if ((import.meta.env && import.meta.env.MODE) !== \"production\") {\n    console.warn(\n      \"[DEPRECATED] Default export is deprecated. Instead use `import { shallow } from 'zustand/shallow'`.\"\n    );\n  }\n  return shallow(objA, objB);\n};\n\nexport { shallow$1 as default, shallow };\n","import { Currency } from '@uniswap/sdk-core'\nimport { TokenTradeInput } from 'graphql/data/__generated__/types-and-hooks'\nimport { create } from 'zustand'\nimport { devtools } from 'zustand/middleware'\n\ninterface TokenInputState {\n  inputCurrency?: Currency\n  setInputCurrency: (currency: Currency | undefined) => void\n  clearInputCurrency: () => void\n  tokenTradeInput?: TokenTradeInput\n  setTokenTradeInput: (tokenTradeInput: TokenTradeInput | undefined) => void\n}\n\nexport const useTokenInput = create<TokenInputState>()(\n  devtools(\n    (set) => ({\n      inputCurrency: undefined,\n      tokenTradeInput: undefined,\n      setInputCurrency: (currency) => set(() => ({ inputCurrency: currency })),\n      clearInputCurrency: () => set(() => ({ inputCurrency: undefined })),\n      setTokenTradeInput: (tokenTradeInput) => set(() => ({ tokenTradeInput })),\n    }),\n    { name: 'useTokenInput' }\n  )\n)\n","import { IRoute, Protocol } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount } from '@uniswap/sdk-core'\nimport { Pair } from '@uniswap/v2-sdk'\nimport { Pool } from '@uniswap/v3-sdk'\nimport { TokenAmountInput, TokenTradeRouteInput, TradePoolInput } from 'graphql/data/__generated__/types-and-hooks'\nimport { ClassicTrade } from 'state/routing/types'\n\ninterface SwapAmounts {\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n}\n\ninterface TradeTokenInputAmounts {\n  inputAmount: TokenAmountInput\n  outputAmount: TokenAmountInput\n}\n\ninterface Swap {\n  route: IRoute<Currency, Currency, Pair | Pool>\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n}\n\nfunction buildTradeRouteInputAmounts(swapAmounts: SwapAmounts): TradeTokenInputAmounts {\n  return {\n    inputAmount: {\n      amount: swapAmounts.inputAmount.quotient.toString(),\n      token: {\n        address: swapAmounts.inputAmount.currency.isToken\n          ? swapAmounts.inputAmount.currency.address\n          : '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',\n        chainId: swapAmounts.inputAmount.currency.chainId,\n        decimals: swapAmounts.inputAmount.currency.decimals,\n        isNative: swapAmounts.inputAmount.currency.isNative,\n      },\n    },\n    outputAmount: {\n      amount: swapAmounts.outputAmount.quotient.toString(),\n      token: {\n        address: swapAmounts.outputAmount.currency.isToken\n          ? swapAmounts.outputAmount.currency.address\n          : '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',\n        chainId: swapAmounts.outputAmount.currency.chainId,\n        decimals: swapAmounts.outputAmount.currency.decimals,\n        isNative: swapAmounts.outputAmount.currency.isNative,\n      },\n    },\n  }\n}\n\nfunction buildPool(pool: Pair | Pool): TradePoolInput {\n  const isPool = 'fee' in pool\n\n  return {\n    pair: !isPool\n      ? {\n          tokenAmountA: {\n            amount: pool.reserve0.quotient.toString(),\n            token: {\n              address: pool.token0.address,\n              chainId: pool.token0.chainId,\n              decimals: pool.token0.decimals,\n              isNative: pool.token0.isNative,\n            },\n          },\n          tokenAmountB: {\n            amount: pool.reserve1.quotient.toString(),\n            token: {\n              address: pool.token1.address,\n              chainId: pool.token1.chainId,\n              decimals: pool.token1.decimals,\n              isNative: pool.token1.isNative,\n            },\n          },\n        }\n      : undefined,\n    pool: isPool\n      ? {\n          fee: pool.fee,\n          liquidity: pool.liquidity.toString(),\n          sqrtRatioX96: pool.sqrtRatioX96.toString(),\n          tickCurrent: pool.tickCurrent.toString(),\n          tokenA: {\n            address: pool.token0.address,\n            chainId: pool.token0.chainId,\n            decimals: pool.token0.decimals,\n            isNative: pool.token0.isNative,\n          },\n          tokenB: {\n            address: pool.token1.address,\n            chainId: pool.token1.chainId,\n            decimals: pool.token1.decimals,\n            isNative: pool.token1.isNative,\n          },\n        }\n      : undefined,\n  }\n}\n\nfunction buildPools(pools: (Pair | Pool)[]): TradePoolInput[] {\n  return pools.map((pool) => buildPool(pool))\n}\n\nfunction buildTradeRouteInput(swap: Swap): TokenTradeRouteInput {\n  return {\n    ...buildTradeRouteInputAmounts({ inputAmount: swap.inputAmount, outputAmount: swap.outputAmount }),\n    pools: buildPools(swap.route.pools),\n  }\n}\n\nexport function buildAllTradeRouteInputs(trade: ClassicTrade): {\n  mixedTokenTradeRouteInputs?: TokenTradeRouteInput[]\n  v2TokenTradeRouteInputs?: TokenTradeRouteInput[]\n  v3TokenTradeRouteInputs?: TokenTradeRouteInput[]\n} {\n  const mixedTokenTradeRouteInputs: TokenTradeRouteInput[] = []\n  const v2TokenTradeRouteInputs: TokenTradeRouteInput[] = []\n  const v3TokenTradeRouteInputs: TokenTradeRouteInput[] = []\n\n  const swaps = trade.swaps\n\n  for (const swap of swaps) {\n    if (swap.route.protocol === Protocol.MIXED) {\n      mixedTokenTradeRouteInputs.push(buildTradeRouteInput(swap))\n    } else if (swap.route.protocol === Protocol.V2) {\n      v2TokenTradeRouteInputs.push(buildTradeRouteInput(swap))\n    } else {\n      v3TokenTradeRouteInputs.push(buildTradeRouteInput(swap))\n    }\n  }\n\n  return {\n    mixedTokenTradeRouteInputs: mixedTokenTradeRouteInputs.length > 0 ? mixedTokenTradeRouteInputs : undefined,\n    v2TokenTradeRouteInputs: v2TokenTradeRouteInputs.length > 0 ? v2TokenTradeRouteInputs : undefined,\n    v3TokenTradeRouteInputs: v3TokenTradeRouteInputs.length > 0 ? v3TokenTradeRouteInputs : undefined,\n  }\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { formatEther, parseEther } from '@ethersproject/units'\nimport { t, Trans } from '@lingui/macro'\nimport { BrowserEvent, InterfaceElementName, NFTEventName } from '@uniswap/analytics-events'\nimport { ChainId, Currency, CurrencyAmount, Token } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { sendAnalyticsEvent, TraceEvent } from 'analytics'\nimport { useToggleAccountDrawer } from 'components/AccountDrawer'\nimport Column from 'components/Column'\nimport Loader from 'components/Icons/LoadingSpinner'\nimport CurrencyLogo from 'components/Logo/CurrencyLogo'\nimport Row from 'components/Row'\nimport CurrencySearchModal from 'components/SearchModal/CurrencySearchModal'\nimport { LoadingBubble } from 'components/Tokens/loading'\nimport { MouseoverTooltip } from 'components/Tooltip'\nimport { isSupportedChain } from 'constants/chains'\nimport { getURAddress, useNftUniversalRouterAddress } from 'graphql/data/nft/NftUniversalRouterAddress'\nimport { useCurrency } from 'hooks/Tokens'\nimport usePermit2Allowance, { AllowanceState } from 'hooks/usePermit2Allowance'\nimport { useStablecoinValue } from 'hooks/useStablecoinPrice'\nimport { useSwitchChain } from 'hooks/useSwitchChain'\nimport { useTokenBalance } from 'lib/hooks/useCurrencyBalance'\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\nimport { useBag } from 'nft/hooks/useBag'\nimport { useBagTotalEthPrice } from 'nft/hooks/useBagTotalEthPrice'\nimport useDerivedPayWithAnyTokenSwapInfo from 'nft/hooks/useDerivedPayWithAnyTokenSwapInfo'\nimport { useFetchAssets } from 'nft/hooks/useFetchAssets'\nimport usePayWithAnyTokenSwap from 'nft/hooks/usePayWithAnyTokenSwap'\nimport { PriceImpact, usePriceImpact } from 'nft/hooks/usePriceImpact'\nimport { useSubscribeTransactionState } from 'nft/hooks/useSubscribeTransactionState'\nimport { useTokenInput } from 'nft/hooks/useTokenInput'\nimport { useWalletBalance } from 'nft/hooks/useWalletBalance'\nimport { BagStatus } from 'nft/types'\nimport { ethNumberStandardFormatter, formatWeiToDecimal } from 'nft/utils'\nimport { PropsWithChildren, useEffect, useMemo, useState } from 'react'\nimport { AlertTriangle, ChevronDown } from 'react-feather'\nimport { InterfaceTrade, TradeFillType, TradeState } from 'state/routing/types'\nimport styled, { useTheme } from 'styled-components'\nimport { ThemedText } from 'theme'\nimport { shallow } from 'zustand/shallow'\n\nimport { BuyButtonStateData, BuyButtonStates, getBuyButtonStateData } from './ButtonStates'\n\nconst FooterContainer = styled.div`\n  padding: 0px 12px;\n`\n\nconst Footer = styled.div`\n  border-top: 1px solid ${({ theme }) => theme.backgroundOutline};\n  color: ${({ theme }) => theme.textPrimary};\n  display: flex;\n  flex-direction: column;\n  margin: 0px 16px 8px;\n  padding: 12px 0px;\n  border-bottom-left-radius: 12px;\n  border-bottom-right-radius: 12px;\n`\n\nconst FooterHeader = styled(Column)`\n  padding-top: 8px;\n  padding-bottom: 16px;\n`\n\nconst CurrencyRow = styled(Row)`\n  justify-content: space-between;\n  align-items: start;\n  gap: 8px;\n`\n\nconst TotalColumn = styled(Column)`\n  text-align: end;\n  overflow-x: hidden;\n`\n\nconst WarningIcon = styled(AlertTriangle)`\n  width: 14px;\n  margin-right: 4px;\n  color: inherit;\n`\nconst WarningText = styled(ThemedText.BodyPrimary)<{ $color: string }>`\n  align-items: center;\n  color: ${({ $color }) => $color};\n  display: flex;\n  justify-content: center;\n  margin-bottom: 10px !important;\n  text-align: center;\n`\n\nconst HelperText = styled(ThemedText.Caption)<{ $color: string }>`\n  color: ${({ $color }) => $color};\n  display: flex;\n  justify-content: center;\n  text-align: center;\n  margin-bottom: 10px !important;\n`\n\nconst CurrencyInput = styled(Row)`\n  gap: 8px;\n  cursor: pointer;\n`\n\nconst ActionButton = styled.button<{ $backgroundColor: string; $color: string }>`\n  display: flex;\n  background: ${({ $backgroundColor }) => $backgroundColor};\n  color: ${({ $color }) => $color};\n  font-weight: 600;\n  line-height: 24px;\n  font-size: 16px;\n  gap: 16px;\n  justify-content: center;\n  border: none;\n  border-radius: 12px;\n  padding: 12px 0px;\n  cursor: pointer;\n  align-items: center;\n\n  &:disabled {\n    opacity: 0.6;\n    cursor: auto;\n  }\n`\nconst FiatLoadingBubble = styled(LoadingBubble)`\n  border-radius: 4px;\n  width: 4rem;\n  height: 20px;\n  align-self: end;\n`\nconst PriceImpactContainer = styled(Row)`\n  align-items: center;\n  gap: 8px;\n  width: 100%;\n  justify-content: flex-end;\n`\n\nconst PriceImpactRow = styled(Row)`\n  align-items: center;\n  gap: 8px;\n`\n\nconst ValueText = styled(ThemedText.BodyPrimary)`\n  line-height: 20px;\n  font-weight: 500;\n  overflow-x: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  scrollbar-width: none;\n\n  ::-webkit-scrollbar {\n    display: none;\n  }\n`\n\ninterface HelperTextProps {\n  color: string\n}\n\nconst Warning = ({ color, children }: PropsWithChildren<HelperTextProps>) => {\n  if (!children) {\n    return null\n  }\n  return (\n    <WarningText data-testid=\"nft-buy-button-warning\" fontSize=\"14px\" lineHeight=\"20px\" $color={color}>\n      <WarningIcon />\n      {children}\n    </WarningText>\n  )\n}\n\nconst Helper = ({ children, color }: PropsWithChildren<HelperTextProps>) => {\n  if (!children) {\n    return null\n  }\n  return (\n    <HelperText lineHeight=\"16px\" $color={color}>\n      {children}\n    </HelperText>\n  )\n}\n\nconst InputCurrencyValue = ({\n  usingPayWithAnyToken,\n  totalEthPrice,\n  activeCurrency,\n  tradeState,\n  trade,\n}: {\n  usingPayWithAnyToken: boolean\n  totalEthPrice: BigNumber\n  activeCurrency?: Currency | null\n  tradeState: TradeState\n  trade?: InterfaceTrade\n}) => {\n  if (!usingPayWithAnyToken) {\n    return (\n      <ThemedText.BodyPrimary lineHeight=\"20px\" fontWeight=\"500\">\n        {formatWeiToDecimal(totalEthPrice.toString())}\n        &nbsp;{activeCurrency?.symbol ?? 'ETH'}\n      </ThemedText.BodyPrimary>\n    )\n  }\n\n  if (tradeState === TradeState.LOADING && !trade) {\n    return (\n      <ThemedText.BodyPrimary color=\"textTertiary\" lineHeight=\"20px\" fontWeight=\"500\">\n        <Trans>Fetching price...</Trans>\n      </ThemedText.BodyPrimary>\n    )\n  }\n\n  return (\n    <ValueText color={tradeState === TradeState.LOADING ? 'textTertiary' : 'textPrimary'}>\n      {ethNumberStandardFormatter(trade?.inputAmount.toExact())}\n    </ValueText>\n  )\n}\n\nconst FiatValue = ({\n  usdcValue,\n  priceImpact,\n  tradeState,\n  usingPayWithAnyToken,\n}: {\n  usdcValue: CurrencyAmount<Token> | null\n  priceImpact?: PriceImpact\n  tradeState: TradeState\n  usingPayWithAnyToken: boolean\n}) => {\n  if (!usdcValue) {\n    if (usingPayWithAnyToken && (tradeState === TradeState.INVALID || tradeState === TradeState.NO_ROUTE_FOUND)) {\n      return null\n    }\n\n    return <FiatLoadingBubble />\n  }\n\n  return (\n    <PriceImpactContainer>\n      {priceImpact && (\n        <>\n          <MouseoverTooltip text={t`The estimated difference between the USD values of input and output amounts.`}>\n            <PriceImpactRow>\n              <AlertTriangle color={priceImpact.priceImpactSeverity.color} size=\"16px\" />\n              <ThemedText.BodySmall style={{ color: priceImpact.priceImpactSeverity.color }} lineHeight=\"20px\">\n                (<Trans>{priceImpact.displayPercentage()}</Trans>)\n              </ThemedText.BodySmall>\n            </PriceImpactRow>\n          </MouseoverTooltip>\n        </>\n      )}\n      <ThemedText.BodySmall color=\"textTertiary\" lineHeight=\"20px\">\n        {`${ethNumberStandardFormatter(usdcValue?.toExact(), true)}`}\n      </ThemedText.BodySmall>\n    </PriceImpactContainer>\n  )\n}\n\nconst PENDING_BAG_STATUSES = [\n  BagStatus.FETCHING_ROUTE,\n  BagStatus.CONFIRMING_IN_WALLET,\n  BagStatus.FETCHING_FINAL_ROUTE,\n  BagStatus.PROCESSING_TRANSACTION,\n]\n\ninterface BagFooterProps {\n  setModalIsOpen: (open: boolean) => void\n  eventProperties: Record<string, unknown>\n}\n\nexport const BagFooter = ({ setModalIsOpen, eventProperties }: BagFooterProps) => {\n  const toggleWalletDrawer = useToggleAccountDrawer()\n  const theme = useTheme()\n  const { account, chainId, connector } = useWeb3React()\n  const connected = Boolean(account && chainId)\n  const totalEthPrice = useBagTotalEthPrice()\n  const { inputCurrency } = useTokenInput(({ inputCurrency }) => ({ inputCurrency }), shallow)\n  const setInputCurrency = useTokenInput((state) => state.setInputCurrency)\n  const defaultCurrency = useCurrency('ETH')\n  const inputCurrencyBalance = useTokenBalance(\n    account ?? undefined,\n    !!inputCurrency && inputCurrency.isToken ? inputCurrency : undefined\n  )\n  const {\n    isLocked: bagIsLocked,\n    bagStatus,\n    setBagExpanded,\n    setBagStatus,\n  } = useBag(\n    ({ isLocked, bagStatus, setBagExpanded, setBagStatus }) => ({\n      isLocked,\n      bagStatus,\n      setBagExpanded,\n      setBagStatus,\n    }),\n    shallow\n  )\n  const [tokenSelectorOpen, setTokenSelectorOpen] = useState(false)\n  const isPending = PENDING_BAG_STATUSES.includes(bagStatus)\n  const activeCurrency = inputCurrency ?? defaultCurrency\n  const usingPayWithAnyToken = !!inputCurrency && chainId === ChainId.MAINNET\n  const { universalRouterAddress, universalRouterAddressIsLoading } = useNftUniversalRouterAddress()\n\n  useSubscribeTransactionState(setModalIsOpen)\n  const fetchAssets = useFetchAssets()\n\n  const parsedOutputAmount = useMemo(() => {\n    return tryParseCurrencyAmount(formatEther(totalEthPrice.toString()), defaultCurrency ?? undefined)\n  }, [defaultCurrency, totalEthPrice])\n  const {\n    state: tradeState,\n    trade,\n    maximumAmountIn,\n    allowedSlippage,\n  } = useDerivedPayWithAnyTokenSwapInfo(usingPayWithAnyToken ? inputCurrency : undefined, parsedOutputAmount)\n  const allowance = usePermit2Allowance(\n    maximumAmountIn,\n    getURAddress(chainId, universalRouterAddress),\n    TradeFillType.Classic\n  )\n  const loadingAllowance = allowance.state === AllowanceState.LOADING || universalRouterAddressIsLoading\n  usePayWithAnyTokenSwap(trade, allowance, allowedSlippage)\n  const priceImpact = usePriceImpact(trade)\n\n  const fiatValueTradeInput = useStablecoinValue(trade?.inputAmount)\n  const fiatValueTradeOutput = useStablecoinValue(parsedOutputAmount)\n  const usdcValue = usingPayWithAnyToken ? fiatValueTradeInput : fiatValueTradeOutput\n\n  const { balance: balanceInEth } = useWalletBalance()\n  const sufficientBalance = useMemo(() => {\n    if (!connected || chainId !== ChainId.MAINNET) {\n      return undefined\n    }\n\n    if (inputCurrency) {\n      const inputAmount = trade?.inputAmount\n\n      if (!inputCurrencyBalance || !inputAmount) {\n        return undefined\n      }\n\n      return !inputCurrencyBalance.lessThan(inputAmount)\n    }\n\n    return parseEther(balanceInEth).gte(totalEthPrice)\n  }, [connected, chainId, inputCurrency, balanceInEth, totalEthPrice, trade?.inputAmount, inputCurrencyBalance])\n\n  useEffect(() => {\n    setBagStatus(BagStatus.ADDING_TO_BAG)\n  }, [inputCurrency, setBagStatus])\n\n  const switchChain = useSwitchChain()\n  const {\n    buttonText,\n    buttonTextColor,\n    disabled,\n    warningText,\n    warningTextColor,\n    helperText,\n    helperTextColor,\n    handleClick,\n    buttonColor,\n  } = useMemo((): BuyButtonStateData => {\n    if (connected && chainId !== ChainId.MAINNET) {\n      const handleClick = () => switchChain(connector, ChainId.MAINNET)\n      return getBuyButtonStateData(BuyButtonStates.NOT_SUPPORTED_CHAIN, theme, handleClick)\n    }\n\n    if (sufficientBalance === false) {\n      return getBuyButtonStateData(BuyButtonStates.INSUFFICIENT_BALANCE, theme)\n    }\n\n    if (bagStatus === BagStatus.WARNING) {\n      return getBuyButtonStateData(BuyButtonStates.ERROR, theme)\n    }\n\n    if (!connected) {\n      const handleClick = () => {\n        toggleWalletDrawer()\n        setBagExpanded({ bagExpanded: false })\n      }\n      return getBuyButtonStateData(BuyButtonStates.WALLET_NOT_CONNECTED, theme, handleClick)\n    }\n\n    if (bagStatus === BagStatus.FETCHING_FINAL_ROUTE || bagStatus === BagStatus.CONFIRMING_IN_WALLET) {\n      return getBuyButtonStateData(BuyButtonStates.IN_WALLET_CONFIRMATION, theme)\n    }\n\n    if (bagStatus === BagStatus.PROCESSING_TRANSACTION) {\n      return getBuyButtonStateData(BuyButtonStates.PROCESSING_TRANSACTION, theme)\n    }\n\n    if (usingPayWithAnyToken && tradeState !== TradeState.VALID) {\n      if (tradeState === TradeState.INVALID) {\n        return getBuyButtonStateData(BuyButtonStates.INVALID_TOKEN_ROUTE, theme)\n      }\n\n      if (tradeState === TradeState.NO_ROUTE_FOUND) {\n        return getBuyButtonStateData(BuyButtonStates.NO_TOKEN_ROUTE_FOUND, theme)\n      }\n\n      return getBuyButtonStateData(BuyButtonStates.FETCHING_TOKEN_ROUTE, theme)\n    }\n\n    const allowanceRequired = allowance.state === AllowanceState.REQUIRED\n    const handleClick = () => allowanceRequired && allowance.approveAndPermit()\n\n    if (loadingAllowance) {\n      return getBuyButtonStateData(BuyButtonStates.LOADING_ALLOWANCE, theme, handleClick)\n    }\n\n    if (allowanceRequired) {\n      if (allowance.isApprovalPending) {\n        return getBuyButtonStateData(BuyButtonStates.IN_WALLET_ALLOWANCE_APPROVAL, theme, handleClick)\n      } else if (allowance.isApprovalLoading) {\n        return getBuyButtonStateData(BuyButtonStates.PROCESSING_APPROVAL, theme, handleClick)\n      } else {\n        return getBuyButtonStateData(BuyButtonStates.REQUIRE_APPROVAL, theme, handleClick)\n      }\n    }\n\n    if (bagStatus === BagStatus.CONFIRM_QUOTE) {\n      return getBuyButtonStateData(BuyButtonStates.CONFIRM_UPDATED_PRICE, theme, fetchAssets)\n    }\n\n    if (priceImpact && priceImpact.priceImpactSeverity.type === 'error') {\n      return getBuyButtonStateData(\n        BuyButtonStates.PRICE_IMPACT_HIGH,\n        theme,\n        fetchAssets,\n        usingPayWithAnyToken,\n        priceImpact\n      )\n    }\n\n    return getBuyButtonStateData(BuyButtonStates.PAY, theme, fetchAssets, usingPayWithAnyToken)\n  }, [\n    connected,\n    chainId,\n    sufficientBalance,\n    bagStatus,\n    usingPayWithAnyToken,\n    tradeState,\n    loadingAllowance,\n    allowance,\n    priceImpact,\n    theme,\n    fetchAssets,\n    switchChain,\n    connector,\n    toggleWalletDrawer,\n    setBagExpanded,\n  ])\n\n  const traceEventProperties = {\n    usd_value: usdcValue?.toExact(),\n    using_erc20: !!inputCurrency,\n    ...eventProperties,\n  }\n\n  return (\n    <FooterContainer>\n      <Footer>\n        <FooterHeader gap=\"xs\">\n          <CurrencyRow>\n            <Column gap=\"xs\">\n              {isSupportedChain(chainId) && (\n                <>\n                  <ThemedText.SubHeaderSmall>\n                    <Trans>Pay with</Trans>\n                  </ThemedText.SubHeaderSmall>\n                  <CurrencyInput\n                    onClick={() => {\n                      if (!bagIsLocked) {\n                        setTokenSelectorOpen(true)\n                        sendAnalyticsEvent(NFTEventName.NFT_BUY_TOKEN_SELECTOR_CLICKED)\n                      }\n                    }}\n                  >\n                    <CurrencyLogo currency={activeCurrency} size=\"24px\" />\n                    <ThemedText.HeadlineSmall fontWeight={500} lineHeight=\"24px\">\n                      {activeCurrency?.symbol}\n                    </ThemedText.HeadlineSmall>\n                    <ChevronDown size={20} color={theme.textSecondary} />\n                  </CurrencyInput>\n                </>\n              )}\n            </Column>\n            <TotalColumn gap=\"xs\">\n              <ThemedText.SubHeaderSmall marginBottom=\"4px\">\n                <Trans>Total</Trans>\n              </ThemedText.SubHeaderSmall>\n              <InputCurrencyValue\n                usingPayWithAnyToken={usingPayWithAnyToken}\n                totalEthPrice={totalEthPrice}\n                activeCurrency={activeCurrency}\n                tradeState={tradeState}\n                trade={trade}\n              />\n            </TotalColumn>\n          </CurrencyRow>\n          <FiatValue\n            usdcValue={usdcValue}\n            priceImpact={priceImpact}\n            tradeState={tradeState}\n            usingPayWithAnyToken={usingPayWithAnyToken}\n          />\n        </FooterHeader>\n        <TraceEvent\n          events={[BrowserEvent.onClick]}\n          name={NFTEventName.NFT_BUY_BAG_PAY}\n          element={InterfaceElementName.NFT_BUY_BAG_PAY_BUTTON}\n          properties={{ ...traceEventProperties }}\n          shouldLogImpression={connected && !disabled}\n        >\n          <Warning color={warningTextColor}>{warningText}</Warning>\n          <Helper color={helperTextColor}>{helperText}</Helper>\n          <ActionButton\n            data-testid=\"nft-buy-button\"\n            onClick={handleClick}\n            disabled={disabled || isPending}\n            $backgroundColor={buttonColor}\n            $color={buttonTextColor}\n          >\n            {isPending && <Loader size=\"20px\" stroke=\"white\" />}\n            {buttonText}\n          </ActionButton>\n        </TraceEvent>\n      </Footer>\n      <CurrencySearchModal\n        isOpen={tokenSelectorOpen}\n        onDismiss={() => setTokenSelectorOpen(false)}\n        onCurrencySelect={(currency: Currency) => {\n          setInputCurrency(currency.isNative ? undefined : currency)\n          if (currency.isToken) {\n            sendAnalyticsEvent(NFTEventName.NFT_BUY_TOKEN_SELECTED, {\n              token_address: currency.address,\n              token_symbol: currency.symbol,\n            })\n          }\n        }}\n        selectedCurrency={activeCurrency ?? undefined}\n        onlyShowCurrenciesWithBalance={true}\n      />\n    </FooterContainer>\n  )\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { formatEther } from '@ethersproject/units'\nimport { useCurrency } from 'hooks/Tokens'\nimport { useStablecoinValue } from 'hooks/useStablecoinPrice'\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\nimport { BagItemStatus } from 'nft/types'\nimport { useMemo } from 'react'\n\nimport { useBag } from './useBag'\n\nexport function useBagTotalEthPrice(): BigNumber {\n  const itemsInBag = useBag((state) => state.itemsInBag)\n\n  return useMemo(() => {\n    const totalEthPrice = itemsInBag.reduce(\n      (total, item) =>\n        item.status !== BagItemStatus.UNAVAILABLE\n          ? total.add(\n              BigNumber.from(\n                item.asset.updatedPriceInfo ? item.asset.updatedPriceInfo.ETHPrice : item.asset.priceInfo.ETHPrice\n              )\n            )\n          : total,\n      BigNumber.from(0)\n    )\n\n    return totalEthPrice\n  }, [itemsInBag])\n}\n\nexport function useBagTotalUsdPrice(): string | undefined {\n  const totalEthPrice = useBagTotalEthPrice()\n  const defaultCurrency = useCurrency('ETH')\n\n  const parsedOutputAmount = useMemo(() => {\n    return tryParseCurrencyAmount(formatEther(totalEthPrice.toString()), defaultCurrency ?? undefined)\n  }, [defaultCurrency, totalEthPrice])\n\n  const usdcValue = useStablecoinValue(parsedOutputAmount)\n\n  return useMemo(() => {\n    return usdcValue?.toExact()\n  }, [usdcValue])\n}\n","import { BagStatus, TxStateType } from 'nft/types'\nimport { useEffect, useRef } from 'react'\nimport { shallow } from 'zustand/shallow'\n\nimport { useBag } from './useBag'\nimport { useSendTransaction } from './useSendTransaction'\n\nexport function useSubscribeTransactionState(setModalIsOpen: (isOpen: boolean) => void) {\n  const transactionState = useSendTransaction((state) => state.state)\n  const setTransactionState = useSendTransaction((state) => state.setState)\n  const transactionStateRef = useRef(transactionState)\n  const { setBagStatus, setLocked: setBagLocked } = useBag(\n    ({ setBagExpanded, setBagStatus, setLocked }) => ({\n      setBagExpanded,\n      setBagStatus,\n      setLocked,\n    }),\n    shallow\n  )\n\n  useEffect(() => {\n    useSendTransaction.subscribe((state) => (transactionStateRef.current = state.state))\n  }, [])\n\n  useEffect(() => {\n    if (transactionStateRef.current === TxStateType.Confirming) setBagStatus(BagStatus.PROCESSING_TRANSACTION)\n    if (transactionStateRef.current === TxStateType.Denied || transactionStateRef.current === TxStateType.Invalid) {\n      if (transactionStateRef.current === TxStateType.Invalid) {\n        setBagStatus(BagStatus.WARNING)\n      } else setBagStatus(BagStatus.CONFIRM_REVIEW)\n      setTransactionState(TxStateType.New)\n\n      setBagLocked(false)\n      setModalIsOpen(false)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [setBagLocked, setBagStatus, setModalIsOpen, setTransactionState, transactionStateRef.current])\n}\n","import { useWeb3React } from '@web3-react/core'\nimport { useNftRouteLazyQuery } from 'graphql/data/__generated__/types-and-hooks'\nimport { BagStatus } from 'nft/types'\nimport { buildNftTradeInputFromBagItems, recalculateBagUsingPooledAssets } from 'nft/utils'\nimport { getNextBagState, getPurchasableAssets } from 'nft/utils/bag'\nimport { buildRouteResponse } from 'nft/utils/nftRoute'\nimport { useCallback, useMemo } from 'react'\nimport { shallow } from 'zustand/shallow'\n\nimport { useBag } from './useBag'\nimport { usePurchaseAssets } from './usePurchaseAssets'\nimport { useTokenInput } from './useTokenInput'\n\nexport function useFetchAssets(): () => Promise<void> {\n  const { account } = useWeb3React()\n\n  const {\n    itemsInBag: uncheckedItemsInBag,\n    setBagStatus,\n    didOpenUnavailableAssets,\n    setDidOpenUnavailableAssets,\n    isLocked: bagIsLocked,\n    setLocked: setBagLocked,\n    setItemsInBag,\n  } = useBag(\n    ({\n      itemsInBag,\n      setBagStatus,\n      didOpenUnavailableAssets,\n      setDidOpenUnavailableAssets,\n      isLocked,\n      setLocked,\n      setItemsInBag,\n    }) => ({\n      itemsInBag,\n      setBagStatus,\n      didOpenUnavailableAssets,\n      setDidOpenUnavailableAssets,\n      isLocked,\n      setLocked,\n      setItemsInBag,\n    }),\n    shallow\n  )\n  const tokenTradeInput = useTokenInput((state) => state.tokenTradeInput)\n  const itemsInBag = useMemo(() => recalculateBagUsingPooledAssets(uncheckedItemsInBag), [uncheckedItemsInBag])\n\n  const [fetchGqlRoute] = useNftRouteLazyQuery()\n  const purchaseAssets = usePurchaseAssets()\n\n  const resetStateBeforeFetch = useCallback(() => {\n    didOpenUnavailableAssets && setDidOpenUnavailableAssets(false)\n    !bagIsLocked && setBagLocked(true)\n    setBagStatus(BagStatus.FETCHING_ROUTE)\n  }, [bagIsLocked, didOpenUnavailableAssets, setBagLocked, setBagStatus, setDidOpenUnavailableAssets])\n\n  return useCallback(async () => {\n    resetStateBeforeFetch()\n\n    fetchGqlRoute({\n      variables: {\n        senderAddress: account ? account : '',\n        nftTrades: buildNftTradeInputFromBagItems(itemsInBag),\n        tokenTrades: tokenTradeInput ? tokenTradeInput : undefined,\n      },\n      onCompleted: (data) => {\n        if (!data.nftRoute || !data.nftRoute.route) {\n          setBagStatus(BagStatus.ADDING_TO_BAG)\n          setBagLocked(false)\n          return\n        }\n\n        const wishAssetsToBuy = getPurchasableAssets(itemsInBag)\n        const purchasingWithErc20 = !!tokenTradeInput\n        const { route, routeResponse } = buildRouteResponse(data.nftRoute, purchasingWithErc20)\n\n        const { newBagItems, nextBagStatus } = getNextBagState(wishAssetsToBuy, route, purchasingWithErc20)\n\n        setItemsInBag(newBagItems)\n        setBagStatus(nextBagStatus)\n\n        if (nextBagStatus === BagStatus.CONFIRMING_IN_WALLET) {\n          purchaseAssets(routeResponse, wishAssetsToBuy, purchasingWithErc20)\n          setBagLocked(true)\n          return\n        }\n\n        setBagLocked(false)\n      },\n    })\n  }, [\n    account,\n    fetchGqlRoute,\n    itemsInBag,\n    purchaseAssets,\n    resetStateBeforeFetch,\n    setBagLocked,\n    setBagStatus,\n    setItemsInBag,\n    tokenTradeInput,\n  ])\n}\n","import { useWeb3React } from '@web3-react/core'\nimport { RouteResponse, UpdatedGenieAsset } from 'nft/types'\nimport { useCallback } from 'react'\nimport { shallow } from 'zustand/shallow'\n\nimport { useBag } from './useBag'\nimport { useSendTransaction } from './useSendTransaction'\nimport { useTransactionResponse } from './useTransactionResponse'\n\nexport function usePurchaseAssets(): (\n  routingData: RouteResponse,\n  assetsToBuy: UpdatedGenieAsset[],\n  purchasingWithErc20?: boolean\n) => Promise<void> {\n  const { provider } = useWeb3React()\n  const sendTransaction = useSendTransaction((state) => state.sendTransaction)\n  const setTransactionResponse = useTransactionResponse((state) => state.setTransactionResponse)\n\n  const {\n    setLocked: setBagLocked,\n    setBagExpanded,\n    reset: resetBag,\n  } = useBag(\n    ({ setLocked, setBagExpanded, reset }) => ({\n      setLocked,\n      setBagExpanded,\n      reset,\n    }),\n    shallow\n  )\n\n  return useCallback(\n    async (routingData: RouteResponse, assetsToBuy: UpdatedGenieAsset[], purchasingWithErc20 = false) => {\n      if (!provider) return\n\n      const purchaseResponse = await sendTransaction(\n        provider.getSigner(),\n        assetsToBuy,\n        routingData,\n        purchasingWithErc20\n      )\n\n      if (purchaseResponse) {\n        setBagLocked(false)\n        setTransactionResponse(purchaseResponse)\n        setBagExpanded({ bagExpanded: false })\n        resetBag()\n      }\n    },\n    [provider, resetBag, sendTransaction, setBagExpanded, setBagLocked, setTransactionResponse]\n  )\n}\n","import { BagItem, BagItemStatus, BagStatus, RoutingItem, UpdatedGenieAsset } from 'nft/types'\n\nimport { compareAssetsWithTransactionRoute } from './txRoute/combineItemsWithTxRoute'\nimport { filterUpdatedAssetsByState } from './updatedAssets'\n\nexport function getPurchasableAssets(itemsInBag: BagItem[]): UpdatedGenieAsset[] {\n  return itemsInBag.filter((item) => item.status !== BagItemStatus.UNAVAILABLE).map((item) => item.asset)\n}\n\nfunction createBagFromUpdatedAssets(\n  unavailable: UpdatedGenieAsset[],\n  priceChanged: UpdatedGenieAsset[],\n  unchanged: UpdatedGenieAsset[]\n): BagItem[] {\n  return [\n    ...unavailable.map((unavailableAsset) => ({\n      asset: unavailableAsset,\n      status: BagItemStatus.UNAVAILABLE,\n    })),\n    ...priceChanged.map((changedAsset) => ({\n      asset: changedAsset,\n      status: BagItemStatus.REVIEWING_PRICE_CHANGE,\n    })),\n    ...unchanged.map((unchangedAsset) => ({\n      asset: unchangedAsset,\n      status: BagItemStatus.REVIEWED,\n    })),\n  ]\n}\n\nfunction evaluateNextBagState(\n  hasAssets: boolean,\n  shouldReview: boolean,\n  hasAssetsInReview: boolean,\n  shouldRefetchCalldata: boolean\n): BagStatus {\n  if (!hasAssets) {\n    return BagStatus.ADDING_TO_BAG\n  }\n\n  if (shouldReview) {\n    if (hasAssetsInReview) {\n      return BagStatus.IN_REVIEW\n    }\n\n    return BagStatus.CONFIRM_REVIEW\n  }\n\n  if (shouldRefetchCalldata) {\n    return BagStatus.CONFIRM_QUOTE\n  }\n\n  return BagStatus.CONFIRMING_IN_WALLET\n}\n\nexport function getNextBagState(\n  wishAssetsToBuy: UpdatedGenieAsset[],\n  route: RoutingItem[],\n  purchasingWithErc20: boolean\n): { newBagItems: BagItem[]; nextBagStatus: BagStatus } {\n  const { hasPriceAdjustment, updatedAssets } = compareAssetsWithTransactionRoute(wishAssetsToBuy, route)\n  const shouldRefetchCalldata = hasPriceAdjustment && purchasingWithErc20\n\n  const { unchanged, priceChanged, unavailable } = filterUpdatedAssetsByState(updatedAssets)\n\n  const hasAssets = updatedAssets.length > 0\n  const hasAssetsInReview = priceChanged.length > 0\n  const hasUnavailableAssets = unavailable.length > 0\n  const shouldReview = hasAssetsInReview || hasUnavailableAssets\n\n  const newBagItems = createBagFromUpdatedAssets(unavailable, priceChanged, unchanged)\n  const nextBagStatus = evaluateNextBagState(hasAssets, shouldReview, hasAssetsInReview, shouldRefetchCalldata)\n\n  return { newBagItems, nextBagStatus }\n}\n","import { Currency, CurrencyAmount, NativeCurrency, Percent, Token, TradeType } from '@uniswap/sdk-core'\nimport useAutoSlippageTolerance from 'hooks/useAutoSlippageTolerance'\nimport { useDebouncedTrade } from 'hooks/useDebouncedTrade'\nimport { useMemo } from 'react'\nimport { ClassicTrade, RouterPreference, TradeState } from 'state/routing/types'\nimport { isClassicTrade } from 'state/routing/utils'\n\nexport default function useDerivedPayWithAnyTokenSwapInfo(\n  inputCurrency?: Currency,\n  parsedOutputAmount?: CurrencyAmount<NativeCurrency | Token>\n): {\n  state: TradeState\n  trade?: ClassicTrade\n  maximumAmountIn?: CurrencyAmount<Token>\n  allowedSlippage: Percent\n} {\n  const { state, trade } = useDebouncedTrade(\n    TradeType.EXACT_OUTPUT,\n    parsedOutputAmount,\n    inputCurrency ?? undefined,\n    RouterPreference.API\n  )\n\n  const allowedSlippage = useAutoSlippageTolerance(isClassicTrade(trade) ? trade : undefined)\n  const maximumAmountIn = useMemo(() => {\n    const maximumAmountIn = trade?.maximumAmountIn(allowedSlippage)\n    return maximumAmountIn?.currency.isToken ? (maximumAmountIn as CurrencyAmount<Token>) : undefined\n  }, [allowedSlippage, trade])\n\n  return useMemo(() => {\n    return {\n      state,\n      trade,\n      maximumAmountIn,\n      allowedSlippage,\n    }\n  }, [allowedSlippage, maximumAmountIn, state, trade])\n}\n","import { Percent } from '@uniswap/sdk-core'\nimport { PermitInput, TokenTradeRoutesInput, TokenTradeType } from 'graphql/data/__generated__/types-and-hooks'\nimport { Allowance } from 'hooks/usePermit2Allowance'\nimport { buildAllTradeRouteInputs } from 'nft/utils/tokenRoutes'\nimport { useEffect } from 'react'\nimport { InterfaceTrade } from 'state/routing/types'\nimport { isClassicTrade } from 'state/routing/utils'\n\nimport { useTokenInput } from './useTokenInput'\n\nexport default function usePayWithAnyTokenSwap(\n  trade?: InterfaceTrade | undefined,\n  allowance?: Allowance,\n  allowedSlippage?: Percent\n) {\n  const setTokenTradeInput = useTokenInput((state) => state.setTokenTradeInput)\n  const hasRoutes = isClassicTrade(trade) && trade.routes\n  const hasInputAmount = !!trade && !!trade.inputAmount && trade.inputAmount.currency.isToken\n  const hasAllowance = !!allowedSlippage && !!allowance\n\n  useEffect(() => {\n    if (!hasRoutes || !hasInputAmount || !hasAllowance) {\n      setTokenTradeInput(undefined)\n      return\n    }\n\n    const slippage = parseInt(allowedSlippage.multiply(100).toSignificant(2))\n\n    const { mixedTokenTradeRouteInputs, v2TokenTradeRouteInputs, v3TokenTradeRouteInputs } =\n      buildAllTradeRouteInputs(trade)\n\n    const routes: TokenTradeRoutesInput = {\n      mixedRoutes: mixedTokenTradeRouteInputs,\n      tradeType: TokenTradeType.ExactOutput,\n      v2Routes: v2TokenTradeRouteInputs,\n      v3Routes: v3TokenTradeRouteInputs,\n    }\n\n    const permitInput: PermitInput | undefined =\n      'permitSignature' in allowance && allowance.permitSignature\n        ? {\n            details: {\n              amount: allowance.permitSignature.details.amount.toString(),\n              expiration: allowance.permitSignature.details.expiration.toString(),\n              nonce: allowance.permitSignature.details.nonce.toString(),\n              token: allowance.permitSignature.details.token,\n            },\n            sigDeadline: allowance.permitSignature.sigDeadline.toString(),\n            signature: allowance.permitSignature.signature,\n            spender: allowance.permitSignature.spender,\n          }\n        : undefined\n\n    setTokenTradeInput({\n      permit: permitInput,\n      routes,\n      slippageToleranceBasisPoints: slippage,\n      tokenAmount: {\n        amount: trade.inputAmount.quotient.toString(),\n        token: {\n          address: trade.inputAmount.currency.address,\n          chainId: trade.inputAmount.currency.chainId,\n          decimals: trade.inputAmount.currency.decimals,\n          isNative: trade.inputAmount.currency.isNative,\n        },\n      },\n    })\n  }, [allowance, allowedSlippage, hasAllowance, hasInputAmount, hasRoutes, setTokenTradeInput, trade])\n}\n","import { Percent } from '@uniswap/sdk-core'\nimport { useMemo } from 'react'\nimport { ClassicTrade } from 'state/routing/types'\nimport { useTheme } from 'styled-components'\nimport { computeRealizedPriceImpact, getPriceImpactWarning } from 'utils/prices'\n\nexport interface PriceImpact {\n  priceImpactSeverity: PriceImpactSeverity\n  displayPercentage(): string\n}\n\ninterface PriceImpactSeverity {\n  type: 'warning' | 'error'\n  color: string\n}\n\nexport function usePriceImpact(trade?: ClassicTrade): PriceImpact | undefined {\n  const theme = useTheme()\n\n  return useMemo(() => {\n    const marketPriceImpact = trade ? computeRealizedPriceImpact(trade) : undefined\n    const priceImpactWarning = marketPriceImpact ? getPriceImpactWarning(marketPriceImpact) : undefined\n    const warningColor =\n      priceImpactWarning === 'error'\n        ? theme.accentCritical\n        : priceImpactWarning === 'warning'\n        ? theme.accentWarning\n        : undefined\n\n    return marketPriceImpact && priceImpactWarning && warningColor\n      ? {\n          priceImpactSeverity: {\n            type: priceImpactWarning,\n            color: warningColor,\n          },\n          displayPercentage: () => toHumanReadablePercent(marketPriceImpact),\n        }\n      : undefined\n  }, [theme.accentCritical, theme.accentWarning, trade])\n}\n\nfunction toHumanReadablePercent(priceImpact: Percent): string {\n  const sign = priceImpact.lessThan(0) ? '+' : ''\n  const exactFloat = (Number(priceImpact.numerator) / Number(priceImpact.denominator)) * 100\n  if (exactFloat < 0.005) {\n    return '0.00%'\n  }\n  const number = parseFloat(priceImpact.multiply(-1)?.toFixed(2))\n  return `${sign}${number}%`\n}\n","import { Box } from 'nft/components/Box'\nimport styled, { keyframes } from 'styled-components'\n\nconst dash = keyframes`\n  0% {\n    stroke-dashoffset: 1000;\n  }\n  100% {\n    stroke-dashoffset: 0;\n  }\n`\nconst Circle = styled.circle`\n  stroke-dasharray: 1000;\n  stroke-dashoffset: 0;\n  -webkit-animation: ${dash} linear;\n  animation: ${dash} linear;\n  animation-duration: 160s;\n  stroke: ${({ theme }) => theme.accentAction};\n`\nexport const TimedLoader = () => {\n  const stroke = 1.5\n\n  return (\n    <Box display=\"flex\" position=\"absolute\">\n      <svg height=\"18px\" width=\"18px\">\n        <Circle\n          strokeWidth={`${stroke}`}\n          strokeLinecap=\"round\"\n          style={{\n            transform: 'rotate(90deg)',\n            transformOrigin: '50% 50%',\n          }}\n          fill=\"transparent\"\n          r=\"8px\"\n          cx=\"9px\"\n          cy=\"9px\"\n        />\n      </svg>\n    </Box>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport Row from 'components/Row'\nimport { getHeightFromAspectRatio, getMediaAspectRatio, handleUniformAspectRatio } from 'nft/components/card/utils'\nimport { UniformAspectRatio, UniformAspectRatios } from 'nft/types'\nimport { ReactNode, useEffect, useRef, useState } from 'react'\nimport { Pause, Play } from 'react-feather'\nimport styled from 'styled-components'\nimport { BREAKPOINTS, ThemedText } from 'theme'\nimport { colors } from 'theme/colors'\n\nconst StyledImageContainer = styled.div<{ isDisabled?: boolean }>`\n  position: relative;\n  pointer-events: auto;\n  &:hover {\n    opacity: ${({ isDisabled, theme }) => (isDisabled ? theme.opacity.disabled : theme.opacity.enabled)};\n  }\n  cursor: ${({ isDisabled }) => (isDisabled ? 'default' : 'pointer')};\n`\n\nexport const MediaContainer = ({ isDisabled, children }: { isDisabled: boolean; children: ReactNode }) => {\n  return <StyledImageContainer isDisabled={isDisabled}>{children}</StyledImageContainer>\n}\n\ninterface ImageProps {\n  src?: string\n  uniformAspectRatio?: UniformAspectRatio\n  setUniformAspectRatio?: (uniformAspectRatio: UniformAspectRatio) => void\n  renderedHeight?: number\n  setRenderedHeight?: (renderedHeight: number | undefined) => void\n}\n\nconst StyledMediaContainer = styled(Row)`\n  overflow: hidden;\n  border-top-left-radius: 12px;\n  border-top-right-radius: 12px;\n`\n\nexport const StyledImage = styled.img<{\n  imageLoading: boolean\n  $aspectRatio?: string\n  $hidden?: boolean\n}>`\n  width: 100%;\n  aspect-ratio: ${({ $aspectRatio }) => $aspectRatio};\n  transition: ${({ theme }) => `${theme.transition.duration.medium} ${theme.transition.timing.ease} transform`};\n  will-change: transform;\n  object-fit: contain;\n  visibility: ${({ $hidden }) => ($hidden ? 'hidden' : 'visible')};\n  background: ${({ theme, imageLoading }) =>\n    imageLoading && `linear-gradient(270deg, ${theme.backgroundOutline} 0%, ${theme.backgroundSurface} 100%)`};\n`\n\nexport const NftImage = ({\n  src,\n  uniformAspectRatio = UniformAspectRatios.square,\n  setUniformAspectRatio,\n  renderedHeight,\n  setRenderedHeight,\n}: ImageProps) => {\n  const [noContent, setNoContent] = useState(!src)\n  const [loaded, setLoaded] = useState(false)\n\n  if (noContent) {\n    return <NoContentContainer height={getHeightFromAspectRatio(uniformAspectRatio, renderedHeight)} />\n  }\n\n  return (\n    <StyledMediaContainer>\n      <StyledImage\n        src={src}\n        $aspectRatio={getMediaAspectRatio(uniformAspectRatio, setUniformAspectRatio)}\n        imageLoading={!loaded}\n        draggable={false}\n        onError={() => setNoContent(true)}\n        onLoad={(e) => {\n          handleUniformAspectRatio(uniformAspectRatio, e, setUniformAspectRatio, renderedHeight, setRenderedHeight)\n          setLoaded(true)\n        }}\n      />\n    </StyledMediaContainer>\n  )\n}\n\ninterface MediaProps {\n  isAudio?: boolean\n  mediaSrc?: string\n  tokenId?: string\n  shouldPlay: boolean\n  setCurrentTokenPlayingMedia: (tokenId: string | undefined) => void\n}\n\nconst PlaybackButton = styled.div<{ pauseButton?: boolean }>`\n  display: ${({ pauseButton }) => (pauseButton ? 'block' : 'none')};\n  color: ${({ theme }) => theme.accentAction};\n  position: absolute;\n  height: 40px;\n  width: 40px;\n  z-index: 1;\n  margin-left: calc(100% - 50px);\n  transform: translateY(-76px);\n\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\n    display: block;\n  }\n\n  ${StyledImageContainer}:hover & {\n    display: block;\n  }\n`\n\nconst StyledVideo = styled.video<{\n  $aspectRatio?: string\n}>`\n  width: 100%;\n  aspect-ratio: ${({ $aspectRatio }) => $aspectRatio};\n`\n\nconst StyledInnerMediaContainer = styled(Row)`\n  position: absolute;\n  left: 0px;\n  top: 0px;\n`\n\nconst StyledAudio = styled.audio`\n  width: 100%;\n  height: 100%;\n`\n\nexport const NftPlayableMedia = ({\n  isAudio,\n  src,\n  mediaSrc,\n  tokenId,\n  uniformAspectRatio = UniformAspectRatios.square,\n  setUniformAspectRatio,\n  renderedHeight,\n  setRenderedHeight,\n  shouldPlay,\n  setCurrentTokenPlayingMedia,\n}: MediaProps & ImageProps) => {\n  const mediaRef = useRef<HTMLVideoElement>(null)\n  const [noContent, setNoContent] = useState(!src)\n  const [imageLoaded, setImageLoaded] = useState(false)\n\n  useEffect(() => {\n    if (shouldPlay && mediaRef.current) {\n      mediaRef.current.play()\n    } else if (!shouldPlay && mediaRef.current) {\n      mediaRef.current.pause()\n    }\n  }, [shouldPlay])\n\n  if (noContent) {\n    return <NoContentContainer height={getHeightFromAspectRatio(uniformAspectRatio, renderedHeight)} />\n  }\n\n  return (\n    <>\n      <StyledMediaContainer>\n        <StyledImage\n          src={src}\n          $aspectRatio={getMediaAspectRatio(uniformAspectRatio, setUniformAspectRatio)}\n          imageLoading={!imageLoaded}\n          draggable={false}\n          onError={() => setNoContent(true)}\n          onLoad={(e) => {\n            handleUniformAspectRatio(uniformAspectRatio, e, setUniformAspectRatio, renderedHeight, setRenderedHeight)\n            setImageLoaded(true)\n          }}\n          $hidden={shouldPlay && !isAudio}\n        />\n      </StyledMediaContainer>\n      {shouldPlay ? (\n        <>\n          <PlaybackButton pauseButton={true}>\n            <Pause\n              size=\"24px\"\n              onClick={(e) => {\n                e.preventDefault()\n                e.stopPropagation()\n                setCurrentTokenPlayingMedia(undefined)\n              }}\n            />\n          </PlaybackButton>\n          <StyledInnerMediaContainer>\n            {isAudio ? (\n              <StyledAudio\n                ref={mediaRef}\n                onEnded={(e) => {\n                  e.preventDefault()\n                  setCurrentTokenPlayingMedia(undefined)\n                }}\n              >\n                <source src={mediaSrc} />\n              </StyledAudio>\n            ) : (\n              <StyledVideo\n                $aspectRatio={getMediaAspectRatio(uniformAspectRatio, setUniformAspectRatio)}\n                ref={mediaRef}\n                onEnded={(e) => {\n                  e.preventDefault()\n                  setCurrentTokenPlayingMedia(undefined)\n                }}\n                loop\n                playsInline\n              >\n                <source src={mediaSrc} />\n              </StyledVideo>\n            )}\n          </StyledInnerMediaContainer>\n        </>\n      ) : (\n        <PlaybackButton>\n          <Play\n            size=\"24px\"\n            onClick={(e) => {\n              e.preventDefault()\n              e.stopPropagation()\n              setCurrentTokenPlayingMedia(tokenId)\n            }}\n          />\n        </PlaybackButton>\n      )}\n    </>\n  )\n}\n\nconst NoContentContainerBackground = styled.div<{ $height?: number }>`\n  position: relative;\n  width: 100%;\n  height: ${({ $height }) => ($height ? `${$height}px` : 'auto')};\n  padding-top: 100%;\n  background: ${({ theme }) =>\n    `linear-gradient(90deg, ${theme.backgroundSurface} 0%, ${theme.backgroundInteractive} 95.83%)`};\n`\n\nconst NoContentText = styled(ThemedText.BodyPrimary)`\n  position: absolute;\n  text-align: center;\n  left: 50%;\n  top: 50%;\n  transform: translate3d(-50%, -50%, 0);\n  color: ${colors.gray500};\n`\n\nconst NoContentContainer = ({ height }: { height?: number }) => (\n  <>\n    <NoContentContainerBackground $height={height}>\n      <NoContentText>\n        <Trans>Content not</Trans>\n        <br />\n        <Trans>available yet</Trans>\n      </NoContentText>\n    </NoContentContainerBackground>\n  </>\n)\n","import { Trans } from '@lingui/macro'\nimport Row from 'components/Row'\nimport { MouseoverTooltip } from 'components/Tooltip'\nimport { NftStandard } from 'graphql/data/__generated__/types-and-hooks'\nimport { getMarketplaceIcon } from 'nft/components/card/utils'\nimport { CollectionSelectedAssetIcon } from 'nft/components/icons'\nimport { Markets } from 'nft/types'\nimport { putCommas } from 'nft/utils'\nimport { AlertTriangle, Check, Tag } from 'react-feather'\nimport styled from 'styled-components'\nimport { ThemedText } from 'theme'\n\nconst StyledMarketplaceContainer = styled.div<{ isText?: boolean }>`\n  position: absolute;\n  display: flex;\n  top: 12px;\n  left: 12px;\n  height: 32px;\n  width: ${({ isText }) => (isText ? 'auto' : '32px')};\n  padding: ${({ isText }) => (isText ? '0px 8px' : '0px')};\n  background: rgba(93, 103, 133, 0.24);\n  color: ${({ theme }) => theme.accentTextLightPrimary};\n  justify-content: center;\n  align-items: center;\n  border-radius: 32px;\n  z-index: 2;\n`\n\nconst ListPriceRowContainer = styled(Row)`\n  gap: 6px;\n  color: ${({ theme }) => theme.accentTextLightPrimary};\n  font-size: 14px;\n  font-weight: 600;\n  line-height: 16px;\n  text-shadow: 1px 1px 3px rgba(51, 53, 72, 0.54);\n`\n\nexport const MarketplaceContainer = ({\n  isSelected,\n  marketplace,\n  tokenType,\n  listedPrice,\n  hidePrice,\n}: {\n  isSelected: boolean\n  marketplace?: Markets\n  tokenType?: NftStandard\n  listedPrice?: string\n  hidePrice?: boolean\n}) => {\n  if (isSelected) {\n    if (!marketplace) {\n      return (\n        <StyledMarketplaceContainer>\n          <Check size={20} />\n        </StyledMarketplaceContainer>\n      )\n    }\n\n    return (\n      <StyledMarketplaceContainer>\n        <CollectionSelectedAssetIcon width=\"20px\" height=\"20px\" viewBox=\"0 0 20 20\" />\n      </StyledMarketplaceContainer>\n    )\n  }\n\n  if (listedPrice && !hidePrice) {\n    return (\n      <StyledMarketplaceContainer isText={true}>\n        <ListPriceRowContainer>\n          <Tag size={20} />\n          {listedPrice} ETH\n        </ListPriceRowContainer>\n      </StyledMarketplaceContainer>\n    )\n  }\n\n  if (!marketplace || tokenType === NftStandard.Erc1155) {\n    return null\n  }\n\n  return <StyledMarketplaceContainer>{getMarketplaceIcon(marketplace)}</StyledMarketplaceContainer>\n}\n\nconst SuspiciousIcon = styled(AlertTriangle)`\n  width: 16px;\n  height: 16px;\n  color: ${({ theme }) => theme.accentFailure};\n`\n\ninterface RankingProps {\n  provider: { url?: string; rank?: number }\n}\n\nconst RarityLogoContainer = styled(Row)`\n  margin-right: 8px;\n  width: 16px;\n`\n\nconst RarityText = styled(ThemedText.BodySmall)`\n  display: flex;\n`\n\nconst RarityInfo = styled(ThemedText.Caption)`\n  flex-shrink: 0;\n  color: ${({ theme }) => theme.textSecondary};\n  background: ${({ theme }) => theme.backgroundInteractive};\n  padding: 4px 6px;\n  border-radius: 4px;\n  font-weight: 700 !important;\n  line-height: 12px;\n  text-align: right;\n  cursor: pointer;\n`\n\nexport const Ranking = ({ provider }: RankingProps) => {\n  if (!provider.rank) {\n    return null\n  }\n\n  return (\n    <RarityInfo>\n      <MouseoverTooltip\n        text={\n          <Row>\n            <RarityLogoContainer>\n              <img src=\"/nft/svgs/gem.svg\" width={16} height={16} />\n            </RarityLogoContainer>\n            <RarityText>Ranking by Rarity Sniper</RarityText>\n          </Row>\n        }\n        placement=\"top\"\n      >\n        # {putCommas(provider.rank)}\n      </MouseoverTooltip>\n    </RarityInfo>\n  )\n}\n\nconst SuspiciousIconContainer = styled(Row)`\n  flex-shrink: 0;\n`\n\nexport const Suspicious = () => {\n  return (\n    <MouseoverTooltip\n      text={\n        <ThemedText.BodySmall>\n          <Trans>Blocked on OpenSea</Trans>\n        </ThemedText.BodySmall>\n      }\n      placement=\"top\"\n    >\n      <SuspiciousIconContainer>\n        <SuspiciousIcon />\n      </SuspiciousIconContainer>\n    </MouseoverTooltip>\n  )\n}\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#H4sIAAAAAAAAE5y9W28kSZJm+b6/IoBEAd1AR4Fufs952czKSuw+LGaBXmCf/X6/0O/kYv77OiMYES5HRU0/8anprkZQjlJF3UzP53Q18vfDbnf68v/9b1++fP16mF07k/eX379cBof/+Pp1NtkuJl9Hu/XucPw6GI0m29Pfg8X6fJj85/94qG+U6/97Nz0Zpqph/hidFrutKW8Wy5Pv0KpB/vt8/6/j0dS33frJbb9ejBan/3e+ONmuO279bLcem7Lu719+q176vXbz8V97LnxZ7NYT20XfLRwORqvZYXfejv9e7wanxXZmoEEB+j+3p8lhcF+2i21pWOD+r934vLbIqID8z/NpvdhaZlxg/vt8mA5GlpkUmD/v/9f4sNsbaOpCm914sHbrZ279cTI4jOZ//vxWBpnXIF7vC7/+NDhN/udlclgP3v6P3f2/DbN0mdPkdvq/D4vN4PBmqlfZ6v+ejHbbMevX2fr/Z3I4LVi+ccs/lvK/54Px7mqKt79/+ViBweHr7DAYL+533n9U3ZfxZPZfX377q/FX+68/v7z84/5//935+M+XxsvLPwy/+7h5WlW3mjz+6/73L4fZcPAfL//15fv/b9yxLy/725fW/X8a1f72WP16H+PvP6p/NXuP/3r4/ctwfX9JH//t+FHZ/vjP47+e7v/6rz//9e+//vX4r+f7v3b//vjP479efv9yOgy2x/3gcO/18SvX379sd1vTxu3j2/1t+Lf7P7X+1av+/vPxX9/v//rHX3/+6++/my9m3335GOHPRqP3b/PP9/34t3bzZdqw1ZW7EI3mxz//1e10zPds3LfP3/797z+bja755/su+dufjW7/xY7d+fiW//r73/2/zD9/bH6tlz859n33+63xR7/dtoP0P8b+68/e33+Yfx58LPUf3T//bQcZfn+1On+b16Ux+ph379//skvYuO85v/1V/dX/t12qyce37P3rxb64jenHinf++Ptfdib3/eG3fu+Pxr/svO97wG+93n3a9lsuPubd7b38Yavvd/NvnT+77X7L/PPqYwX/6nR75uJrrD/++aX9R9e+aJtvC9v6o2Nfnfv99luz2fyr3Tf//O026jerlv3n/cfL8GdVNTvmnz9umEaz8Udlm7/fMb+9/LvRruy8P26al78ajYZdwY+75qX3cr84zT+fP2/dqt3+ry+//tfLPxuV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\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nimport \"src/nft/css/common.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/common.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xMjdsOGhkYTo6YmVmb3JlIHsKICBjb250ZW50OiAiIjsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgaW5zZXQ6IC0xcHg7CiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDkxLjQ2ZGVnLCAjNDY3M0ZBIDAlLCAjOTY0NkZBIDEwMC4xMyUpIGJvcmRlci1ib3g7CiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDsKICAtd2Via2l0LW1hc2s6IGxpbmVhci1ncmFkaWVudCgjZmZmIDAgMCkgcGFkZGluZy1ib3gsIGxpbmVhci1ncmFkaWVudCgjZmZmIDAgMCk7OwogIC13ZWJraXQtbWFzay1jb21wb3NpdGU6IHhvcjs7CiAgbWFzay1jb21wb3NpdGU6IGV4Y2x1ZGU7CiAgYm9yZGVyLXN0eWxlOiBzb2xpZDsKICBib3JkZXItd2lkdGg6IDFweDsKICBib3JkZXItcmFkaXVzOiBpbmhlcml0OwogIHBvaW50ZXItZXZlbnRzOiBub25lOwp9Ci5fMTI3bDhoZGI6OmJlZm9yZSB7CiAgb3BhY2l0eTogMDsKICAtd2Via2l0LXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICAtbW96LXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICAtbXMtdHJhbnNpdGlvbjogb3BhY2l0eSAwLjI1cyBlYXNlOwogIHRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZS1vdXQ7Cn0KLl8xMjdsOGhkYjpob3Zlcjo6YmVmb3JlIHsKICBvcGFjaXR5OiAxOwp9Ci5fMTI3bDhoZGQ6aG92ZXIgewogIGJhY2tncm91bmQ6IHZhcigtLXJndzZlejF3KTsKfQ==\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nimport \"src/nft/components/bag/BagRow.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/bag/BagRow.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xa3Vhd2MxIHsKICBtYXJnaW4tbGVmdDogLTRweDsKICBtYXJnaW4tcmlnaHQ6IC00cHg7Cn0KLl8xa3Vhd2MxOmhvdmVyIHsKICBiYWNrZ3JvdW5kOiB2YXIoLS1nZW5pZS1jb2xvcnMtc3RhdGVPdmVybGF5SG92ZXIpOwp9Ci5fMWt1YXdjNyB7CiAgZmlsdGVyOiBncmF5c2NhbGUoMTAwJSk7Cn0KLl8xa3Vhd2M5IHsKICBsaW5lLWhlaWdodDogMjRweDsKfQouXzFrdWF3Y2IgewogIGxpbmUtaGVpZ2h0OiAyNHB4Owp9\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nexport var assetName = '_1kuawcb rgw6ezb1 rgw6ezcv rgw6ez7m3 rgw6ez45v rgw6ez45p';\nexport var bagRow = '_1kuawc1 rgw6ez2dv rgw6ez2jd rgw6ez2oj rgw6ez281 rgw6ez4ej rgw6ez3tj rgw6ez79z rgw6ez1dv rgw6ez7bj';\nexport var bagRowImage = 'rgw6ez14d rgw6ez1bd rgw6ez49p rgw6ez7bb';\nexport var bagRowPrice = '_1kuawc9 rgw6ez3sv rgw6ezb1 rgw6ezd1 rgw6ez3xv';\nexport var collectionName = 'rgw6ezcp rgw6ezav rgw6eze7 rgw6ez7m3 rgw6ez45p rgw6ez45v rgw6ez4ep';\nexport var grayscaleImage = '_1kuawc7';\nexport var icon = 'rgw6ez3xv';\nexport var priceChangeColumn = 'rgw6ez2p7 rgw6ez28p rgw6ezlj rgw6ezr1 rgw6ez4sj rgw6ez3t7 rgw6ez4ej rgw6ez7ab rgw6ez7jr rgw6ez547 rgw6ez5op rgw6ez1dv rgw6ez79z';\nexport var priceChangeRow = 'rgw6ezcp rgw6ezav rgw6eze7 rgw6ez4cd rgw6ez3sv';\nexport var unavailableAssetsContainer = 'rgw6ez2p7 rgw6ez28p rgw6ezlj rgw6ezr1 rgw6ez4sj rgw6ez3tj rgw6ez4ej rgw6ez7ab rgw6ez7jr rgw6ez547 rgw6ez60j rgw6ez5op rgw6ez1dv';","import { BigNumber } from '@ethersproject/bignumber'\nimport { formatEther } from '@ethersproject/units'\nimport clsx from 'clsx'\nimport { ButtonEmphasis, ButtonSize, ThemeButton } from 'components/Button'\nimport { TimedLoader } from 'nft/components/bag/TimedLoader'\nimport { Box } from 'nft/components/Box'\nimport { Suspicious } from 'nft/components/card/icons'\nimport { Column, Row } from 'nft/components/Flex'\nimport {\n  ChevronDownBagIcon,\n  ChevronUpBagIcon,\n  CircularCloseIcon,\n  CloseTimerIcon,\n  SquareArrowDownIcon,\n  SquareArrowUpIcon,\n  VerifiedIcon,\n} from 'nft/components/icons'\nimport { bodySmall } from 'nft/css/common.css'\nimport { loadingBlock } from 'nft/css/loading.css'\nimport { GenieAsset, UpdatedGenieAsset } from 'nft/types'\nimport { ethNumberStandardFormatter, formatWeiToDecimal, getAssetHref } from 'nft/utils'\nimport { MouseEvent, useCallback, useEffect, useReducer, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\nimport * as styles from './BagRow.css'\n\nexport const RemoveButton = styled(ThemeButton)`\n  border-radius: 12px;\n  font-size: 14px;\n  line-height: 16px;\n  margin-left: 16px;\n  padding: 12px 14px;\n`\nconst ReviewButton = styled(ThemeButton)`\n  border-radius: 12px;\n  flex: 1 1 auto;\n  font-size: 14px;\n  padding: 8px;\n  width: 50%;\n`\nconst RemoveAssetOverlay = styled.div`\n  position: absolute;\n  display: block;\n  right: -11px;\n  top: -11px;\n  z-index: 1;\n  transition: 250ms;\n  width: 45px;\n  height: 45px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\n\nexport const RemoveAssetButton = ({ onClick }: { onClick: (e: MouseEvent<HTMLDivElement>) => void }) => (\n  <RemoveAssetOverlay onClick={onClick}>\n    <CircularCloseIcon />\n  </RemoveAssetOverlay>\n)\n\nconst NoContentContainer = () => (\n  <Box position=\"relative\" background=\"loadingBackground\" className={styles.bagRowImage}>\n    <Box\n      position=\"absolute\"\n      textAlign=\"center\"\n      left=\"1/2\"\n      top=\"1/2\"\n      style={{ transform: 'translate3d(-50%, -50%, 0)' }}\n      color=\"gray500\"\n      fontSize=\"12\"\n      fontWeight=\"normal\"\n    >\n      Image\n      <br />\n      not\n      <br />\n      available\n    </Box>\n  </Box>\n)\n\ninterface BagRowProps {\n  asset: UpdatedGenieAsset\n  usdPrice?: number\n  removeAsset: (assets: GenieAsset[]) => void\n  showRemove?: boolean\n  grayscale?: boolean\n  isMobile: boolean\n}\n\nexport const BagRow = ({ asset, usdPrice, removeAsset, showRemove, grayscale, isMobile }: BagRowProps) => {\n  const [loadedImage, setImageLoaded] = useState(false)\n  const [noImageAvailable, setNoImageAvailable] = useState(!asset.smallImageUrl)\n\n  const [cardHovered, setCardHovered] = useState(false)\n  const handleMouseEnter = useCallback(() => setCardHovered(true), [])\n  const handleMouseLeave = useCallback(() => setCardHovered(false), [])\n  const showRemoveButton = Boolean(showRemove && cardHovered && !isMobile)\n\n  const assetEthPrice = asset.updatedPriceInfo ? asset.updatedPriceInfo.ETHPrice : asset.priceInfo.ETHPrice\n  const assetEthPriceFormatted = formatWeiToDecimal(assetEthPrice)\n  const assetUSDPriceFormatted = ethNumberStandardFormatter(\n    usdPrice ? parseFloat(formatEther(assetEthPrice)) * usdPrice : usdPrice,\n    true\n  )\n\n  const handleRemoveClick = useCallback(\n    (e: MouseEvent<HTMLElement>) => {\n      e.preventDefault()\n      e.stopPropagation()\n      removeAsset([asset])\n    },\n    [asset, removeAsset]\n  )\n\n  return (\n    <Link to={getAssetHref(asset)} style={{ textDecoration: 'none' }}>\n      <Row className={styles.bagRow} onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}>\n        <Box position=\"relative\" display=\"flex\">\n          {showRemove && isMobile && <RemoveAssetButton onClick={handleRemoveClick} />}\n          {!noImageAvailable && (\n            <Box\n              as=\"img\"\n              src={asset.smallImageUrl}\n              alt={asset.name}\n              className={clsx(styles.bagRowImage, grayscale && !cardHovered && styles.grayscaleImage)}\n              onLoad={() => {\n                setImageLoaded(true)\n              }}\n              onError={() => {\n                setNoImageAvailable(true)\n              }}\n              visibility={loadedImage ? 'visible' : 'hidden'}\n            />\n          )}\n          {!loadedImage && <Box position=\"absolute\" className={`${styles.bagRowImage} ${loadingBlock}`} />}\n          {noImageAvailable && <NoContentContainer />}\n        </Box>\n        <Column overflow=\"hidden\" width=\"full\" color={grayscale ? 'textSecondary' : 'textPrimary'}>\n          <Row overflow=\"hidden\" width=\"full\" whiteSpace=\"nowrap\">\n            <Box className={styles.assetName}>{asset.name ?? `#${asset.tokenId}`}</Box>\n            {asset.susFlag && <Suspicious />}\n          </Row>\n          <Row overflow=\"hidden\" whiteSpace=\"nowrap\" gap=\"2\">\n            <Box className={styles.collectionName}>{asset.collectionName}</Box>\n            {asset.collectionIsVerified && <VerifiedIcon className={styles.icon} />}\n          </Row>\n        </Column>\n        {showRemoveButton && (\n          <RemoveButton onClick={handleRemoveClick} emphasis={ButtonEmphasis.medium} size={ButtonSize.medium}>\n            Remove\n          </RemoveButton>\n        )}\n        {(!showRemoveButton || isMobile) && (\n          <Column flexShrink=\"0\" alignItems=\"flex-end\">\n            <Box className={styles.bagRowPrice}>\n              {assetEthPriceFormatted}\n              &nbsp;ETH\n            </Box>\n            <Box className={styles.collectionName}>{assetUSDPriceFormatted}</Box>\n          </Column>\n        )}\n      </Row>\n    </Link>\n  )\n}\n\ninterface PriceChangeBagRowProps {\n  asset: UpdatedGenieAsset\n  usdPrice?: number\n  markAssetAsReviewed: (asset: UpdatedGenieAsset, toKeep: boolean) => void\n  top?: boolean\n  isMobile: boolean\n}\n\nexport const PriceChangeBagRow = ({ asset, usdPrice, markAssetAsReviewed, top, isMobile }: PriceChangeBagRowProps) => {\n  const isPriceIncrease = BigNumber.from(asset.updatedPriceInfo?.ETHPrice).gt(BigNumber.from(asset.priceInfo.ETHPrice))\n  const handleRemove = useCallback(\n    (e: MouseEvent<HTMLButtonElement>) => {\n      e.preventDefault()\n      e.stopPropagation()\n      const toKeep = false\n      markAssetAsReviewed(asset, toKeep)\n    },\n    [asset, markAssetAsReviewed]\n  )\n  const handleKeep = useCallback(\n    (e: MouseEvent<HTMLButtonElement>) => {\n      e.preventDefault()\n      e.stopPropagation()\n      const toKeep = true\n      markAssetAsReviewed(asset, toKeep)\n    },\n    [asset, markAssetAsReviewed]\n  )\n  return (\n    <Column className={styles.priceChangeColumn} borderTopColor={top ? 'backgroundOutline' : 'transparent'}>\n      <Row className={styles.priceChangeRow}>\n        {isPriceIncrease ? <SquareArrowUpIcon /> : <SquareArrowDownIcon />}\n        <Box>{`Price ${isPriceIncrease ? 'increased' : 'decreased'} from ${formatWeiToDecimal(\n          asset.priceInfo.ETHPrice\n        )} ETH`}</Box>\n      </Row>\n      <Box style={{ marginLeft: '-8px', marginRight: '-8px' }}>\n        <BagRow asset={asset} usdPrice={usdPrice} removeAsset={() => undefined} isMobile={isMobile} />\n      </Box>\n      <Row gap=\"8\" justifyContent=\"space-between\">\n        <ReviewButton onClick={handleRemove} emphasis={ButtonEmphasis.medium} size={ButtonSize.small}>\n          Remove\n        </ReviewButton>\n        <ReviewButton onClick={handleKeep} emphasis={ButtonEmphasis.high} size={ButtonSize.small}>\n          Keep\n        </ReviewButton>\n      </Row>\n    </Column>\n  )\n}\n\ninterface UnavailableAssetsHeaderRowProps {\n  assets?: UpdatedGenieAsset[]\n  usdPrice?: number\n  clearUnavailableAssets: () => void\n  didOpenUnavailableAssets: boolean\n  setDidOpenUnavailableAssets: (didOpen: boolean) => void\n  isMobile: boolean\n}\n\ninterface UnavailableAssetsPreviewProps {\n  assets: UpdatedGenieAsset[]\n}\n\nconst ASSET_PREVIEW_WIDTH = 32\nconst ASSET_PREVIEW_OFFSET = 20\n\nconst UnavailableAssetsPreview = ({ assets }: UnavailableAssetsPreviewProps) => (\n  <Column\n    display=\"grid\"\n    style={{\n      gridTemplateColumns: `repeat(${assets.length}, 20px)`,\n      width: `${ASSET_PREVIEW_WIDTH + (assets.length - 1) * ASSET_PREVIEW_OFFSET}px`,\n    }}\n  >\n    {assets.map((asset, index) => (\n      <Box\n        key={`${asset.address}-${asset.tokenId}`}\n        as=\"img\"\n        src={asset.smallImageUrl}\n        width=\"32\"\n        height=\"32\"\n        borderStyle=\"solid\"\n        borderWidth=\"1px\"\n        borderColor=\"backgroundSurface\"\n        borderRadius=\"4\"\n        style={{ zIndex: index }}\n        className={styles.grayscaleImage}\n      />\n    ))}\n  </Column>\n)\n\nexport const UnavailableAssetsHeaderRow = ({\n  assets,\n  usdPrice,\n  clearUnavailableAssets,\n  didOpenUnavailableAssets,\n  setDidOpenUnavailableAssets,\n  isMobile,\n}: UnavailableAssetsHeaderRowProps) => {\n  const [isOpen, toggleOpen] = useReducer((s) => !s, false)\n  const timerLimit = 8\n  const [timeLeft, setTimeLeft] = useState(timerLimit)\n\n  useEffect(() => {\n    if (!timeLeft) {\n      if (!didOpenUnavailableAssets) {\n        clearUnavailableAssets()\n        setDidOpenUnavailableAssets(false)\n      }\n      return\n    }\n\n    const intervalId = setInterval(() => {\n      setTimeLeft(timeLeft - 1)\n    }, 1000)\n\n    return () => clearInterval(intervalId)\n  }, [timeLeft, clearUnavailableAssets, didOpenUnavailableAssets, setDidOpenUnavailableAssets])\n\n  if (!assets || assets.length === 0) return null\n\n  const moreThanOneUnavailable = assets.length > 1\n  const isShowingAssets = isOpen || !moreThanOneUnavailable\n\n  return (\n    <Column className={styles.unavailableAssetsContainer}>\n      <Column>\n        <Row\n          justifyContent=\"space-between\"\n          marginBottom={isShowingAssets ? '12' : '0'}\n          cursor={moreThanOneUnavailable ? 'pointer' : 'default'}\n          onClick={() => {\n            if (moreThanOneUnavailable) {\n              !didOpenUnavailableAssets && setDidOpenUnavailableAssets(true)\n              toggleOpen()\n            }\n          }}\n        >\n          <Row gap=\"12\" color=\"textSecondary\" className={bodySmall}>\n            {!isShowingAssets && <UnavailableAssetsPreview assets={assets.slice(0, 5)} />}\n            No longer available\n          </Row>\n          {moreThanOneUnavailable && (\n            <Row color=\"textSecondary\">{isOpen ? <ChevronUpBagIcon /> : <ChevronDownBagIcon />}</Row>\n          )}\n          {!didOpenUnavailableAssets && (\n            <Row\n              position=\"relative\"\n              width=\"20\"\n              height=\"20\"\n              color=\"textPrimary\"\n              justifyContent=\"center\"\n              cursor=\"pointer\"\n              onClick={clearUnavailableAssets}\n            >\n              <TimedLoader />\n              <CloseTimerIcon />\n            </Row>\n          )}\n        </Row>\n        <Column gap=\"8\" style={{ marginLeft: '-8px', marginRight: '-8px' }}>\n          {isShowingAssets &&\n            assets.map((asset) => (\n              <BagRow\n                key={asset.id}\n                asset={asset}\n                usdPrice={usdPrice}\n                removeAsset={() => undefined}\n                grayscale\n                isMobile={isMobile}\n              />\n            ))}\n        </Column>\n      </Column>\n    </Column>\n  )\n}\n","import { NFTEventName } from '@uniswap/analytics-events'\nimport { sendAnalyticsEvent, Trace } from 'analytics'\nimport { BagRow, PriceChangeBagRow, UnavailableAssetsHeaderRow } from 'nft/components/bag/BagRow'\nimport { Column } from 'nft/components/Flex'\nimport { useBag, useIsMobile } from 'nft/hooks'\nimport { BagItemStatus, BagStatus } from 'nft/types'\nimport { fetchPrice, formatAssetEventProperties, recalculateBagUsingPooledAssets } from 'nft/utils'\nimport { useEffect, useMemo } from 'react'\nimport { useQuery } from 'react-query'\n\nexport const BagContent = () => {\n  const bagStatus = useBag((s) => s.bagStatus)\n  const setBagStatus = useBag((s) => s.setBagStatus)\n  const markAssetAsReviewed = useBag((s) => s.markAssetAsReviewed)\n  const didOpenUnavailableAssets = useBag((s) => s.didOpenUnavailableAssets)\n  const setDidOpenUnavailableAssets = useBag((s) => s.setDidOpenUnavailableAssets)\n  const uncheckedItemsInBag = useBag((s) => s.itemsInBag)\n  const setItemsInBag = useBag((s) => s.setItemsInBag)\n  const removeAssetsFromBag = useBag((s) => s.removeAssetsFromBag)\n\n  const isMobile = useIsMobile()\n\n  const itemsInBag = useMemo(() => {\n    return recalculateBagUsingPooledAssets(uncheckedItemsInBag)\n  }, [uncheckedItemsInBag])\n\n  const { data: fetchedPriceData } = useQuery(['fetchPrice', {}], () => fetchPrice(), {})\n\n  const { unchangedAssets, priceChangedAssets, unavailableAssets, availableItems } = useMemo(() => {\n    const unchangedAssets = itemsInBag\n      .filter((item) => item.status === BagItemStatus.ADDED_TO_BAG || item.status === BagItemStatus.REVIEWED)\n      .map((item) => item.asset)\n    const priceChangedAssets = itemsInBag\n      .filter((item) => item.status === BagItemStatus.REVIEWING_PRICE_CHANGE)\n      .map((item) => item.asset)\n    const unavailableAssets = itemsInBag\n      .filter((item) => item.status === BagItemStatus.UNAVAILABLE)\n      .map((item) => item.asset)\n    const availableItems = itemsInBag.filter((item) => item.status !== BagItemStatus.UNAVAILABLE)\n\n    return { unchangedAssets, priceChangedAssets, unavailableAssets, availableItems }\n  }, [itemsInBag])\n\n  useEffect(() => {\n    const hasAssetsInReview = priceChangedAssets.length > 0\n    const hasAssets = itemsInBag.length > 0\n\n    if (hasAssetsInReview)\n      sendAnalyticsEvent(NFTEventName.NFT_BUY_BAG_CHANGED, {\n        usd_value: fetchedPriceData,\n        bag_quantity: itemsInBag,\n        ...formatAssetEventProperties(priceChangedAssets),\n      })\n\n    if (bagStatus === BagStatus.IN_REVIEW && !hasAssetsInReview) {\n      if (hasAssets) setBagStatus(BagStatus.CONFIRM_REVIEW)\n      else setBagStatus(BagStatus.ADDING_TO_BAG)\n    }\n\n    if (bagStatus === BagStatus.CONFIRM_REVIEW && !hasAssets) {\n      setBagStatus(BagStatus.ADDING_TO_BAG)\n    }\n  }, [bagStatus, itemsInBag, priceChangedAssets, setBagStatus, fetchedPriceData])\n\n  return (\n    <>\n      <Column display={priceChangedAssets.length > 0 || unavailableAssets.length > 0 ? 'flex' : 'none'}>\n        {unavailableAssets.length > 0 && (\n          <Trace\n            name={NFTEventName.NFT_BUY_BAG_CHANGED}\n            properties={{\n              usd_value: fetchedPriceData,\n              bag_quantity: itemsInBag.length,\n              ...formatAssetEventProperties(unavailableAssets),\n            }}\n            shouldLogImpression\n          >\n            <UnavailableAssetsHeaderRow\n              assets={unavailableAssets}\n              usdPrice={fetchedPriceData}\n              clearUnavailableAssets={() => setItemsInBag(availableItems)}\n              didOpenUnavailableAssets={didOpenUnavailableAssets}\n              setDidOpenUnavailableAssets={setDidOpenUnavailableAssets}\n              isMobile={isMobile}\n            />\n          </Trace>\n        )}\n        {priceChangedAssets.map((asset, index) => (\n          <PriceChangeBagRow\n            key={asset.id}\n            asset={asset}\n            usdPrice={fetchedPriceData}\n            markAssetAsReviewed={markAssetAsReviewed}\n            top={index === 0 && unavailableAssets.length === 0}\n            isMobile={isMobile}\n          />\n        ))}\n      </Column>\n      <Column>\n        {unchangedAssets\n          .slice(0)\n          .reverse()\n          .map((asset) => (\n            <BagRow\n              key={asset.id}\n              asset={asset}\n              usdPrice={fetchedPriceData}\n              removeAsset={removeAssetsFromBag}\n              showRemove={true}\n              isMobile={isMobile}\n            />\n          ))}\n      </Column>\n    </>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { OpacityHoverState } from 'components/Common'\nimport { BagCloseIcon } from 'nft/components/icons'\nimport { useMemo } from 'react'\nimport styled from 'styled-components'\nimport { ButtonText, ThemedText } from 'theme'\n\nconst ClearButton = styled(ButtonText)`\n  color: ${({ theme }) => theme.textSecondary};\n  cursor: pointer;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 16px;\n\n  :active {\n    text-decoration: none;\n  }\n`\n\nconst IconWrapper = styled.button`\n  align-items: center;\n  background-color: transparent;\n  border-radius: 8px;\n  border: none;\n  color: ${({ theme }) => theme.textPrimary};\n  cursor: pointer;\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n  margin-left: auto;\n  padding: 2px;\n  opacity: 1;\n\n  ${OpacityHoverState}\n`\nconst CounterDot = styled.div<{ sizing: string }>`\n  align-items: center;\n  background-color: ${({ theme }) => theme.accentAction};\n  border-radius: 100px;\n  font-weight: bold;\n  color: ${({ theme }) => theme.accentTextLightPrimary};\n  display: flex;\n  font-size: 10px;\n  justify-content: center;\n  min-width: ${({ sizing }) => sizing};\n  min-height: ${({ sizing }) => sizing};\n  padding: 4px 6px;\n`\nconst Wrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n  gap: 8px;\n  justify-content: flex-start;\n  margin: 16px 28px;\n  text-align: center;\n`\ninterface BagHeaderProps {\n  numberOfAssets: number\n  closeBag: () => void\n  resetFlow: () => void\n  isProfilePage: boolean\n}\n\nconst BASE_SIZING = 14\nconst INCREMENTAL_SIZING = 6\n\nconst getCircleSizing = (numberOfAssets: number): string => {\n  const numberOfCharacters = numberOfAssets.toString().length\n\n  // each digit adds 6px worth of width (approximately), so I set the height and width to be 6px larger for each digit added\n  // 1 digit => 14 + 6, 2 digit 14 + 12, etc.\n  return `${BASE_SIZING + INCREMENTAL_SIZING * numberOfCharacters}px`\n}\n\nexport const BagHeader = ({ numberOfAssets, closeBag, resetFlow, isProfilePage }: BagHeaderProps) => {\n  const sizing = useMemo(() => getCircleSizing(numberOfAssets), [numberOfAssets])\n\n  return (\n    <Wrapper>\n      <ThemedText.HeadlineSmall>{isProfilePage ? <Trans>Sell</Trans> : <Trans>Bag</Trans>}</ThemedText.HeadlineSmall>\n      {numberOfAssets > 0 && (\n        <>\n          <CounterDot sizing={sizing}>{numberOfAssets}</CounterDot>\n          <ClearButton onClick={resetFlow}>\n            <Trans>Clear all</Trans>\n          </ClearButton>\n        </>\n      )}\n      <IconWrapper onClick={closeBag}>\n        <BagCloseIcon data-testid=\"nft-bag-close-icon\" />\n      </IconWrapper>\n    </Wrapper>\n  )\n}\n","import { useIsNftProfilePage } from 'hooks/useIsNftPage'\nimport { Center, Column } from 'nft/components/Flex'\nimport { BagIcon, LargeTagIcon } from 'nft/components/icons'\nimport { subhead } from 'nft/css/common.css'\nimport { themeVars } from 'nft/css/sprinkles.css'\nimport styled from 'styled-components'\n\nconst StyledColumn = styled(Column)`\n  gap: 12px;\n  margin-top: 68px;\n`\n\nconst EmptyState = () => {\n  const isProfilePage = useIsNftProfilePage()\n\n  return (\n    <StyledColumn>\n      <Center>\n        {isProfilePage ? (\n          <LargeTagIcon color={themeVars.colors.textTertiary} />\n        ) : (\n          <BagIcon color={themeVars.colors.textTertiary} height=\"96px\" width=\"96px\" strokeWidth=\"1px\" />\n        )}\n      </Center>\n      {isProfilePage ? (\n        <Center data-testid=\"nft-no-nfts-selected\" className={subhead}>\n          No NFTs selected\n        </Center>\n      ) : (\n        <Column gap=\"16\">\n          <Center data-testid=\"nft-empty-bag\" className={subhead} style={{ lineHeight: '24px' }}>\n            Your bag is empty\n          </Center>\n          <Center fontSize=\"12\" fontWeight=\"normal\" color=\"textSecondary\" style={{ lineHeight: '16px' }}>\n            Selected NFTs will appear here\n          </Center>\n        </Column>\n      )}\n    </StyledColumn>\n  )\n}\n\nexport default EmptyState\n","import { ButtonEmphasis, ButtonSize } from 'components/Button'\nimport { Box } from 'nft/components/Box'\nimport { Column, Row } from 'nft/components/Flex'\nimport { VerifiedIcon } from 'nft/components/icons'\nimport { useIsMobile, useSellAsset } from 'nft/hooks'\nimport { WalletAsset } from 'nft/types'\nimport { useState } from 'react'\n\nimport { RemoveAssetButton, RemoveButton } from '../BagRow'\nimport * as styles from '../BagRow.css'\n\nconst ProfileAssetRow = ({ asset }: { asset: WalletAsset }) => {\n  const removeAsset = useSellAsset((state) => state.removeSellAsset)\n  const isMobile = useIsMobile()\n  const [hovered, setHovered] = useState(false)\n  const handleHover = () => setHovered(!hovered)\n\n  const handleRemoveAsset: React.MouseEventHandler<HTMLElement> = (e) => {\n    e.preventDefault()\n    e.stopPropagation()\n    removeAsset(asset)\n  }\n\n  return (\n    <Row className={styles.bagRow} onMouseEnter={handleHover} onMouseLeave={handleHover}>\n      <Box position=\"relative\" display=\"flex\">\n        {isMobile && <RemoveAssetButton onClick={handleRemoveAsset} />}\n        <img src={asset.smallImageUrl} alt={asset.name} className={styles.bagRowImage} />\n      </Box>\n      <Column overflow=\"hidden\" width=\"full\" color=\"textPrimary\">\n        <Row overflow=\"hidden\" width=\"full\" justifyContent=\"space-between\" whiteSpace=\"nowrap\" gap=\"16\">\n          <Box className={styles.assetName}>{asset.name || `#${asset.tokenId}`}</Box>\n        </Row>\n        <Row overflow=\"hidden\" whiteSpace=\"nowrap\" gap=\"2\">\n          <Box className={styles.collectionName}>{asset.asset_contract.name}</Box>\n          {asset.collectionIsVerified && <VerifiedIcon className={styles.icon} />}\n        </Row>\n      </Column>\n      {hovered && !isMobile && (\n        <RemoveButton onClick={handleRemoveAsset} emphasis={ButtonEmphasis.medium} size={ButtonSize.medium}>\n          Remove\n        </RemoveButton>\n      )}\n    </Row>\n  )\n}\n\nexport default ProfileAssetRow\n","import { Column } from 'nft/components/Flex'\nimport { useSellAsset } from 'nft/hooks'\n\nimport ProfileAssetRow from './ProfileAssetRow'\n\nexport const ProfileBagContent = () => {\n  const sellAssets = useSellAsset((state) => state.sellAssets)\n  return (\n    <Column>\n      {sellAssets.length ? sellAssets.map((asset, index) => <ProfileAssetRow asset={asset} key={index} />) : null}\n    </Column>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { NFTEventName } from '@uniswap/analytics-events'\nimport { sendAnalyticsEvent } from 'analytics'\nimport { useIsNftDetailsPage, useIsNftPage, useIsNftProfilePage } from 'hooks/useIsNftPage'\nimport { BagFooter } from 'nft/components/bag/BagFooter'\nimport { Box } from 'nft/components/Box'\nimport { Portal } from 'nft/components/common/Portal'\nimport { Column } from 'nft/components/Flex'\nimport { Overlay } from 'nft/components/modals/Overlay'\nimport { useBag, useIsMobile, useProfilePageState, useSellAsset, useSubscribeScrollState } from 'nft/hooks'\nimport { BagStatus, ProfilePageStateType } from 'nft/types'\nimport { formatAssetEventProperties, recalculateBagUsingPooledAssets } from 'nft/utils'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Z_INDEX } from 'theme/zIndex'\nimport { shallow } from 'zustand/shallow'\n\nimport * as styles from './Bag.css'\nimport { BagContent } from './BagContent'\nimport { BagHeader } from './BagHeader'\nimport EmptyState from './EmptyContent'\nimport { ProfileBagContent } from './profile/ProfileBagContent'\n\nexport const BAG_WIDTH = 320\nexport const XXXL_BAG_WIDTH = 360\n\ninterface SeparatorProps {\n  top?: boolean\n  show?: boolean\n}\n\nconst BagContainer = styled.div<{ raiseZIndex: boolean; isProfilePage: boolean }>`\n  position: fixed;\n  display: flex;\n  flex-direction: column;\n  top: 88px;\n  right: 20px;\n  width: ${BAG_WIDTH}px;\n  height: calc(100vh - 108px);\n  background: ${({ theme }) => theme.backgroundSurface};\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\n  border-radius: 16px;\n  box-shadow: ${({ theme }) => theme.shallowShadow};\n  z-index: ${({ raiseZIndex, isProfilePage }) =>\n    raiseZIndex ? (isProfilePage ? Z_INDEX.modalOverTooltip : Z_INDEX.modalBackdrop - 1) : 3};\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    right: 0px;\n    top: 0px;\n    width: 100%;\n    height: 100%;\n    border-radius: 0px;\n    border: none;\n  }\n\n  @media only screen and (min-width: ${({ theme }) => `${theme.breakpoint.xxxl}px`}) {\n    width: ${XXXL_BAG_WIDTH}px;\n  }\n`\n\nconst DetailsPageBackground = styled.div`\n  position: fixed;\n  background: rgba(0, 0, 0, 0.7);\n  top: 0px;\n  width: 100%;\n  height: 100%;\n`\n\nconst ContinueButton = styled.div`\n  background: ${({ theme }) => theme.accentAction};\n  color: ${({ theme }) => theme.accentTextLightPrimary};\n  margin: 32px 28px 16px;\n  padding: 10px 0px;\n  border-radius: 12px;\n  text-align: center;\n  font-size: 16px;\n  font-weight: 600;\n  line-height: 20px;\n  cursor: pointer;\n  transition: ${({ theme }) => theme.transition.duration.medium};\n\n  :hover {\n    opacity: ${({ theme }) => theme.opacity.hover};\n  }\n`\n\nconst ScrollingIndicator = ({ top, show }: SeparatorProps) => (\n  <Box\n    marginX=\"24\"\n    borderWidth=\"1px\"\n    borderStyle=\"solid\"\n    borderColor=\"transparent\"\n    borderTopColor={top ? 'transparent' : 'backgroundOutline'}\n    borderBottomColor={top ? 'backgroundOutline' : 'transparent'}\n    opacity={show ? '1' : '0'}\n    transition=\"250\"\n  />\n)\n\nconst Bag = () => {\n  const { resetSellAssets, sellAssets } = useSellAsset(\n    ({ reset, sellAssets }) => ({\n      resetSellAssets: reset,\n      sellAssets,\n    }),\n    shallow\n  )\n\n  const { setProfilePageState } = useProfilePageState(({ setProfilePageState }) => ({ setProfilePageState }))\n\n  const { bagStatus, bagIsLocked, reset, bagExpanded, toggleBag, setBagExpanded } = useBag(\n    (state) => ({ ...state, bagIsLocked: state.isLocked, uncheckedItemsInBag: state.itemsInBag }),\n    shallow\n  )\n  const { uncheckedItemsInBag } = useBag(({ itemsInBag }) => ({ uncheckedItemsInBag: itemsInBag }))\n\n  const isProfilePage = useIsNftProfilePage()\n  const isDetailsPage = useIsNftDetailsPage()\n  const isNFTPage = useIsNftPage()\n  const isMobile = useIsMobile()\n\n  const itemsInBag = useMemo(() => recalculateBagUsingPooledAssets(uncheckedItemsInBag), [uncheckedItemsInBag])\n\n  const [isModalOpen, setModalIsOpen] = useState(false)\n  const { userCanScroll, scrollRef, scrollProgress, scrollHandler } = useSubscribeScrollState()\n\n  const handleCloseBag = useCallback(() => {\n    setBagExpanded({ bagExpanded: false, manualClose: true })\n  }, [setBagExpanded])\n\n  useEffect(() => {\n    if (bagIsLocked && !isModalOpen) setModalIsOpen(true)\n  }, [bagIsLocked, isModalOpen])\n\n  const hasAssetsToShow = itemsInBag.length > 0\n  const isBuyingAssets = itemsInBag.length > 0\n  const isSellingAssets = sellAssets.length > 0\n\n  const shouldRenderEmptyState = Boolean(\n    (!isProfilePage && !isBuyingAssets && bagStatus === BagStatus.ADDING_TO_BAG) || (isProfilePage && !isSellingAssets)\n  )\n\n  const eventProperties = useMemo(\n    () => ({\n      ...formatAssetEventProperties(itemsInBag.map((item) => item.asset)),\n    }),\n    [itemsInBag]\n  )\n\n  if (!bagExpanded || !isNFTPage) {\n    return null\n  }\n\n  return (\n    <Portal>\n      <BagContainer data-testid=\"nft-bag\" raiseZIndex={isMobile || isModalOpen} isProfilePage={isProfilePage}>\n        <BagHeader\n          numberOfAssets={isProfilePage ? sellAssets.length : itemsInBag.length}\n          closeBag={handleCloseBag}\n          resetFlow={isProfilePage ? resetSellAssets : reset}\n          isProfilePage={isProfilePage}\n        />\n        {shouldRenderEmptyState && <EmptyState />}\n        <ScrollingIndicator top show={userCanScroll && scrollProgress > 0} />\n        <Column ref={scrollRef} className={styles.assetsContainer} onScroll={scrollHandler} gap=\"12\">\n          {isProfilePage ? <ProfileBagContent /> : <BagContent />}\n        </Column>\n        {hasAssetsToShow && !isProfilePage && (\n          <BagFooter setModalIsOpen={setModalIsOpen} eventProperties={eventProperties} />\n        )}\n        {isSellingAssets && isProfilePage && (\n          <ContinueButton\n            onClick={() => {\n              toggleBag()\n              setProfilePageState(ProfilePageStateType.LISTING)\n              sendAnalyticsEvent(NFTEventName.NFT_PROFILE_PAGE_START_SELL, {\n                list_quantity: sellAssets.length,\n                collection_addresses: sellAssets.map((asset) => asset.asset_contract.address),\n                token_ids: sellAssets.map((asset) => asset.tokenId),\n              })\n            }}\n          >\n            <Trans>Continue</Trans>\n          </ContinueButton>\n        )}\n      </BagContainer>\n\n      {isDetailsPage ? (\n        <DetailsPageBackground onClick={toggleBag} />\n      ) : (\n        isModalOpen && <Overlay onClick={() => (!bagIsLocked ? setModalIsOpen(false) : undefined)} />\n      )}\n    </Portal>\n  )\n}\n\nexport default Bag\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#H4sIAAAAAAAAE5y9W28kSZJm+b6/IoBEAd1AR4Fufs952czKSuw+LGaBXmCf/X6/0O/kYv77OiMYES5HRU0/8anprkZQjlJF3UzP53Q18vfDbnf68v/9b1++fP16mF07k/eX379cBof/+Pp1NtkuJl9Hu/XucPw6GI0m29Pfg8X6fJj85/94qG+U6/97Nz0Zpqph/hidFrutKW8Wy5Pv0KpB/vt8/6/j0dS33frJbb9ejBan/3e+ONmuO279bLcem7Lu719+q176vXbz8V97LnxZ7NYT20XfLRwORqvZYXfejv9e7wanxXZmoEEB+j+3p8lhcF+2i21pWOD+r934vLbIqID8z/NpvdhaZlxg/vt8mA5GlpkUmD/v/9f4sNsbaOpCm914sHbrZ279cTI4jOZ//vxWBpnXIF7vC7/+NDhN/udlclgP3v6P3f2/DbN0mdPkdvq/D4vN4PBmqlfZ6v+ejHbbMevX2fr/Z3I4LVi+ccs/lvK/54Px7mqKt79/+ViBweHr7DAYL+533n9U3ZfxZPZfX377q/FX+68/v7z84/5//935+M+XxsvLPwy/+7h5WlW3mjz+6/73L4fZcPAfL//15fv/b9yxLy/725fW/X8a1f72WP16H+PvP6p/NXuP/3r4/ctwfX9JH//t+FHZ/vjP47+e7v/6rz//9e+//vX4r+f7v3b//vjP479efv9yOgy2x/3gcO/18SvX379sd1vTxu3j2/1t+Lf7P7X+1av+/vPxX9/v//rHX3/+6++/my9m3335GOHPRqP3b/PP9/34t3bzZdqw1ZW7EI3mxz//1e10zPds3LfP3/797z+bja755/su+dufjW7/xY7d+fiW//r73/2/zD9/bH6tlz859n33+63xR7/dtoP0P8b+68/e33+Yfx58LPUf3T//bQcZfn+1On+b16Ux+ph379//skvYuO85v/1V/dX/t12qyce37P3rxb64jenHinf++Ptfdib3/eG3fu+Pxr/svO97wG+93n3a9lsuPubd7b38Yavvd/NvnT+77X7L/PPqYwX/6nR75uJrrD/++aX9R9e+aJtvC9v6o2Nfnfv99luz2fyr3Tf//O026jerlv3n/cfL8GdVNTvmnz9umEaz8Udlm7/fMb+9/LvRruy8P26al78ajYZdwY+75qX3cr84zT+fP2/dqt3+ry+//tfLPxuV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\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nimport \"src/nft/components/bag/Bag.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/bag/Bag.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xamN6NTByMSB7CiAgc2Nyb2xsYmFyLXdpZHRoOiBub25lOwp9Ci5fMWpjejUwcjE6Oi13ZWJraXQtc2Nyb2xsYmFyIHsKICBkaXNwbGF5OiBub25lOwp9CkBtZWRpYSAobWluLXdpZHRoOiA3NjhweCkgewogIC5fMWpjejUwcjMgewogICAgd2lkdGg6IDM2MHB4OwogICAgaGVpZ2h0OiBjYWxjKDEwMHZoIC0gNzJweCk7CiAgfQp9\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nexport var assetsContainer = '_1jcz50r1 rgw6ez2ej rgw6ez2k1 rgw6ez1yv rgw6ez7nf';\nexport var bagContainer = '_1jcz50r3 rgw6ez48v rgw6ez3f7 rgw6ez3j2 rgw6ez16v rgw6ez1dv rgw6ez39p rgw6ez4pd rgw6ez7aj rgw6ez511 rgw6ez7jr rgw6ez4ej';"],"names":["BuyButtonStates","AssetMediaType","gql","buildRoutingItem","routingItem","action","RoutingActions","Buy","marketplace","toLowerCase","amountIn","price","value","assetIn","ETHPrice","baseAsset","currency","basePrice","baseDecimals","amountOut","amount","toString","assetOut","id","decimals","address","contractAddress","priceInfo","tokenType","tokenId","orderSource","shallow","objA","objB","Object","is","Map","size","key","get","Set","has","keysA","keys","length","i","prototype","hasOwnProperty","call","useTokenInput","create","devtools","inputCurrency","undefined","tokenTradeInput","setInputCurrency","set","clearInputCurrency","setTokenTradeInput","name","buildTradeRouteInput","swap","swapAmounts","inputAmount","outputAmount","quotient","token","isToken","chainId","isNative","pools","route","map","buildPool","pool","isPool","pair","tokenAmountA","reserve0","token0","tokenAmountB","reserve1","token1","fee","liquidity","sqrtRatioX96","tickCurrent","tokenA","tokenB","getBuyButtonStateData","buyButtonState","theme","handleClickOverride","usingPayWithAnyToken","priceImpact","defaultBuyButtonState","handleClick","buttonText","disabled","warningText","warningTextColor","accentWarning","helperText","helperTextColor","textSecondary","buttonColor","accentAction","buttonTextColor","accentTextLightPrimary","buyButtonStateData","WALLET_NOT_CONNECTED","NOT_SUPPORTED_CHAIN","INSUFFICIENT_BALANCE","ERROR","IN_WALLET_CONFIRMATION","PROCESSING_TRANSACTION","FETCHING_TOKEN_ROUTE","INVALID_TOKEN_ROUTE","NO_TOKEN_ROUTE_FOUND","backgroundInteractive","textPrimary","LOADING_ALLOWANCE","IN_WALLET_ALLOWANCE_APPROVAL","PROCESSING_APPROVAL","REQUIRE_APPROVAL","CONFIRM_UPDATED_PRICE","PRICE_IMPACT_HIGH","priceImpactSeverity","color","PAY","FooterContainer","styled","div","Footer","backgroundOutline","FooterHeader","Column","CurrencyRow","Row","TotalColumn","WarningIcon","AlertTriangle","WarningText","ThemedText","BodyPrimary","$color","HelperText","Caption","CurrencyInput","ActionButton","button","$backgroundColor","FiatLoadingBubble","LoadingBubble","PriceImpactContainer","PriceImpactRow","ValueText","Warning","children","data-testid","fontSize","lineHeight","Helper","InputCurrencyValue","totalEthPrice","activeCurrency","tradeState","trade","TradeState","LOADING","ethNumberStandardFormatter","toExact","fontWeight","formatWeiToDecimal","symbol","FiatValue","usdcValue","MouseoverTooltip","text","BodySmall","style","displayPercentage","INVALID","NO_ROUTE_FOUND","PENDING_BAG_STATUSES","BagStatus","FETCHING_ROUTE","CONFIRMING_IN_WALLET","FETCHING_FINAL_ROUTE","BagFooter","setModalIsOpen","eventProperties","toggleWalletDrawer","useToggleAccountDrawer","useTheme","account","connector","useWeb3React","connected","Boolean","useBagTotalEthPrice","itemsInBag","useBag","state","useMemo","reduce","total","item","status","BagItemStatus","UNAVAILABLE","add","BigNumber","from","asset","updatedPriceInfo","defaultCurrency","useCurrency","inputCurrencyBalance","useTokenBalance","isLocked","bagIsLocked","bagStatus","setBagExpanded","setBagStatus","tokenSelectorOpen","setTokenSelectorOpen","useState","isPending","includes","ChainId","MAINNET","universalRouterAddress","universalRouterAddressIsLoading","useNftUniversalRouterAddress","data","loading","useNftUniversalRouterAddressQuery","fetchPolicy","nftRoute","toAddress","useSubscribeTransactionState","transactionState","useSendTransaction","setTransactionState","setState","transactionStateRef","useRef","setLocked","setBagLocked","useEffect","subscribe","current","TxStateType","Confirming","Denied","Invalid","WARNING","CONFIRM_REVIEW","New","fetchAssets","useFetchAssets","uncheckedItemsInBag","didOpenUnavailableAssets","setDidOpenUnavailableAssets","setItemsInBag","recalculateBagUsingPooledAssets","fetchGqlRoute","useNftRouteLazyQuery","purchaseAssets","usePurchaseAssets","provider","sendTransaction","setTransactionResponse","useTransactionResponse","reset","resetBag","useCallback","routingData","assetsToBuy","purchasingWithErc20","purchaseResponse","getSigner","bagExpanded","resetStateBeforeFetch","variables","senderAddress","nftTrades","buildNftTradeInputFromBagItems","tokenTrades","onCompleted","ADDING_TO_BAG","wishAssetsToBuy","filter","routeResponse","buildRouteResponse","useErc20Token","routingItems","valueToSend","sendAmount","calldata","to","newBagItems","nextBagStatus","getNextBagState","hasPriceAdjustment","updatedAssets","compareAssetsWithTransactionRoute","unchanged","priceChanged","unavailable","filterUpdatedAssetsByState","hasAssets","hasAssetsInReview","hasUnavailableAssets","unavailableAsset","changedAsset","REVIEWING_PRICE_CHANGE","unchangedAsset","REVIEWED","IN_REVIEW","CONFIRM_QUOTE","parsedOutputAmount","tryParseCurrencyAmount","formatEther","maximumAmountIn","allowedSlippage","useDerivedPayWithAnyTokenSwapInfo","useDebouncedTrade","TradeType","EXACT_OUTPUT","RouterPreference","API","useAutoSlippageTolerance","isClassicTrade","allowance","usePermit2Allowance","getURAddress","nftURAddress","UNIVERSAL_ROUTER_ADDRESS","isSupportedChain","TradeFillType","Classic","loadingAllowance","AllowanceState","usePayWithAnyTokenSwap","hasRoutes","routes","hasInputAmount","hasAllowance","slippage","parseInt","multiply","toSignificant","mixedTokenTradeRouteInputs","v2TokenTradeRouteInputs","v3TokenTradeRouteInputs","buildAllTradeRouteInputs","swaps","protocol","Protocol","MIXED","push","V2","mixedRoutes","tradeType","TokenTradeType","ExactOutput","v2Routes","v3Routes","permitInput","permitSignature","details","expiration","nonce","sigDeadline","signature","spender","permit","slippageToleranceBasisPoints","tokenAmount","usePriceImpact","marketPriceImpact","computeRealizedPriceImpact","priceImpactWarning","getPriceImpactWarning","warningColor","accentCritical","type","toHumanReadablePercent","sign","lessThan","exactFloat","numerator","Number","denominator","number","parseFloat","toFixed","fiatValueTradeInput","useStablecoinValue","fiatValueTradeOutput","balance","balanceInEth","useWalletBalance","sufficientBalance","parseEther","gte","switchChain","useSwitchChain","VALID","allowanceRequired","REQUIRED","approveAndPermit","isApprovalPending","isApprovalLoading","traceEventProperties","usd_value","using_erc20","gap","SubHeaderSmall","onClick","sendAnalyticsEvent","NFTEventName","NFT_BUY_TOKEN_SELECTOR_CLICKED","CurrencyLogo","HeadlineSmall","ChevronDown","marginBottom","TraceEvent","events","BrowserEvent","NFT_BUY_BAG_PAY","element","InterfaceElementName","NFT_BUY_BAG_PAY_BUTTON","properties","shouldLogImpression","Loader","stroke","CurrencySearchModal","isOpen","onDismiss","onCurrencySelect","NFT_BUY_TOKEN_SELECTED","token_address","token_symbol","selectedCurrency","onlyShowCurrenciesWithBalance","dash","keyframes","Circle","circle","TimedLoader","Box","display","position","svg","height","width","strokeWidth","strokeLinecap","transform","transformOrigin","fill","r","cx","cy","StyledImageContainer","isDisabled","opacity","enabled","img","$aspectRatio","transition","duration","medium","timing","ease","$hidden","imageLoading","backgroundSurface","pauseButton","BREAKPOINTS","sm","video","audio","$height","colors","gray500","Image","Video","Audio","isText","SuspiciousIcon","accentFailure","SuspiciousIconContainer","Suspicious","placement","assetName","bagRow","bagRowImage","collectionName","grayscaleImage","icon","RemoveButton","ThemeButton","ReviewButton","RemoveAssetOverlay","RemoveAssetButton","CircularCloseIcon","NoContentContainer","background","className","styles","textAlign","left","top","br","BagRow","usdPrice","removeAsset","showRemove","grayscale","isMobile","loadedImage","setImageLoaded","noImageAvailable","setNoImageAvailable","smallImageUrl","cardHovered","setCardHovered","handleMouseEnter","handleMouseLeave","showRemoveButton","assetEthPrice","assetEthPriceFormatted","assetUSDPriceFormatted","handleRemoveClick","e","preventDefault","stopPropagation","Link","getAssetHref","textDecoration","onMouseEnter","onMouseLeave","as","src","alt","clsx","onLoad","onError","visibility","overflow","whiteSpace","susFlag","collectionIsVerified","VerifiedIcon","emphasis","ButtonEmphasis","ButtonSize","flexShrink","alignItems","PriceChangeBagRow","markAssetAsReviewed","isPriceIncrease","gt","handleRemove","handleKeep","borderTopColor","SquareArrowUpIcon","SquareArrowDownIcon","marginLeft","marginRight","justifyContent","small","high","UnavailableAssetsPreview","assets","gridTemplateColumns","ASSET_PREVIEW_WIDTH","index","borderStyle","borderWidth","borderColor","borderRadius","zIndex","UnavailableAssetsHeaderRow","clearUnavailableAssets","toggleOpen","useReducer","s","timeLeft","setTimeLeft","intervalId","setInterval","clearInterval","moreThanOneUnavailable","isShowingAssets","cursor","bodySmall","slice","ChevronUpBagIcon","ChevronDownBagIcon","CloseTimerIcon","BagContent","removeAssetsFromBag","useIsMobile","fetchedPriceData","useQuery","fetchPrice","unchangedAssets","priceChangedAssets","unavailableAssets","availableItems","ADDED_TO_BAG","NFT_BUY_BAG_CHANGED","bag_quantity","formatAssetEventProperties","Trace","reverse","ClearButton","ButtonText","IconWrapper","OpacityHoverState","CounterDot","sizing","Wrapper","getCircleSizing","numberOfCharacters","numberOfAssets","BASE_SIZING","INCREMENTAL_SIZING","BagHeader","closeBag","resetFlow","isProfilePage","BagCloseIcon","StyledColumn","useIsNftProfilePage","Center","LargeTagIcon","themeVars","textTertiary","BagIcon","subhead","useSellAsset","removeSellAsset","hovered","setHovered","handleHover","handleRemoveAsset","asset_contract","ProfileBagContent","sellAssets","ProfileAssetRow","BAG_WIDTH","XXXL_BAG_WIDTH","BagContainer","shallowShadow","raiseZIndex","Z_INDEX","modalOverTooltip","modalBackdrop","breakpoint","xxxl","DetailsPageBackground","ContinueButton","hover","ScrollingIndicator","show","marginX","borderBottomColor","resetSellAssets","setProfilePageState","useProfilePageState","toggleBag","isDetailsPage","useIsNftDetailsPage","isNFTPage","useIsNftPage","isModalOpen","userCanScroll","scrollRef","scrollProgress","scrollHandler","useSubscribeScrollState","handleCloseBag","manualClose","hasAssetsToShow","isBuyingAssets","isSellingAssets","shouldRenderEmptyState","Portal","EmptyState","ref","onScroll","ProfilePageStateType","LISTING","NFT_PROFILE_PAGE_START_SELL","list_quantity","collection_addresses","token_ids","Overlay"],"sourceRoot":""}