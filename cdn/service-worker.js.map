{"version":3,"sources":["../node_modules/workbox-core/_version.js","../node_modules/workbox-expiration/_version.js","../node_modules/workbox-precaching/_version.js","../node_modules/workbox-routing/_version.js","../node_modules/workbox-strategies/_version.js","../webpack/bootstrap","../node_modules/idb/build/index.js","../node_modules/workbox-core/_private/canConstructResponseFromBodyStream.js","../node_modules/workbox-precaching/utils/getOrCreatePrecacheController.js","../node_modules/workbox-routing/utils/getOrCreateDefaultRouter.js","../node_modules/idb/build/wrap-idb-value.js","../node_modules/workbox-core/models/messages/messageGenerator.js","../node_modules/workbox-core/_private/WorkboxError.js","../node_modules/workbox-core/_private/cacheNames.js","../node_modules/workbox-core/_private/waitUntil.js","../node_modules/workbox-precaching/utils/PrecacheInstallReportPlugin.js","../node_modules/workbox-precaching/utils/PrecacheCacheKeyPlugin.js","../node_modules/workbox-core/copyResponse.js","../node_modules/workbox-core/_private/getFriendlyURL.js","../node_modules/workbox-core/_private/cacheMatchIgnoreParams.js","../node_modules/workbox-core/_private/Deferred.js","../node_modules/workbox-core/models/quotaErrorCallbacks.js","../node_modules/workbox-core/_private/executeQuotaErrorCallbacks.js","../node_modules/workbox-strategies/StrategyHandler.js","../node_modules/workbox-core/_private/timeout.js","../node_modules/workbox-strategies/Strategy.js","../node_modules/workbox-precaching/PrecacheStrategy.js","../node_modules/workbox-precaching/PrecacheController.js","../node_modules/workbox-precaching/utils/createCacheKey.js","../node_modules/workbox-routing/utils/normalizeHandler.js","../node_modules/workbox-routing/Route.js","../node_modules/workbox-routing/utils/constants.js","../node_modules/workbox-routing/RegExpRoute.js","../node_modules/workbox-routing/Router.js","../node_modules/workbox-routing/registerRoute.js","../node_modules/workbox-precaching/PrecacheRoute.js","../node_modules/workbox-precaching/utils/generateURLVariations.js","../node_modules/workbox-precaching/utils/removeIgnoredSearchParams.js","../node_modules/workbox-core/_private/dontWaitFor.js","../node_modules/workbox-core/cacheNames.js","../node_modules/workbox-expiration/models/CacheTimestampsModel.js","../node_modules/workbox-expiration/CacheExpiration.js","../node_modules/workbox-expiration/ExpirationPlugin.js","../node_modules/workbox-core/registerQuotaErrorCallback.js","../node_modules/workbox-strategies/CacheFirst.js","serviceWorker/utils.ts","serviceWorker/document.ts","utils/env.ts","../node_modules/workbox-precaching/getCacheKeyForURL.js","../node_modules/workbox-precaching/matchPrecache.js","../node_modules/workbox-core/clientsClaim.js","serviceWorker/index.ts","../node_modules/workbox-precaching/precacheAndRoute.js","../node_modules/workbox-precaching/precache.js","../node_modules/workbox-precaching/addRoute.js"],"names":["self","_","e","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","oldTraps","supportStatus","precacheController","defaultRouter","idbProxyableTypes","cursorAdvanceMethods","messageGenerator","code","args","msg","length","JSON","stringify","Error","constructor","errorCode","details","message","name","_cacheNameDetails","googleAnalytics","precache","prefix","runtime","suffix","registration","scope","_createCacheName","cacheName","filter","value","join","eachCacheNameDetail","key","Object","keys","fn","cacheNames","updateDetails","getGoogleAnalyticsName","userCacheName","getPrecacheName","getPrefix","getRuntimeName","getSuffix","waitUntil","event","asyncFn","returnPromise","updatedURLs","notUpdatedURLs","handlerWillStart","request","state","originalRequest","cachedResponseWillBeUsed","cachedResponse","type","Request","url","push","cacheKeyWillBeUsed","params","cacheKey","_precacheController","getCacheKeyForURL","headers","copyResponse","response","modifier","origin","responseURL","URL","location","WorkboxError","clonedResponse","clone","responseInit","Headers","status","statusText","modifiedResponseInit","body","canConstructResponseFromBodyStream","testResponse","Response","error","blob","getFriendlyURL","urlObj","String","href","replace","stripParams","fullURL","ignoreParams","strippedURL","param","searchParams","delete","cacheMatchIgnoreParams","cache","matchOptions","strippedRequestURL","match","keysOptions","assign","ignoreSearch","cacheKeys","strippedCacheKeyURL","promise","Promise","resolve","reject","quotaErrorCallbacks","Set","executeQuotaErrorCallbacks","callback","toRequest","input","fetch","mode","FetchEvent","preloadResponse","possiblePreloadResponse","hasCallback","cb","iterateCallbacks","err","thrownErrorMessage","pluginFilteredRequest","fetchResponse","_strategy","fetchOptions","runCallbacks","fetchAndCachePut","responseClone","cachePut","cacheMatch","effectiveRequest","getCacheKey","multiMatchOptions","caches","setTimeout","responseToCache","_ensureResponseSafeToCache","open","hasCacheUpdateCallback","oldResponse","put","newResponse","_cacheKeys","plugin","plugins","_pluginStateMap","get","statefulCallback","statefulParam","_extendLifetimePromises","doneWaiting","shift","destroy","_handlerDeferred","pluginsUsed","strategy","options","Deferred","_plugins","Map","set","handle","responseDone","handleAll","handler","StrategyHandler","_getResponse","handlerDone","_awaitComplete","_handle","waitUntilError","PrecacheStrategy","Strategy","_handleInstall","_handleFetch","_fallbackToNetwork","integrityInManifest","integrity","integrityInRequest","_useDefaultCacheabilityPluginIfNeeded","wasCached","defaultPluginIndex","cacheWillUpdatePluginCount","index","entries","copyRedirectedCacheableResponsesPlugin","defaultPrecacheCacheabilityPlugin","cacheWillUpdate","splice","fallbackToNetwork","redirected","addToCacheList","_installAndActiveListenersAdded","addEventListener","install","activate","urlsToWarnAbout","entry","revision","createCacheKey","urlObject","cacheKeyURL","originalURL","cacheMode","_urlsToCacheKeys","has","firstEntry","secondEntry","_cacheKeysToIntegrities","_urlsToCacheModes","warningMessage","console","warn","installReportPlugin","PrecacheInstallReportPlugin","credentials","all","currentlyCachedRequests","expectedCacheKeys","values","deletedURLs","getURLsToCacheKeys","getCachedURLs","getIntegrityForCacheKey","matchPrecache","createHandlerBoundToURL","PrecacheCacheKeyPlugin","bind","getOrCreatePrecacheController","PrecacheController","normalizeHandler","setCatchHandler","catchHandler","method","Route","regExp","result","exec","slice","routes","_routes","addFetchListener","responsePromise","handleRequest","respondWith","addCacheListener","data","payload","requestPromises","urlsToCache","map","ports","then","postMessage","protocol","startsWith","sameOrigin","route","findMatchingRoute","_defaultHandlerMap","_catchHandler","catch","catchErr","matchResult","Array","isArray","setDefaultHandler","registerRoute","unregisterRoute","routeIndex","indexOf","getOrCreateDefaultRouter","Router","capture","captureUrl","RegExp","RegExpRoute","moduleName","funcName","paramName","urlsToCacheKeys","possibleURL","generateURLVariations","ignoreURLParametersMatching","directoryIndex","cleanURLs","urlManipulation","hash","urlWithoutIgnoredParams","removeIgnoredSearchParams","some","test","pathname","endsWith","directoryURL","cleanURL","additionalURLs","urlToAttempt","dontWaitFor","_cacheNames","instanceOfAny","object","constructors","c","cursorRequestMap","WeakMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","idbProxyTraps","target","prop","receiver","IDBTransaction","objectStoreNames","objectStore","wrap","IDBRequest","promisifyRequest","unlisten","removeEventListener","success","IDBCursor","newValue","IDBDatabase","prototype","transaction","getCursorAdvanceMethods","advance","continue","continuePrimaryKey","includes","func","apply","unwrap","storeNames","tx","call","sort","cacheDonePromiseForTransaction","done","complete","DOMException","IDBObjectStore","IDBIndex","Proxy","readMethods","writeMethods","cachedMethods","getMethod","targetFuncName","useIndex","isWrite","storeName","store","CACHE_OBJECT_STORE","normalizeURL","unNormalizedUrl","_upgradeDb","db","objStore","createObjectStore","keyPath","createIndex","unique","_upgradeDbAndDeleteOldDbs","_cacheName","deleteDB","blocked","indexedDB","deleteDatabase","oldVersion","setTimestamp","timestamp","id","_getId","getDb","durability","getTimestamp","expireEntries","minTimestamp","maxCount","cursor","openCursor","entriesToDelete","entriesNotDeletedCount","urlsDeleted","_db","openDB","version","upgrade","blocking","terminated","openPromise","newVersion","_isRunning","_rerunRequested","_maxAgeSeconds","Date","now","urlsExpired","_timestampModel","_maxEntries","_matchOptions","updateTimestamp","isURLExpired","expireOlderThan","Infinity","config","maxEntries","maxAgeSeconds","CacheTimestampsModel","_getCacheExpiration","cacheExpiration","_cacheExpirations","CacheExpiration","_config","_isResponseDateFresh","dateHeaderTimestamp","_getDateHeaderTimestamp","dateHeader","parsedDate","headerTime","getTime","deleteCacheAndMetadata","isFresh","updateTimestampDone","cacheDidUpdate","purgeOnQuotaError","add","deleteUnusedCaches","usedCaches","forEach","fileExtensionRegexp","DOCUMENT","process","matchDocument","isDevelopment","hostname","isAppUniswapStagingOrg","isAppUniswapOrg","handleDocument","navigator","onLine","offlineDocument","requestUrl","controller","AbortController","signal","CachedDocument","from","etag","cachedEtag","abort","text","init","clients","claim","skipWaiting","onDemandEntries","precacheEntries","__WB_MANIFEST","reduce","onDemandURLs","onDemandCacheName","CacheFirst","ExpirationPlugin","addRoute","precacheRoute","PrecacheRoute"],"mappings":"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","file":"service-worker.js","sourceRoot":"","sourcesContent":["\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:core:6.5.3'] && _();\n}\ncatch (e) { }\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:expiration:6.5.3'] && _();\n}\ncatch (e) { }\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:precaching:6.5.3'] && _();\n}\ncatch (e) { }\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:routing:6.5.3'] && _();\n}\ncatch (e) { }\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:strategies:6.5.3'] && _();\n}\ncatch (e) { }\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);\n        });\n    }\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event.newVersion, event));\n    }\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking) {\n            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));\n        }\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event));\n    }\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nlet supportStatus;\n/**\n * A utility function that determines whether the current browser supports\n * constructing a new `Response` from a `response.body` stream.\n *\n * @return {boolean} `true`, if the current browser can successfully\n *     construct a `Response` from a `response.body` stream, `false` otherwise.\n *\n * @private\n */\nfunction canConstructResponseFromBodyStream() {\n    if (supportStatus === undefined) {\n        const testResponse = new Response('');\n        if ('body' in testResponse) {\n            try {\n                new Response(testResponse.body);\n                supportStatus = true;\n            }\n            catch (error) {\n                supportStatus = false;\n            }\n        }\n        supportStatus = false;\n    }\n    return supportStatus;\n}\nexport { canConstructResponseFromBodyStream };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { PrecacheController } from '../PrecacheController.js';\nimport '../_version.js';\nlet precacheController;\n/**\n * @return {PrecacheController}\n * @private\n */\nexport const getOrCreatePrecacheController = () => {\n    if (!precacheController) {\n        precacheController = new PrecacheController();\n    }\n    return precacheController;\n};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { Router } from '../Router.js';\nimport '../_version.js';\nlet defaultRouter;\n/**\n * Creates a new, singleton Router instance if one does not exist. If one\n * does already exist, that instance is returned.\n *\n * @private\n * @return {Router}\n */\nexport const getOrCreateDefaultRouter = () => {\n    if (!defaultRouter) {\n        defaultRouter = new Router();\n        // The helpers that use the default Router assume these listeners exist.\n        defaultRouter.addFetchListener();\n        defaultRouter.addCacheListener();\n    }\n    return defaultRouter;\n};\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messages } from './messages.js';\nimport '../../_version.js';\nconst fallback = (code, ...args) => {\n    let msg = code;\n    if (args.length > 0) {\n        msg += ` :: ${JSON.stringify(args)}`;\n    }\n    return msg;\n};\nconst generatorFunction = (code, details = {}) => {\n    const message = messages[code];\n    if (!message) {\n        throw new Error(`Unable to find message for code '${code}'.`);\n    }\n    return message(details);\n};\nexport const messageGenerator = process.env.NODE_ENV === 'production' ? fallback : generatorFunction;\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messageGenerator } from '../models/messages/messageGenerator.js';\nimport '../_version.js';\n/**\n * Workbox errors should be thrown with this class.\n * This allows use to ensure the type easily in tests,\n * helps developers identify errors from workbox\n * easily and allows use to optimise error\n * messages correctly.\n *\n * @private\n */\nclass WorkboxError extends Error {\n    /**\n     *\n     * @param {string} errorCode The error code that\n     * identifies this particular error.\n     * @param {Object=} details Any relevant arguments\n     * that will help developers identify issues should\n     * be added as a key on the context object.\n     */\n    constructor(errorCode, details) {\n        const message = messageGenerator(errorCode, details);\n        super(message);\n        this.name = errorCode;\n        this.details = details;\n    }\n}\nexport { WorkboxError };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst _cacheNameDetails = {\n    googleAnalytics: 'googleAnalytics',\n    precache: 'precache-v2',\n    prefix: 'workbox',\n    runtime: 'runtime',\n    suffix: typeof registration !== 'undefined' ? registration.scope : '',\n};\nconst _createCacheName = (cacheName) => {\n    return [_cacheNameDetails.prefix, cacheName, _cacheNameDetails.suffix]\n        .filter((value) => value && value.length > 0)\n        .join('-');\n};\nconst eachCacheNameDetail = (fn) => {\n    for (const key of Object.keys(_cacheNameDetails)) {\n        fn(key);\n    }\n};\nexport const cacheNames = {\n    updateDetails: (details) => {\n        eachCacheNameDetail((key) => {\n            if (typeof details[key] === 'string') {\n                _cacheNameDetails[key] = details[key];\n            }\n        });\n    },\n    getGoogleAnalyticsName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.googleAnalytics);\n    },\n    getPrecacheName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.precache);\n    },\n    getPrefix: () => {\n        return _cacheNameDetails.prefix;\n    },\n    getRuntimeName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.runtime);\n    },\n    getSuffix: () => {\n        return _cacheNameDetails.suffix;\n    },\n};\n","/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A utility method that makes it easier to use `event.waitUntil` with\n * async functions and return the result.\n *\n * @param {ExtendableEvent} event\n * @param {Function} asyncFn\n * @return {Function}\n * @private\n */\nfunction waitUntil(event, asyncFn) {\n    const returnPromise = asyncFn();\n    event.waitUntil(returnPromise);\n    return returnPromise;\n}\nexport { waitUntil };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to determine the\n * of assets that were updated (or not updated) during the install event.\n *\n * @private\n */\nclass PrecacheInstallReportPlugin {\n    constructor() {\n        this.updatedURLs = [];\n        this.notUpdatedURLs = [];\n        this.handlerWillStart = async ({ request, state, }) => {\n            // TODO: `state` should never be undefined...\n            if (state) {\n                state.originalRequest = request;\n            }\n        };\n        this.cachedResponseWillBeUsed = async ({ event, state, cachedResponse, }) => {\n            if (event.type === 'install') {\n                if (state &&\n                    state.originalRequest &&\n                    state.originalRequest instanceof Request) {\n                    // TODO: `state` should never be undefined...\n                    const url = state.originalRequest.url;\n                    if (cachedResponse) {\n                        this.notUpdatedURLs.push(url);\n                    }\n                    else {\n                        this.updatedURLs.push(url);\n                    }\n                }\n            }\n            return cachedResponse;\n        };\n    }\n}\nexport { PrecacheInstallReportPlugin };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to translate URLs into\n * the corresponding cache key, based on the current revision info.\n *\n * @private\n */\nclass PrecacheCacheKeyPlugin {\n    constructor({ precacheController }) {\n        this.cacheKeyWillBeUsed = async ({ request, params, }) => {\n            // Params is type any, can't change right now.\n            /* eslint-disable */\n            const cacheKey = (params === null || params === void 0 ? void 0 : params.cacheKey) ||\n                this._precacheController.getCacheKeyForURL(request.url);\n            /* eslint-enable */\n            return cacheKey\n                ? new Request(cacheKey, { headers: request.headers })\n                : request;\n        };\n        this._precacheController = precacheController;\n    }\n}\nexport { PrecacheCacheKeyPlugin };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { canConstructResponseFromBodyStream } from './_private/canConstructResponseFromBodyStream.js';\nimport { WorkboxError } from './_private/WorkboxError.js';\nimport './_version.js';\n/**\n * Allows developers to copy a response and modify its `headers`, `status`,\n * or `statusText` values (the values settable via a\n * [`ResponseInit`]{@link https://developer.mozilla.org/en-US/docs/Web/API/Response/Response#Syntax}\n * object in the constructor).\n * To modify these values, pass a function as the second argument. That\n * function will be invoked with a single object with the response properties\n * `{headers, status, statusText}`. The return value of this function will\n * be used as the `ResponseInit` for the new `Response`. To change the values\n * either modify the passed parameter(s) and return it, or return a totally\n * new object.\n *\n * This method is intentionally limited to same-origin responses, regardless of\n * whether CORS was used or not.\n *\n * @param {Response} response\n * @param {Function} modifier\n * @memberof workbox-core\n */\nasync function copyResponse(response, modifier) {\n    let origin = null;\n    // If response.url isn't set, assume it's cross-origin and keep origin null.\n    if (response.url) {\n        const responseURL = new URL(response.url);\n        origin = responseURL.origin;\n    }\n    if (origin !== self.location.origin) {\n        throw new WorkboxError('cross-origin-copy-response', { origin });\n    }\n    const clonedResponse = response.clone();\n    // Create a fresh `ResponseInit` object by cloning the headers.\n    const responseInit = {\n        headers: new Headers(clonedResponse.headers),\n        status: clonedResponse.status,\n        statusText: clonedResponse.statusText,\n    };\n    // Apply any user modifications.\n    const modifiedResponseInit = modifier ? modifier(responseInit) : responseInit;\n    // Create the new response from the body stream and `ResponseInit`\n    // modifications. Note: not all browsers support the Response.body stream,\n    // so fall back to reading the entire body into memory as a blob.\n    const body = canConstructResponseFromBodyStream()\n        ? clonedResponse.body\n        : await clonedResponse.blob();\n    return new Response(body, modifiedResponseInit);\n}\nexport { copyResponse };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst getFriendlyURL = (url) => {\n    const urlObj = new URL(String(url), location.href);\n    // See https://github.com/GoogleChrome/workbox/issues/2323\n    // We want to include everything, except for the origin if it's same-origin.\n    return urlObj.href.replace(new RegExp(`^${location.origin}`), '');\n};\nexport { getFriendlyURL };\n","/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nfunction stripParams(fullURL, ignoreParams) {\n    const strippedURL = new URL(fullURL);\n    for (const param of ignoreParams) {\n        strippedURL.searchParams.delete(param);\n    }\n    return strippedURL.href;\n}\n/**\n * Matches an item in the cache, ignoring specific URL params. This is similar\n * to the `ignoreSearch` option, but it allows you to ignore just specific\n * params (while continuing to match on the others).\n *\n * @private\n * @param {Cache} cache\n * @param {Request} request\n * @param {Object} matchOptions\n * @param {Array<string>} ignoreParams\n * @return {Promise<Response|undefined>}\n */\nasync function cacheMatchIgnoreParams(cache, request, ignoreParams, matchOptions) {\n    const strippedRequestURL = stripParams(request.url, ignoreParams);\n    // If the request doesn't include any ignored params, match as normal.\n    if (request.url === strippedRequestURL) {\n        return cache.match(request, matchOptions);\n    }\n    // Otherwise, match by comparing keys\n    const keysOptions = Object.assign(Object.assign({}, matchOptions), { ignoreSearch: true });\n    const cacheKeys = await cache.keys(request, keysOptions);\n    for (const cacheKey of cacheKeys) {\n        const strippedCacheKeyURL = stripParams(cacheKey.url, ignoreParams);\n        if (strippedRequestURL === strippedCacheKeyURL) {\n            return cache.match(cacheKey, matchOptions);\n        }\n    }\n    return;\n}\nexport { cacheMatchIgnoreParams };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The Deferred class composes Promises in a way that allows for them to be\n * resolved or rejected from outside the constructor. In most cases promises\n * should be used directly, but Deferreds can be necessary when the logic to\n * resolve a promise must be separate.\n *\n * @private\n */\nclass Deferred {\n    /**\n     * Creates a promise and exposes its resolve and reject functions as methods.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n}\nexport { Deferred };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n// Callbacks to be executed whenever there's a quota error.\n// Can't change Function type right now.\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst quotaErrorCallbacks = new Set();\nexport { quotaErrorCallbacks };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from '../_private/logger.js';\nimport { quotaErrorCallbacks } from '../models/quotaErrorCallbacks.js';\nimport '../_version.js';\n/**\n * Runs all of the callback functions, one at a time sequentially, in the order\n * in which they were registered.\n *\n * @memberof workbox-core\n * @private\n */\nasync function executeQuotaErrorCallbacks() {\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log(`About to run ${quotaErrorCallbacks.size} ` +\n            `callbacks to clean up caches.`);\n    }\n    for (const callback of quotaErrorCallbacks) {\n        await callback();\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(callback, 'is complete.');\n        }\n    }\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log('Finished running callbacks.');\n    }\n}\nexport { executeQuotaErrorCallbacks };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheMatchIgnoreParams } from 'workbox-core/_private/cacheMatchIgnoreParams.js';\nimport { Deferred } from 'workbox-core/_private/Deferred.js';\nimport { executeQuotaErrorCallbacks } from 'workbox-core/_private/executeQuotaErrorCallbacks.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { timeout } from 'workbox-core/_private/timeout.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\nfunction toRequest(input) {\n    return typeof input === 'string' ? new Request(input) : input;\n}\n/**\n * A class created every time a Strategy instance instance calls\n * {@link workbox-strategies.Strategy~handle} or\n * {@link workbox-strategies.Strategy~handleAll} that wraps all fetch and\n * cache actions around plugin callbacks and keeps track of when the strategy\n * is \"done\" (i.e. all added `event.waitUntil()` promises have resolved).\n *\n * @memberof workbox-strategies\n */\nclass StrategyHandler {\n    /**\n     * Creates a new instance associated with the passed strategy and event\n     * that's handling the request.\n     *\n     * The constructor also initializes the state that will be passed to each of\n     * the plugins handling this request.\n     *\n     * @param {workbox-strategies.Strategy} strategy\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params] The return value from the\n     *     {@link workbox-routing~matchCallback} (if applicable).\n     */\n    constructor(strategy, options) {\n        this._cacheKeys = {};\n        /**\n         * The request the strategy is performing (passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * @name request\n         * @instance\n         * @type {Request}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * The event associated with this request.\n         * @name event\n         * @instance\n         * @type {ExtendableEvent}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `URL` instance of `request.url` (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `url` param will be present if the strategy was invoked\n         * from a workbox `Route` object.\n         * @name url\n         * @instance\n         * @type {URL|undefined}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `param` value (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `param` param will be present if the strategy was invoked\n         * from a workbox `Route` object and the\n         * {@link workbox-routing~matchCallback} returned\n         * a truthy value (it will be that value).\n         * @name params\n         * @instance\n         * @type {*|undefined}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(options.event, ExtendableEvent, {\n                moduleName: 'workbox-strategies',\n                className: 'StrategyHandler',\n                funcName: 'constructor',\n                paramName: 'options.event',\n            });\n        }\n        Object.assign(this, options);\n        this.event = options.event;\n        this._strategy = strategy;\n        this._handlerDeferred = new Deferred();\n        this._extendLifetimePromises = [];\n        // Copy the plugins list (since it's mutable on the strategy),\n        // so any mutations don't affect this handler instance.\n        this._plugins = [...strategy.plugins];\n        this._pluginStateMap = new Map();\n        for (const plugin of this._plugins) {\n            this._pluginStateMap.set(plugin, {});\n        }\n        this.event.waitUntil(this._handlerDeferred.promise);\n    }\n    /**\n     * Fetches a given request (and invokes any applicable plugin callback\n     * methods) using the `fetchOptions` (for non-navigation requests) and\n     * `plugins` defined on the `Strategy` object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - `requestWillFetch()`\n     * - `fetchDidSucceed()`\n     * - `fetchDidFail()`\n     *\n     * @param {Request|string} input The URL or request to fetch.\n     * @return {Promise<Response>}\n     */\n    async fetch(input) {\n        const { event } = this;\n        let request = toRequest(input);\n        if (request.mode === 'navigate' &&\n            event instanceof FetchEvent &&\n            event.preloadResponse) {\n            const possiblePreloadResponse = (await event.preloadResponse);\n            if (possiblePreloadResponse) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`Using a preloaded navigation response for ` +\n                        `'${getFriendlyURL(request.url)}'`);\n                }\n                return possiblePreloadResponse;\n            }\n        }\n        // If there is a fetchDidFail plugin, we need to save a clone of the\n        // original request before it's either modified by a requestWillFetch\n        // plugin or before the original request's body is consumed via fetch().\n        const originalRequest = this.hasCallback('fetchDidFail')\n            ? request.clone()\n            : null;\n        try {\n            for (const cb of this.iterateCallbacks('requestWillFetch')) {\n                request = await cb({ request: request.clone(), event });\n            }\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                throw new WorkboxError('plugin-error-request-will-fetch', {\n                    thrownErrorMessage: err.message,\n                });\n            }\n        }\n        // The request can be altered by plugins with `requestWillFetch` making\n        // the original request (most likely from a `fetch` event) different\n        // from the Request we make. Pass both to `fetchDidFail` to aid debugging.\n        const pluginFilteredRequest = request.clone();\n        try {\n            let fetchResponse;\n            // See https://github.com/GoogleChrome/workbox/issues/1796\n            fetchResponse = await fetch(request, request.mode === 'navigate' ? undefined : this._strategy.fetchOptions);\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' returned a response with ` +\n                    `status '${fetchResponse.status}'.`);\n            }\n            for (const callback of this.iterateCallbacks('fetchDidSucceed')) {\n                fetchResponse = await callback({\n                    event,\n                    request: pluginFilteredRequest,\n                    response: fetchResponse,\n                });\n            }\n            return fetchResponse;\n        }\n        catch (error) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.log(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' threw an error.`, error);\n            }\n            // `originalRequest` will only exist if a `fetchDidFail` callback\n            // is being used (see above).\n            if (originalRequest) {\n                await this.runCallbacks('fetchDidFail', {\n                    error: error,\n                    event,\n                    originalRequest: originalRequest.clone(),\n                    request: pluginFilteredRequest.clone(),\n                });\n            }\n            throw error;\n        }\n    }\n    /**\n     * Calls `this.fetch()` and (in the background) runs `this.cachePut()` on\n     * the response generated by `this.fetch()`.\n     *\n     * The call to `this.cachePut()` automatically invokes `this.waitUntil()`,\n     * so you do not have to manually call `waitUntil()` on the event.\n     *\n     * @param {Request|string} input The request or URL to fetch and cache.\n     * @return {Promise<Response>}\n     */\n    async fetchAndCachePut(input) {\n        const response = await this.fetch(input);\n        const responseClone = response.clone();\n        void this.waitUntil(this.cachePut(input, responseClone));\n        return response;\n    }\n    /**\n     * Matches a request from the cache (and invokes any applicable plugin\n     * callback methods) using the `cacheName`, `matchOptions`, and `plugins`\n     * defined on the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cachedResponseWillByUsed()\n     *\n     * @param {Request|string} key The Request or URL to use as the cache key.\n     * @return {Promise<Response|undefined>} A matching response, if found.\n     */\n    async cacheMatch(key) {\n        const request = toRequest(key);\n        let cachedResponse;\n        const { cacheName, matchOptions } = this._strategy;\n        const effectiveRequest = await this.getCacheKey(request, 'read');\n        const multiMatchOptions = Object.assign(Object.assign({}, matchOptions), { cacheName });\n        cachedResponse = await caches.match(effectiveRequest, multiMatchOptions);\n        if (process.env.NODE_ENV !== 'production') {\n            if (cachedResponse) {\n                logger.debug(`Found a cached response in '${cacheName}'.`);\n            }\n            else {\n                logger.debug(`No cached response found in '${cacheName}'.`);\n            }\n        }\n        for (const callback of this.iterateCallbacks('cachedResponseWillBeUsed')) {\n            cachedResponse =\n                (await callback({\n                    cacheName,\n                    matchOptions,\n                    cachedResponse,\n                    request: effectiveRequest,\n                    event: this.event,\n                })) || undefined;\n        }\n        return cachedResponse;\n    }\n    /**\n     * Puts a request/response pair in the cache (and invokes any applicable\n     * plugin callback methods) using the `cacheName` and `plugins` defined on\n     * the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cacheWillUpdate()\n     * - cacheDidUpdate()\n     *\n     * @param {Request|string} key The request or URL to use as the cache key.\n     * @param {Response} response The response to cache.\n     * @return {Promise<boolean>} `false` if a cacheWillUpdate caused the response\n     * not be cached, and `true` otherwise.\n     */\n    async cachePut(key, response) {\n        const request = toRequest(key);\n        // Run in the next task to avoid blocking other cache reads.\n        // https://github.com/w3c/ServiceWorker/issues/1397\n        await timeout(0);\n        const effectiveRequest = await this.getCacheKey(request, 'write');\n        if (process.env.NODE_ENV !== 'production') {\n            if (effectiveRequest.method && effectiveRequest.method !== 'GET') {\n                throw new WorkboxError('attempt-to-cache-non-get-request', {\n                    url: getFriendlyURL(effectiveRequest.url),\n                    method: effectiveRequest.method,\n                });\n            }\n            // See https://github.com/GoogleChrome/workbox/issues/2818\n            const vary = response.headers.get('Vary');\n            if (vary) {\n                logger.debug(`The response for ${getFriendlyURL(effectiveRequest.url)} ` +\n                    `has a 'Vary: ${vary}' header. ` +\n                    `Consider setting the {ignoreVary: true} option on your strategy ` +\n                    `to ensure cache matching and deletion works as expected.`);\n            }\n        }\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.error(`Cannot cache non-existent response for ` +\n                    `'${getFriendlyURL(effectiveRequest.url)}'.`);\n            }\n            throw new WorkboxError('cache-put-with-no-response', {\n                url: getFriendlyURL(effectiveRequest.url),\n            });\n        }\n        const responseToCache = await this._ensureResponseSafeToCache(response);\n        if (!responseToCache) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Response '${getFriendlyURL(effectiveRequest.url)}' ` +\n                    `will not be cached.`, responseToCache);\n            }\n            return false;\n        }\n        const { cacheName, matchOptions } = this._strategy;\n        const cache = await self.caches.open(cacheName);\n        const hasCacheUpdateCallback = this.hasCallback('cacheDidUpdate');\n        const oldResponse = hasCacheUpdateCallback\n            ? await cacheMatchIgnoreParams(\n            // TODO(philipwalton): the `__WB_REVISION__` param is a precaching\n            // feature. Consider into ways to only add this behavior if using\n            // precaching.\n            cache, effectiveRequest.clone(), ['__WB_REVISION__'], matchOptions)\n            : null;\n        if (process.env.NODE_ENV !== 'production') {\n            logger.debug(`Updating the '${cacheName}' cache with a new Response ` +\n                `for ${getFriendlyURL(effectiveRequest.url)}.`);\n        }\n        try {\n            await cache.put(effectiveRequest, hasCacheUpdateCallback ? responseToCache.clone() : responseToCache);\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                // See https://developer.mozilla.org/en-US/docs/Web/API/DOMException#exception-QuotaExceededError\n                if (error.name === 'QuotaExceededError') {\n                    await executeQuotaErrorCallbacks();\n                }\n                throw error;\n            }\n        }\n        for (const callback of this.iterateCallbacks('cacheDidUpdate')) {\n            await callback({\n                cacheName,\n                oldResponse,\n                newResponse: responseToCache.clone(),\n                request: effectiveRequest,\n                event: this.event,\n            });\n        }\n        return true;\n    }\n    /**\n     * Checks the list of plugins for the `cacheKeyWillBeUsed` callback, and\n     * executes any of those callbacks found in sequence. The final `Request`\n     * object returned by the last plugin is treated as the cache key for cache\n     * reads and/or writes. If no `cacheKeyWillBeUsed` plugin callbacks have\n     * been registered, the passed request is returned unmodified\n     *\n     * @param {Request} request\n     * @param {string} mode\n     * @return {Promise<Request>}\n     */\n    async getCacheKey(request, mode) {\n        const key = `${request.url} | ${mode}`;\n        if (!this._cacheKeys[key]) {\n            let effectiveRequest = request;\n            for (const callback of this.iterateCallbacks('cacheKeyWillBeUsed')) {\n                effectiveRequest = toRequest(await callback({\n                    mode,\n                    request: effectiveRequest,\n                    event: this.event,\n                    // params has a type any can't change right now.\n                    params: this.params, // eslint-disable-line\n                }));\n            }\n            this._cacheKeys[key] = effectiveRequest;\n        }\n        return this._cacheKeys[key];\n    }\n    /**\n     * Returns true if the strategy has at least one plugin with the given\n     * callback.\n     *\n     * @param {string} name The name of the callback to check for.\n     * @return {boolean}\n     */\n    hasCallback(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (name in plugin) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Runs all plugin callbacks matching the given name, in order, passing the\n     * given param object (merged ith the current plugin state) as the only\n     * argument.\n     *\n     * Note: since this method runs all plugins, it's not suitable for cases\n     * where the return value of a callback needs to be applied prior to calling\n     * the next callback. See\n     * {@link workbox-strategies.StrategyHandler#iterateCallbacks}\n     * below for how to handle that case.\n     *\n     * @param {string} name The name of the callback to run within each plugin.\n     * @param {Object} param The object to pass as the first (and only) param\n     *     when executing each callback. This object will be merged with the\n     *     current plugin state prior to callback execution.\n     */\n    async runCallbacks(name, param) {\n        for (const callback of this.iterateCallbacks(name)) {\n            // TODO(philipwalton): not sure why `any` is needed. It seems like\n            // this should work with `as WorkboxPluginCallbackParam[C]`.\n            await callback(param);\n        }\n    }\n    /**\n     * Accepts a callback and returns an iterable of matching plugin callbacks,\n     * where each callback is wrapped with the current handler state (i.e. when\n     * you call each callback, whatever object parameter you pass it will\n     * be merged with the plugin's current state).\n     *\n     * @param {string} name The name fo the callback to run\n     * @return {Array<Function>}\n     */\n    *iterateCallbacks(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (typeof plugin[name] === 'function') {\n                const state = this._pluginStateMap.get(plugin);\n                const statefulCallback = (param) => {\n                    const statefulParam = Object.assign(Object.assign({}, param), { state });\n                    // TODO(philipwalton): not sure why `any` is needed. It seems like\n                    // this should work with `as WorkboxPluginCallbackParam[C]`.\n                    return plugin[name](statefulParam);\n                };\n                yield statefulCallback;\n            }\n        }\n    }\n    /**\n     * Adds a promise to the\n     * [extend lifetime promises]{@link https://w3c.github.io/ServiceWorker/#extendableevent-extend-lifetime-promises}\n     * of the event event associated with the request being handled (usually a\n     * `FetchEvent`).\n     *\n     * Note: you can await\n     * {@link workbox-strategies.StrategyHandler~doneWaiting}\n     * to know when all added promises have settled.\n     *\n     * @param {Promise} promise A promise to add to the extend lifetime promises\n     *     of the event that triggered the request.\n     */\n    waitUntil(promise) {\n        this._extendLifetimePromises.push(promise);\n        return promise;\n    }\n    /**\n     * Returns a promise that resolves once all promises passed to\n     * {@link workbox-strategies.StrategyHandler~waitUntil}\n     * have settled.\n     *\n     * Note: any work done after `doneWaiting()` settles should be manually\n     * passed to an event's `waitUntil()` method (not this handler's\n     * `waitUntil()` method), otherwise the service worker thread my be killed\n     * prior to your work completing.\n     */\n    async doneWaiting() {\n        let promise;\n        while ((promise = this._extendLifetimePromises.shift())) {\n            await promise;\n        }\n    }\n    /**\n     * Stops running the strategy and immediately resolves any pending\n     * `waitUntil()` promises.\n     */\n    destroy() {\n        this._handlerDeferred.resolve(null);\n    }\n    /**\n     * This method will call cacheWillUpdate on the available plugins (or use\n     * status === 200) to determine if the Response is safe and valid to cache.\n     *\n     * @param {Request} options.request\n     * @param {Response} options.response\n     * @return {Promise<Response|undefined>}\n     *\n     * @private\n     */\n    async _ensureResponseSafeToCache(response) {\n        let responseToCache = response;\n        let pluginsUsed = false;\n        for (const callback of this.iterateCallbacks('cacheWillUpdate')) {\n            responseToCache =\n                (await callback({\n                    request: this.request,\n                    response: responseToCache,\n                    event: this.event,\n                })) || undefined;\n            pluginsUsed = true;\n            if (!responseToCache) {\n                break;\n            }\n        }\n        if (!pluginsUsed) {\n            if (responseToCache && responseToCache.status !== 200) {\n                responseToCache = undefined;\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (responseToCache) {\n                    if (responseToCache.status !== 200) {\n                        if (responseToCache.status === 0) {\n                            logger.warn(`The response for '${this.request.url}' ` +\n                                `is an opaque response. The caching strategy that you're ` +\n                                `using will not cache opaque responses by default.`);\n                        }\n                        else {\n                            logger.debug(`The response for '${this.request.url}' ` +\n                                `returned a status code of '${response.status}' and won't ` +\n                                `be cached as a result.`);\n                        }\n                    }\n                }\n            }\n        }\n        return responseToCache;\n    }\n}\nexport { StrategyHandler };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Returns a promise that resolves and the passed number of milliseconds.\n * This utility is an async/await-friendly version of `setTimeout`.\n *\n * @param {number} ms\n * @return {Promise}\n * @private\n */\nexport function timeout(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { StrategyHandler } from './StrategyHandler.js';\nimport './_version.js';\n/**\n * An abstract base class that all other strategy classes must extend from:\n *\n * @memberof workbox-strategies\n */\nclass Strategy {\n    /**\n     * Creates a new instance of the strategy and sets all documented option\n     * properties as public instance properties.\n     *\n     * Note: if a custom strategy class extends the base Strategy class and does\n     * not need more than these properties, it does not need to define its own\n     * constructor.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     */\n    constructor(options = {}) {\n        /**\n         * Cache name to store and retrieve\n         * requests. Defaults to the cache names provided by\n         * {@link workbox-core.cacheNames}.\n         *\n         * @type {string}\n         */\n        this.cacheName = cacheNames.getRuntimeName(options.cacheName);\n        /**\n         * The list\n         * [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n         * used by this strategy.\n         *\n         * @type {Array<Object>}\n         */\n        this.plugins = options.plugins || [];\n        /**\n         * Values passed along to the\n         * [`init`]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters}\n         * of all fetch() requests made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.fetchOptions = options.fetchOptions;\n        /**\n         * The\n         * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n         * for any `cache.match()` or `cache.put()` calls made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.matchOptions = options.matchOptions;\n    }\n    /**\n     * Perform a request strategy and returns a `Promise` that will resolve with\n     * a `Response`, invoking all relevant plugin callbacks.\n     *\n     * When a strategy instance is registered with a Workbox\n     * {@link workbox-routing.Route}, this method is automatically\n     * called when the route matches.\n     *\n     * Alternatively, this method can be used in a standalone `FetchEvent`\n     * listener by passing it to `event.respondWith()`.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     */\n    handle(options) {\n        const [responseDone] = this.handleAll(options);\n        return responseDone;\n    }\n    /**\n     * Similar to {@link workbox-strategies.Strategy~handle}, but\n     * instead of just returning a `Promise` that resolves to a `Response` it\n     * it will return an tuple of `[response, done]` promises, where the former\n     * (`response`) is equivalent to what `handle()` returns, and the latter is a\n     * Promise that will resolve once any promises that were added to\n     * `event.waitUntil()` as part of performing the strategy have completed.\n     *\n     * You can await the `done` promise to ensure any extra work performed by\n     * the strategy (usually caching responses) completes successfully.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     * @return {Array<Promise>} A tuple of [response, done]\n     *     promises that can be used to determine when the response resolves as\n     *     well as when the handler has completed all its work.\n     */\n    handleAll(options) {\n        // Allow for flexible options to be passed.\n        if (options instanceof FetchEvent) {\n            options = {\n                event: options,\n                request: options.request,\n            };\n        }\n        const event = options.event;\n        const request = typeof options.request === 'string'\n            ? new Request(options.request)\n            : options.request;\n        const params = 'params' in options ? options.params : undefined;\n        const handler = new StrategyHandler(this, { event, request, params });\n        const responseDone = this._getResponse(handler, request, event);\n        const handlerDone = this._awaitComplete(responseDone, handler, request, event);\n        // Return an array of promises, suitable for use with Promise.all().\n        return [responseDone, handlerDone];\n    }\n    async _getResponse(handler, request, event) {\n        await handler.runCallbacks('handlerWillStart', { event, request });\n        let response = undefined;\n        try {\n            response = await this._handle(request, handler);\n            // The \"official\" Strategy subclasses all throw this error automatically,\n            // but in case a third-party Strategy doesn't, ensure that we have a\n            // consistent failure when there's no response or an error response.\n            if (!response || response.type === 'error') {\n                throw new WorkboxError('no-response', { url: request.url });\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                for (const callback of handler.iterateCallbacks('handlerDidError')) {\n                    response = await callback({ error, event, request });\n                    if (response) {\n                        break;\n                    }\n                }\n            }\n            if (!response) {\n                throw error;\n            }\n            else if (process.env.NODE_ENV !== 'production') {\n                logger.log(`While responding to '${getFriendlyURL(request.url)}', ` +\n                    `an ${error instanceof Error ? error.toString() : ''} error occurred. Using a fallback response provided by ` +\n                    `a handlerDidError plugin.`);\n            }\n        }\n        for (const callback of handler.iterateCallbacks('handlerWillRespond')) {\n            response = await callback({ event, request, response });\n        }\n        return response;\n    }\n    async _awaitComplete(responseDone, handler, request, event) {\n        let response;\n        let error;\n        try {\n            response = await responseDone;\n        }\n        catch (error) {\n            // Ignore errors, as response errors should be caught via the `response`\n            // promise above. The `done` promise will only throw for errors in\n            // promises passed to `handler.waitUntil()`.\n        }\n        try {\n            await handler.runCallbacks('handlerDidRespond', {\n                event,\n                request,\n                response,\n            });\n            await handler.doneWaiting();\n        }\n        catch (waitUntilError) {\n            if (waitUntilError instanceof Error) {\n                error = waitUntilError;\n            }\n        }\n        await handler.runCallbacks('handlerDidComplete', {\n            event,\n            request,\n            response,\n            error: error,\n        });\n        handler.destroy();\n        if (error) {\n            throw error;\n        }\n    }\n}\nexport { Strategy };\n/**\n * Classes extending the `Strategy` based class should implement this method,\n * and leverage the {@link workbox-strategies.StrategyHandler}\n * arg to perform all fetching and cache logic, which will ensure all relevant\n * cache, cache options, fetch options and plugins are used (per the current\n * strategy instance).\n *\n * @name _handle\n * @instance\n * @abstract\n * @function\n * @param {Request} request\n * @param {workbox-strategies.StrategyHandler} handler\n * @return {Promise<Response>}\n *\n * @memberof workbox-strategies.Strategy\n */\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { copyResponse } from 'workbox-core/copyResponse.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from 'workbox-strategies/Strategy.js';\nimport './_version.js';\n/**\n * A {@link workbox-strategies.Strategy} implementation\n * specifically designed to work with\n * {@link workbox-precaching.PrecacheController}\n * to both cache and fetch precached assets.\n *\n * Note: an instance of this class is created automatically when creating a\n * `PrecacheController`; it's generally not necessary to create this yourself.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-precaching\n */\nclass PrecacheStrategy extends Strategy {\n    /**\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] {@link https://developers.google.com/web/tools/workbox/guides/using-plugins|Plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters|init}\n     * of all fetch() requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * {@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions|CacheQueryOptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n     * get the response from the network if there's a precache miss.\n     */\n    constructor(options = {}) {\n        options.cacheName = cacheNames.getPrecacheName(options.cacheName);\n        super(options);\n        this._fallbackToNetwork =\n            options.fallbackToNetwork === false ? false : true;\n        // Redirected responses cannot be used to satisfy a navigation request, so\n        // any redirected response must be \"copied\" rather than cloned, so the new\n        // response doesn't contain the `redirected` flag. See:\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=669363&desc=2#c1\n        this.plugins.push(PrecacheStrategy.copyRedirectedCacheableResponsesPlugin);\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const response = await handler.cacheMatch(request);\n        if (response) {\n            return response;\n        }\n        // If this is an `install` event for an entry that isn't already cached,\n        // then populate the cache.\n        if (handler.event && handler.event.type === 'install') {\n            return await this._handleInstall(request, handler);\n        }\n        // Getting here means something went wrong. An entry that should have been\n        // precached wasn't found in the cache.\n        return await this._handleFetch(request, handler);\n    }\n    async _handleFetch(request, handler) {\n        let response;\n        const params = (handler.params || {});\n        // Fall back to the network if we're configured to do so.\n        if (this._fallbackToNetwork) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.warn(`The precached response for ` +\n                    `${getFriendlyURL(request.url)} in ${this.cacheName} was not ` +\n                    `found. Falling back to the network.`);\n            }\n            const integrityInManifest = params.integrity;\n            const integrityInRequest = request.integrity;\n            const noIntegrityConflict = !integrityInRequest || integrityInRequest === integrityInManifest;\n            // Do not add integrity if the original request is no-cors\n            // See https://github.com/GoogleChrome/workbox/issues/3096\n            response = await handler.fetch(new Request(request, {\n                integrity: request.mode !== 'no-cors'\n                    ? integrityInRequest || integrityInManifest\n                    : undefined,\n            }));\n            // It's only \"safe\" to repair the cache if we're using SRI to guarantee\n            // that the response matches the precache manifest's expectations,\n            // and there's either a) no integrity property in the incoming request\n            // or b) there is an integrity, and it matches the precache manifest.\n            // See https://github.com/GoogleChrome/workbox/issues/2858\n            // Also if the original request users no-cors we don't use integrity.\n            // See https://github.com/GoogleChrome/workbox/issues/3096\n            if (integrityInManifest &&\n                noIntegrityConflict &&\n                request.mode !== 'no-cors') {\n                this._useDefaultCacheabilityPluginIfNeeded();\n                const wasCached = await handler.cachePut(request, response.clone());\n                if (process.env.NODE_ENV !== 'production') {\n                    if (wasCached) {\n                        logger.log(`A response for ${getFriendlyURL(request.url)} ` +\n                            `was used to \"repair\" the precache.`);\n                    }\n                }\n            }\n        }\n        else {\n            // This shouldn't normally happen, but there are edge cases:\n            // https://github.com/GoogleChrome/workbox/issues/1441\n            throw new WorkboxError('missing-precache-entry', {\n                cacheName: this.cacheName,\n                url: request.url,\n            });\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            const cacheKey = params.cacheKey || (await handler.getCacheKey(request, 'read'));\n            // Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Precaching is responding to: ` + getFriendlyURL(request.url));\n            logger.log(`Serving the precached url: ${getFriendlyURL(cacheKey instanceof Request ? cacheKey.url : cacheKey)}`);\n            logger.groupCollapsed(`View request details here.`);\n            logger.log(request);\n            logger.groupEnd();\n            logger.groupCollapsed(`View response details here.`);\n            logger.log(response);\n            logger.groupEnd();\n            logger.groupEnd();\n        }\n        return response;\n    }\n    async _handleInstall(request, handler) {\n        this._useDefaultCacheabilityPluginIfNeeded();\n        const response = await handler.fetch(request);\n        // Make sure we defer cachePut() until after we know the response\n        // should be cached; see https://github.com/GoogleChrome/workbox/issues/2737\n        const wasCached = await handler.cachePut(request, response.clone());\n        if (!wasCached) {\n            // Throwing here will lead to the `install` handler failing, which\n            // we want to do if *any* of the responses aren't safe to cache.\n            throw new WorkboxError('bad-precaching-response', {\n                url: request.url,\n                status: response.status,\n            });\n        }\n        return response;\n    }\n    /**\n     * This method is complex, as there a number of things to account for:\n     *\n     * The `plugins` array can be set at construction, and/or it might be added to\n     * to at any time before the strategy is used.\n     *\n     * At the time the strategy is used (i.e. during an `install` event), there\n     * needs to be at least one plugin that implements `cacheWillUpdate` in the\n     * array, other than `copyRedirectedCacheableResponsesPlugin`.\n     *\n     * - If this method is called and there are no suitable `cacheWillUpdate`\n     * plugins, we need to add `defaultPrecacheCacheabilityPlugin`.\n     *\n     * - If this method is called and there is exactly one `cacheWillUpdate`, then\n     * we don't have to do anything (this might be a previously added\n     * `defaultPrecacheCacheabilityPlugin`, or it might be a custom plugin).\n     *\n     * - If this method is called and there is more than one `cacheWillUpdate`,\n     * then we need to check if one is `defaultPrecacheCacheabilityPlugin`. If so,\n     * we need to remove it. (This situation is unlikely, but it could happen if\n     * the strategy is used multiple times, the first without a `cacheWillUpdate`,\n     * and then later on after manually adding a custom `cacheWillUpdate`.)\n     *\n     * See https://github.com/GoogleChrome/workbox/issues/2737 for more context.\n     *\n     * @private\n     */\n    _useDefaultCacheabilityPluginIfNeeded() {\n        let defaultPluginIndex = null;\n        let cacheWillUpdatePluginCount = 0;\n        for (const [index, plugin] of this.plugins.entries()) {\n            // Ignore the copy redirected plugin when determining what to do.\n            if (plugin === PrecacheStrategy.copyRedirectedCacheableResponsesPlugin) {\n                continue;\n            }\n            // Save the default plugin's index, in case it needs to be removed.\n            if (plugin === PrecacheStrategy.defaultPrecacheCacheabilityPlugin) {\n                defaultPluginIndex = index;\n            }\n            if (plugin.cacheWillUpdate) {\n                cacheWillUpdatePluginCount++;\n            }\n        }\n        if (cacheWillUpdatePluginCount === 0) {\n            this.plugins.push(PrecacheStrategy.defaultPrecacheCacheabilityPlugin);\n        }\n        else if (cacheWillUpdatePluginCount > 1 && defaultPluginIndex !== null) {\n            // Only remove the default plugin; multiple custom plugins are allowed.\n            this.plugins.splice(defaultPluginIndex, 1);\n        }\n        // Nothing needs to be done if cacheWillUpdatePluginCount is 1\n    }\n}\nPrecacheStrategy.defaultPrecacheCacheabilityPlugin = {\n    async cacheWillUpdate({ response }) {\n        if (!response || response.status >= 400) {\n            return null;\n        }\n        return response;\n    },\n};\nPrecacheStrategy.copyRedirectedCacheableResponsesPlugin = {\n    async cacheWillUpdate({ response }) {\n        return response.redirected ? await copyResponse(response) : response;\n    },\n};\nexport { PrecacheStrategy };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { waitUntil } from 'workbox-core/_private/waitUntil.js';\nimport { createCacheKey } from './utils/createCacheKey.js';\nimport { PrecacheInstallReportPlugin } from './utils/PrecacheInstallReportPlugin.js';\nimport { PrecacheCacheKeyPlugin } from './utils/PrecacheCacheKeyPlugin.js';\nimport { printCleanupDetails } from './utils/printCleanupDetails.js';\nimport { printInstallDetails } from './utils/printInstallDetails.js';\nimport { PrecacheStrategy } from './PrecacheStrategy.js';\nimport './_version.js';\n/**\n * Performs efficient precaching of assets.\n *\n * @memberof workbox-precaching\n */\nclass PrecacheController {\n    /**\n     * Create a new PrecacheController.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] The cache to use for precaching.\n     * @param {string} [options.plugins] Plugins to use when precaching as well\n     * as responding to fetch events for precached assets.\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n     * get the response from the network if there's a precache miss.\n     */\n    constructor({ cacheName, plugins = [], fallbackToNetwork = true, } = {}) {\n        this._urlsToCacheKeys = new Map();\n        this._urlsToCacheModes = new Map();\n        this._cacheKeysToIntegrities = new Map();\n        this._strategy = new PrecacheStrategy({\n            cacheName: cacheNames.getPrecacheName(cacheName),\n            plugins: [\n                ...plugins,\n                new PrecacheCacheKeyPlugin({ precacheController: this }),\n            ],\n            fallbackToNetwork,\n        });\n        // Bind the install and activate methods to the instance.\n        this.install = this.install.bind(this);\n        this.activate = this.activate.bind(this);\n    }\n    /**\n     * @type {workbox-precaching.PrecacheStrategy} The strategy created by this controller and\n     * used to cache assets and respond to fetch events.\n     */\n    get strategy() {\n        return this._strategy;\n    }\n    /**\n     * Adds items to the precache list, removing any duplicates and\n     * stores the files in the\n     * {@link workbox-core.cacheNames|\"precache cache\"} when the service\n     * worker installs.\n     *\n     * This method can be called multiple times.\n     *\n     * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n     */\n    precache(entries) {\n        this.addToCacheList(entries);\n        if (!this._installAndActiveListenersAdded) {\n            self.addEventListener('install', this.install);\n            self.addEventListener('activate', this.activate);\n            this._installAndActiveListenersAdded = true;\n        }\n    }\n    /**\n     * This method will add items to the precache list, removing duplicates\n     * and ensuring the information is valid.\n     *\n     * @param {Array<workbox-precaching.PrecacheController.PrecacheEntry|string>} entries\n     *     Array of entries to precache.\n     */\n    addToCacheList(entries) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isArray(entries, {\n                moduleName: 'workbox-precaching',\n                className: 'PrecacheController',\n                funcName: 'addToCacheList',\n                paramName: 'entries',\n            });\n        }\n        const urlsToWarnAbout = [];\n        for (const entry of entries) {\n            // See https://github.com/GoogleChrome/workbox/issues/2259\n            if (typeof entry === 'string') {\n                urlsToWarnAbout.push(entry);\n            }\n            else if (entry && entry.revision === undefined) {\n                urlsToWarnAbout.push(entry.url);\n            }\n            const { cacheKey, url } = createCacheKey(entry);\n            const cacheMode = typeof entry !== 'string' && entry.revision ? 'reload' : 'default';\n            if (this._urlsToCacheKeys.has(url) &&\n                this._urlsToCacheKeys.get(url) !== cacheKey) {\n                throw new WorkboxError('add-to-cache-list-conflicting-entries', {\n                    firstEntry: this._urlsToCacheKeys.get(url),\n                    secondEntry: cacheKey,\n                });\n            }\n            if (typeof entry !== 'string' && entry.integrity) {\n                if (this._cacheKeysToIntegrities.has(cacheKey) &&\n                    this._cacheKeysToIntegrities.get(cacheKey) !== entry.integrity) {\n                    throw new WorkboxError('add-to-cache-list-conflicting-integrities', {\n                        url,\n                    });\n                }\n                this._cacheKeysToIntegrities.set(cacheKey, entry.integrity);\n            }\n            this._urlsToCacheKeys.set(url, cacheKey);\n            this._urlsToCacheModes.set(url, cacheMode);\n            if (urlsToWarnAbout.length > 0) {\n                const warningMessage = `Workbox is precaching URLs without revision ` +\n                    `info: ${urlsToWarnAbout.join(', ')}\\nThis is generally NOT safe. ` +\n                    `Learn more at https://bit.ly/wb-precache`;\n                if (process.env.NODE_ENV === 'production') {\n                    // Use console directly to display this warning without bloating\n                    // bundle sizes by pulling in all of the logger codebase in prod.\n                    console.warn(warningMessage);\n                }\n                else {\n                    logger.warn(warningMessage);\n                }\n            }\n        }\n    }\n    /**\n     * Precaches new and updated assets. Call this method from the service worker\n     * install event.\n     *\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\n     * to call it yourself in your event handlers.\n     *\n     * @param {ExtendableEvent} event\n     * @return {Promise<workbox-precaching.InstallResult>}\n     */\n    install(event) {\n        // waitUntil returns Promise<any>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return waitUntil(event, async () => {\n            const installReportPlugin = new PrecacheInstallReportPlugin();\n            this.strategy.plugins.push(installReportPlugin);\n            // Cache entries one at a time.\n            // See https://github.com/GoogleChrome/workbox/issues/2528\n            for (const [url, cacheKey] of this._urlsToCacheKeys) {\n                const integrity = this._cacheKeysToIntegrities.get(cacheKey);\n                const cacheMode = this._urlsToCacheModes.get(url);\n                const request = new Request(url, {\n                    integrity,\n                    cache: cacheMode,\n                    credentials: 'same-origin',\n                });\n                await Promise.all(this.strategy.handleAll({\n                    params: { cacheKey },\n                    request,\n                    event,\n                }));\n            }\n            const { updatedURLs, notUpdatedURLs } = installReportPlugin;\n            if (process.env.NODE_ENV !== 'production') {\n                printInstallDetails(updatedURLs, notUpdatedURLs);\n            }\n            return { updatedURLs, notUpdatedURLs };\n        });\n    }\n    /**\n     * Deletes assets that are no longer present in the current precache manifest.\n     * Call this method from the service worker activate event.\n     *\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\n     * to call it yourself in your event handlers.\n     *\n     * @param {ExtendableEvent} event\n     * @return {Promise<workbox-precaching.CleanupResult>}\n     */\n    activate(event) {\n        // waitUntil returns Promise<any>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return waitUntil(event, async () => {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            const currentlyCachedRequests = await cache.keys();\n            const expectedCacheKeys = new Set(this._urlsToCacheKeys.values());\n            const deletedURLs = [];\n            for (const request of currentlyCachedRequests) {\n                if (!expectedCacheKeys.has(request.url)) {\n                    await cache.delete(request);\n                    deletedURLs.push(request.url);\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                printCleanupDetails(deletedURLs);\n            }\n            return { deletedURLs };\n        });\n    }\n    /**\n     * Returns a mapping of a precached URL to the corresponding cache key, taking\n     * into account the revision information for the URL.\n     *\n     * @return {Map<string, string>} A URL to cache key mapping.\n     */\n    getURLsToCacheKeys() {\n        return this._urlsToCacheKeys;\n    }\n    /**\n     * Returns a list of all the URLs that have been precached by the current\n     * service worker.\n     *\n     * @return {Array<string>} The precached URLs.\n     */\n    getCachedURLs() {\n        return [...this._urlsToCacheKeys.keys()];\n    }\n    /**\n     * Returns the cache key used for storing a given URL. If that URL is\n     * unversioned, like `/index.html', then the cache key will be the original\n     * URL with a search parameter appended to it.\n     *\n     * @param {string} url A URL whose cache key you want to look up.\n     * @return {string} The versioned URL that corresponds to a cache key\n     * for the original URL, or undefined if that URL isn't precached.\n     */\n    getCacheKeyForURL(url) {\n        const urlObject = new URL(url, location.href);\n        return this._urlsToCacheKeys.get(urlObject.href);\n    }\n    /**\n     * @param {string} url A cache key whose SRI you want to look up.\n     * @return {string} The subresource integrity associated with the cache key,\n     * or undefined if it's not set.\n     */\n    getIntegrityForCacheKey(cacheKey) {\n        return this._cacheKeysToIntegrities.get(cacheKey);\n    }\n    /**\n     * This acts as a drop-in replacement for\n     * [`cache.match()`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/match)\n     * with the following differences:\n     *\n     * - It knows what the name of the precache is, and only checks in that cache.\n     * - It allows you to pass in an \"original\" URL without versioning parameters,\n     * and it will automatically look up the correct cache key for the currently\n     * active revision of that URL.\n     *\n     * E.g., `matchPrecache('index.html')` will find the correct precached\n     * response for the currently active service worker, even if the actual cache\n     * key is `'/index.html?__WB_REVISION__=1234abcd'`.\n     *\n     * @param {string|Request} request The key (without revisioning parameters)\n     * to look up in the precache.\n     * @return {Promise<Response|undefined>}\n     */\n    async matchPrecache(request) {\n        const url = request instanceof Request ? request.url : request;\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (cacheKey) {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            return cache.match(cacheKey);\n        }\n        return undefined;\n    }\n    /**\n     * Returns a function that looks up `url` in the precache (taking into\n     * account revision information), and returns the corresponding `Response`.\n     *\n     * @param {string} url The precached URL which will be used to lookup the\n     * `Response`.\n     * @return {workbox-routing~handlerCallback}\n     */\n    createHandlerBoundToURL(url) {\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (!cacheKey) {\n            throw new WorkboxError('non-precached-url', { url });\n        }\n        return (options) => {\n            options.request = new Request(url);\n            options.params = Object.assign({ cacheKey }, options.params);\n            return this.strategy.handle(options);\n        };\n    }\n}\nexport { PrecacheController };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport '../_version.js';\n// Name of the search parameter used to store revision info.\nconst REVISION_SEARCH_PARAM = '__WB_REVISION__';\n/**\n * Converts a manifest entry into a versioned URL suitable for precaching.\n *\n * @param {Object|string} entry\n * @return {string} A URL with versioning info.\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function createCacheKey(entry) {\n    if (!entry) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If a precache manifest entry is a string, it's assumed to be a versioned\n    // URL, like '/app.abcd1234.js'. Return as-is.\n    if (typeof entry === 'string') {\n        const urlObject = new URL(entry, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    const { revision, url } = entry;\n    if (!url) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If there's just a URL and no revision, then it's also assumed to be a\n    // versioned URL.\n    if (!revision) {\n        const urlObject = new URL(url, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    // Otherwise, construct a properly versioned URL using the custom Workbox\n    // search parameter along with the revision info.\n    const cacheKeyURL = new URL(url, location.href);\n    const originalURL = new URL(url, location.href);\n    cacheKeyURL.searchParams.set(REVISION_SEARCH_PARAM, revision);\n    return {\n        cacheKey: cacheKeyURL.href,\n        url: originalURL.href,\n    };\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport '../_version.js';\n/**\n * @param {function()|Object} handler Either a function, or an object with a\n * 'handle' method.\n * @return {Object} An object with a handle method.\n *\n * @private\n */\nexport const normalizeHandler = (handler) => {\n    if (handler && typeof handler === 'object') {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.hasMethod(handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return handler;\n    }\n    else {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(handler, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return { handle: handler };\n    }\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { defaultMethod, validMethods } from './utils/constants.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport './_version.js';\n/**\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\n * The \"match\" callback determine if a route should be used to \"handle\" a\n * request by returning a non-falsy value if it can. The \"handler\" callback\n * is called when there is a match and should return a Promise that resolves\n * to a `Response`.\n *\n * @memberof workbox-routing\n */\nclass Route {\n    /**\n     * Constructor for Route class.\n     *\n     * @param {workbox-routing~matchCallback} match\n     * A callback function that determines whether the route matches a given\n     * `fetch` event by returning a non-falsy value.\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(match, handler, method = defaultMethod) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(match, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'match',\n            });\n            if (method) {\n                assert.isOneOf(method, validMethods, { paramName: 'method' });\n            }\n        }\n        // These values are referenced directly by Router so cannot be\n        // altered by minificaton.\n        this.handler = normalizeHandler(handler);\n        this.match = match;\n        this.method = method;\n    }\n    /**\n     *\n     * @param {workbox-routing-handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response\n     */\n    setCatchHandler(handler) {\n        this.catchHandler = normalizeHandler(handler);\n    }\n}\nexport { Route };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The default HTTP method, 'GET', used when there's no specific method\n * configured for a route.\n *\n * @type {string}\n *\n * @private\n */\nexport const defaultMethod = 'GET';\n/**\n * The list of valid HTTP methods associated with requests that could be routed.\n *\n * @type {Array<string>}\n *\n * @private\n */\nexport const validMethods = [\n    'DELETE',\n    'GET',\n    'HEAD',\n    'PATCH',\n    'POST',\n    'PUT',\n];\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\n * RegExpRoute makes it easy to create a regular expression based\n * {@link workbox-routing.Route}.\n *\n * For same-origin requests the RegExp only needs to match part of the URL. For\n * requests against third-party servers, you must define a RegExp that matches\n * the start of the URL.\n *\n * @memberof workbox-routing\n * @extends workbox-routing.Route\n */\nclass RegExpRoute extends Route {\n    /**\n     * If the regular expression contains\n     * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},\n     * the captured values will be passed to the\n     * {@link workbox-routing~handlerCallback} `params`\n     * argument.\n     *\n     * @param {RegExp} regExp The regular expression to match against URLs.\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(regExp, handler, method) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(regExp, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'RegExpRoute',\n                funcName: 'constructor',\n                paramName: 'pattern',\n            });\n        }\n        const match = ({ url }) => {\n            const result = regExp.exec(url.href);\n            // Return immediately if there's no match.\n            if (!result) {\n                return;\n            }\n            // Require that the match start at the first character in the URL string\n            // if it's a cross-origin request.\n            // See https://github.com/GoogleChrome/workbox/issues/281 for the context\n            // behind this behavior.\n            if (url.origin !== location.origin && result.index !== 0) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`The regular expression '${regExp.toString()}' only partially matched ` +\n                        `against the cross-origin URL '${url.toString()}'. RegExpRoute's will only ` +\n                        `handle cross-origin requests if they match the entire URL.`);\n                }\n                return;\n            }\n            // If the route matches, but there aren't any capture groups defined, then\n            // this will return [], which is truthy and therefore sufficient to\n            // indicate a match.\n            // If there are capture groups, then it will return their values.\n            return result.slice(1);\n        };\n        super(match, handler, method);\n    }\n}\nexport { RegExpRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { defaultMethod } from './utils/constants.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\n/**\n * The Router can be used to process a `FetchEvent` using one or more\n * {@link workbox-routing.Route}, responding with a `Response` if\n * a matching route exists.\n *\n * If no route matches a given a request, the Router will use a \"default\"\n * handler if one is defined.\n *\n * Should the matching Route throw an error, the Router will use a \"catch\"\n * handler if one is defined to gracefully deal with issues and respond with a\n * Request.\n *\n * If a request matches multiple routes, the **earliest** registered route will\n * be used to respond to the request.\n *\n * @memberof workbox-routing\n */\nclass Router {\n    /**\n     * Initializes a new Router.\n     */\n    constructor() {\n        this._routes = new Map();\n        this._defaultHandlerMap = new Map();\n    }\n    /**\n     * @return {Map<string, Array<workbox-routing.Route>>} routes A `Map` of HTTP\n     * method name ('GET', etc.) to an array of all the corresponding `Route`\n     * instances that are registered.\n     */\n    get routes() {\n        return this._routes;\n    }\n    /**\n     * Adds a fetch event listener to respond to events when a route matches\n     * the event's request.\n     */\n    addFetchListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('fetch', ((event) => {\n            const { request } = event;\n            const responsePromise = this.handleRequest({ request, event });\n            if (responsePromise) {\n                event.respondWith(responsePromise);\n            }\n        }));\n    }\n    /**\n     * Adds a message event listener for URLs to cache from the window.\n     * This is useful to cache resources loaded on the page prior to when the\n     * service worker started controlling it.\n     *\n     * The format of the message data sent from the window should be as follows.\n     * Where the `urlsToCache` array may consist of URL strings or an array of\n     * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\n     *\n     * ```\n     * {\n     *   type: 'CACHE_URLS',\n     *   payload: {\n     *     urlsToCache: [\n     *       './script1.js',\n     *       './script2.js',\n     *       ['./script3.js', {mode: 'no-cors'}],\n     *     ],\n     *   },\n     * }\n     * ```\n     */\n    addCacheListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('message', ((event) => {\n            // event.data is type 'any'\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            if (event.data && event.data.type === 'CACHE_URLS') {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                const { payload } = event.data;\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`Caching URLs from the window`, payload.urlsToCache);\n                }\n                const requestPromises = Promise.all(payload.urlsToCache.map((entry) => {\n                    if (typeof entry === 'string') {\n                        entry = [entry];\n                    }\n                    const request = new Request(...entry);\n                    return this.handleRequest({ request, event });\n                    // TODO(philipwalton): TypeScript errors without this typecast for\n                    // some reason (probably a bug). The real type here should work but\n                    // doesn't: `Array<Promise<Response> | undefined>`.\n                })); // TypeScript\n                event.waitUntil(requestPromises);\n                // If a MessageChannel was used, reply to the message on success.\n                if (event.ports && event.ports[0]) {\n                    void requestPromises.then(() => event.ports[0].postMessage(true));\n                }\n            }\n        }));\n    }\n    /**\n     * Apply the routing rules to a FetchEvent object to get a Response from an\n     * appropriate Route's handler.\n     *\n     * @param {Object} options\n     * @param {Request} options.request The request to handle.\n     * @param {ExtendableEvent} options.event The event that triggered the\n     *     request.\n     * @return {Promise<Response>|undefined} A promise is returned if a\n     *     registered route can handle the request. If there is no matching\n     *     route and there's no `defaultHandler`, `undefined` is returned.\n     */\n    handleRequest({ request, event, }) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'handleRequest',\n                paramName: 'options.request',\n            });\n        }\n        const url = new URL(request.url, location.href);\n        if (!url.protocol.startsWith('http')) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Workbox Router only supports URLs that start with 'http'.`);\n            }\n            return;\n        }\n        const sameOrigin = url.origin === location.origin;\n        const { params, route } = this.findMatchingRoute({\n            event,\n            request,\n            sameOrigin,\n            url,\n        });\n        let handler = route && route.handler;\n        const debugMessages = [];\n        if (process.env.NODE_ENV !== 'production') {\n            if (handler) {\n                debugMessages.push([`Found a route to handle this request:`, route]);\n                if (params) {\n                    debugMessages.push([\n                        `Passing the following params to the route's handler:`,\n                        params,\n                    ]);\n                }\n            }\n        }\n        // If we don't have a handler because there was no matching route, then\n        // fall back to defaultHandler if that's defined.\n        const method = request.method;\n        if (!handler && this._defaultHandlerMap.has(method)) {\n            if (process.env.NODE_ENV !== 'production') {\n                debugMessages.push(`Failed to find a matching route. Falling ` +\n                    `back to the default handler for ${method}.`);\n            }\n            handler = this._defaultHandlerMap.get(method);\n        }\n        if (!handler) {\n            if (process.env.NODE_ENV !== 'production') {\n                // No handler so Workbox will do nothing. If logs is set of debug\n                // i.e. verbose, we should print out this information.\n                logger.debug(`No route found for: ${getFriendlyURL(url)}`);\n            }\n            return;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            // We have a handler, meaning Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Router is responding to: ${getFriendlyURL(url)}`);\n            debugMessages.forEach((msg) => {\n                if (Array.isArray(msg)) {\n                    logger.log(...msg);\n                }\n                else {\n                    logger.log(msg);\n                }\n            });\n            logger.groupEnd();\n        }\n        // Wrap in try and catch in case the handle method throws a synchronous\n        // error. It should still callback to the catch handler.\n        let responsePromise;\n        try {\n            responsePromise = handler.handle({ url, request, event, params });\n        }\n        catch (err) {\n            responsePromise = Promise.reject(err);\n        }\n        // Get route's catch handler, if it exists\n        const catchHandler = route && route.catchHandler;\n        if (responsePromise instanceof Promise &&\n            (this._catchHandler || catchHandler)) {\n            responsePromise = responsePromise.catch(async (err) => {\n                // If there's a route catch handler, process that first\n                if (catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to route's Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    try {\n                        return await catchHandler.handle({ url, request, event, params });\n                    }\n                    catch (catchErr) {\n                        if (catchErr instanceof Error) {\n                            err = catchErr;\n                        }\n                    }\n                }\n                if (this._catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to global Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    return this._catchHandler.handle({ url, request, event });\n                }\n                throw err;\n            });\n        }\n        return responsePromise;\n    }\n    /**\n     * Checks a request and URL (and optionally an event) against the list of\n     * registered routes, and if there's a match, returns the corresponding\n     * route along with any params generated by the match.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {boolean} options.sameOrigin The result of comparing `url.origin`\n     *     against the current origin.\n     * @param {Request} options.request The request to match.\n     * @param {Event} options.event The corresponding event.\n     * @return {Object} An object with `route` and `params` properties.\n     *     They are populated if a matching route was found or `undefined`\n     *     otherwise.\n     */\n    findMatchingRoute({ url, sameOrigin, request, event, }) {\n        const routes = this._routes.get(request.method) || [];\n        for (const route of routes) {\n            let params;\n            // route.match returns type any, not possible to change right now.\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const matchResult = route.match({ url, sameOrigin, request, event });\n            if (matchResult) {\n                if (process.env.NODE_ENV !== 'production') {\n                    // Warn developers that using an async matchCallback is almost always\n                    // not the right thing to do.\n                    if (matchResult instanceof Promise) {\n                        logger.warn(`While routing ${getFriendlyURL(url)}, an async ` +\n                            `matchCallback function was used. Please convert the ` +\n                            `following route to use a synchronous matchCallback function:`, route);\n                    }\n                }\n                // See https://github.com/GoogleChrome/workbox/issues/2079\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                params = matchResult;\n                if (Array.isArray(params) && params.length === 0) {\n                    // Instead of passing an empty array in as params, use undefined.\n                    params = undefined;\n                }\n                else if (matchResult.constructor === Object && // eslint-disable-line\n                    Object.keys(matchResult).length === 0) {\n                    // Instead of passing an empty object in as params, use undefined.\n                    params = undefined;\n                }\n                else if (typeof matchResult === 'boolean') {\n                    // For the boolean value true (rather than just something truth-y),\n                    // don't set params.\n                    // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353\n                    params = undefined;\n                }\n                // Return early if have a match.\n                return { route, params };\n            }\n        }\n        // If no match was found above, return and empty object.\n        return {};\n    }\n    /**\n     * Define a default `handler` that's called when no routes explicitly\n     * match the incoming request.\n     *\n     * Each HTTP method ('GET', 'POST', etc.) gets its own default handler.\n     *\n     * Without a default handler, unmatched requests will go against the\n     * network as if there were no service worker present.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to associate with this\n     * default handler. Each method has its own default.\n     */\n    setDefaultHandler(handler, method = defaultMethod) {\n        this._defaultHandlerMap.set(method, normalizeHandler(handler));\n    }\n    /**\n     * If a Route throws an error while handling a request, this `handler`\n     * will be called and given a chance to provide a response.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n    setCatchHandler(handler) {\n        this._catchHandler = normalizeHandler(handler);\n    }\n    /**\n     * Registers a route with the router.\n     *\n     * @param {workbox-routing.Route} route The route to register.\n     */\n    registerRoute(route) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(route, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route, 'match', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.isType(route.handler, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route.handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.handler',\n            });\n            assert.isType(route.method, 'string', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.method',\n            });\n        }\n        if (!this._routes.has(route.method)) {\n            this._routes.set(route.method, []);\n        }\n        // Give precedence to all of the earlier routes by adding this additional\n        // route to the end of the array.\n        this._routes.get(route.method).push(route);\n    }\n    /**\n     * Unregisters a route with the router.\n     *\n     * @param {workbox-routing.Route} route The route to unregister.\n     */\n    unregisterRoute(route) {\n        if (!this._routes.has(route.method)) {\n            throw new WorkboxError('unregister-route-but-not-found-with-method', {\n                method: route.method,\n            });\n        }\n        const routeIndex = this._routes.get(route.method).indexOf(route);\n        if (routeIndex > -1) {\n            this._routes.get(route.method).splice(routeIndex, 1);\n        }\n        else {\n            throw new WorkboxError('unregister-route-route-not-registered');\n        }\n    }\n}\nexport { Router };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Route } from './Route.js';\nimport { RegExpRoute } from './RegExpRoute.js';\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * Easily register a RegExp, string, or function with a caching\n * strategy to a singleton Router instance.\n *\n * This method will generate a Route for you if needed and\n * call {@link workbox-routing.Router#registerRoute}.\n *\n * @param {RegExp|string|workbox-routing.Route~matchCallback|workbox-routing.Route} capture\n * If the capture param is a `Route`, all other arguments will be ignored.\n * @param {workbox-routing~handlerCallback} [handler] A callback\n * function that returns a Promise resulting in a Response. This parameter\n * is required if `capture` is not a `Route` object.\n * @param {string} [method='GET'] The HTTP method to match the Route\n * against.\n * @return {workbox-routing.Route} The generated `Route`.\n *\n * @memberof workbox-routing\n */\nfunction registerRoute(capture, handler, method) {\n    let route;\n    if (typeof capture === 'string') {\n        const captureUrl = new URL(capture, location.href);\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(capture.startsWith('/') || capture.startsWith('http'))) {\n                throw new WorkboxError('invalid-string', {\n                    moduleName: 'workbox-routing',\n                    funcName: 'registerRoute',\n                    paramName: 'capture',\n                });\n            }\n            // We want to check if Express-style wildcards are in the pathname only.\n            // TODO: Remove this log message in v4.\n            const valueToCheck = capture.startsWith('http')\n                ? captureUrl.pathname\n                : capture;\n            // See https://github.com/pillarjs/path-to-regexp#parameters\n            const wildcards = '[*:?+]';\n            if (new RegExp(`${wildcards}`).exec(valueToCheck)) {\n                logger.debug(`The '$capture' parameter contains an Express-style wildcard ` +\n                    `character (${wildcards}). Strings are now always interpreted as ` +\n                    `exact matches; use a RegExp for partial or wildcard matches.`);\n            }\n        }\n        const matchCallback = ({ url }) => {\n            if (process.env.NODE_ENV !== 'production') {\n                if (url.pathname === captureUrl.pathname &&\n                    url.origin !== captureUrl.origin) {\n                    logger.debug(`${capture} only partially matches the cross-origin URL ` +\n                        `${url.toString()}. This route will only handle cross-origin requests ` +\n                        `if they match the entire URL.`);\n                }\n            }\n            return url.href === captureUrl.href;\n        };\n        // If `capture` is a string then `handler` and `method` must be present.\n        route = new Route(matchCallback, handler, method);\n    }\n    else if (capture instanceof RegExp) {\n        // If `capture` is a `RegExp` then `handler` and `method` must be present.\n        route = new RegExpRoute(capture, handler, method);\n    }\n    else if (typeof capture === 'function') {\n        // If `capture` is a function then `handler` and `method` must be present.\n        route = new Route(capture, handler, method);\n    }\n    else if (capture instanceof Route) {\n        route = capture;\n    }\n    else {\n        throw new WorkboxError('unsupported-route-type', {\n            moduleName: 'workbox-routing',\n            funcName: 'registerRoute',\n            paramName: 'capture',\n        });\n    }\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.registerRoute(route);\n    return route;\n}\nexport { registerRoute };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { Route } from 'workbox-routing/Route.js';\nimport { generateURLVariations } from './utils/generateURLVariations.js';\nimport './_version.js';\n/**\n * A subclass of {@link workbox-routing.Route} that takes a\n * {@link workbox-precaching.PrecacheController}\n * instance and uses it to match incoming requests and handle fetching\n * responses from the precache.\n *\n * @memberof workbox-precaching\n * @extends workbox-routing.Route\n */\nclass PrecacheRoute extends Route {\n    /**\n     * @param {PrecacheController} precacheController A `PrecacheController`\n     * instance used to both match requests and respond to fetch events.\n     * @param {Object} [options] Options to control how requests are matched\n     * against the list of precached URLs.\n     * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\n     * check cache entries for a URLs ending with '/' to see if there is a hit when\n     * appending the `directoryIndex` value.\n     * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/, /^fbclid$/]] An\n     * array of regex's to remove search params when looking for a cache match.\n     * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\n     * check the cache for the URL with a `.html` added to the end of the end.\n     * @param {workbox-precaching~urlManipulation} [options.urlManipulation]\n     * This is a function that should take a URL and return an array of\n     * alternative URLs that should be checked for precache matches.\n     */\n    constructor(precacheController, options) {\n        const match = ({ request, }) => {\n            const urlsToCacheKeys = precacheController.getURLsToCacheKeys();\n            for (const possibleURL of generateURLVariations(request.url, options)) {\n                const cacheKey = urlsToCacheKeys.get(possibleURL);\n                if (cacheKey) {\n                    const integrity = precacheController.getIntegrityForCacheKey(cacheKey);\n                    return { cacheKey, integrity };\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Precaching did not find a match for ` + getFriendlyURL(request.url));\n            }\n            return;\n        };\n        super(match, precacheController.strategy);\n    }\n}\nexport { PrecacheRoute };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { removeIgnoredSearchParams } from './removeIgnoredSearchParams.js';\nimport '../_version.js';\n/**\n * Generator function that yields possible variations on the original URL to\n * check, one at a time.\n *\n * @param {string} url\n * @param {Object} options\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function* generateURLVariations(url, { ignoreURLParametersMatching = [/^utm_/, /^fbclid$/], directoryIndex = 'index.html', cleanURLs = true, urlManipulation, } = {}) {\n    const urlObject = new URL(url, location.href);\n    urlObject.hash = '';\n    yield urlObject.href;\n    const urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\n    yield urlWithoutIgnoredParams.href;\n    if (directoryIndex && urlWithoutIgnoredParams.pathname.endsWith('/')) {\n        const directoryURL = new URL(urlWithoutIgnoredParams.href);\n        directoryURL.pathname += directoryIndex;\n        yield directoryURL.href;\n    }\n    if (cleanURLs) {\n        const cleanURL = new URL(urlWithoutIgnoredParams.href);\n        cleanURL.pathname += '.html';\n        yield cleanURL.href;\n    }\n    if (urlManipulation) {\n        const additionalURLs = urlManipulation({ url: urlObject });\n        for (const urlToAttempt of additionalURLs) {\n            yield urlToAttempt.href;\n        }\n    }\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Removes any URL search parameters that should be ignored.\n *\n * @param {URL} urlObject The original URL.\n * @param {Array<RegExp>} ignoreURLParametersMatching RegExps to test against\n * each search parameter name. Matches mean that the search parameter should be\n * ignored.\n * @return {URL} The URL with any ignored search parameters removed.\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching = []) {\n    // Convert the iterable into an array at the start of the loop to make sure\n    // deletion doesn't mess up iteration.\n    for (const paramName of [...urlObject.searchParams.keys()]) {\n        if (ignoreURLParametersMatching.some((regExp) => regExp.test(paramName))) {\n            urlObject.searchParams.delete(paramName);\n        }\n    }\n    return urlObject;\n}\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A helper function that prevents a promise from being flagged as unused.\n *\n * @private\n **/\nexport function dontWaitFor(promise) {\n    // Effective no-op.\n    void promise.then(() => { });\n}\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { cacheNames as _cacheNames } from './_private/cacheNames.js';\nimport './_version.js';\n/**\n * Get the current cache names and prefix/suffix used by Workbox.\n *\n * `cacheNames.precache` is used for precached assets,\n * `cacheNames.googleAnalytics` is used by `workbox-google-analytics` to\n * store `analytics.js`, and `cacheNames.runtime` is used for everything else.\n *\n * `cacheNames.prefix` can be used to retrieve just the current prefix value.\n * `cacheNames.suffix` can be used to retrieve just the current suffix value.\n *\n * @return {Object} An object with `precache`, `runtime`, `prefix`, and\n *     `googleAnalytics` properties.\n *\n * @memberof workbox-core\n */\nconst cacheNames = {\n    get googleAnalytics() {\n        return _cacheNames.getGoogleAnalyticsName();\n    },\n    get precache() {\n        return _cacheNames.getPrecacheName();\n    },\n    get prefix() {\n        return _cacheNames.getPrefix();\n    },\n    get runtime() {\n        return _cacheNames.getRuntimeName();\n    },\n    get suffix() {\n        return _cacheNames.getSuffix();\n    },\n};\nexport { cacheNames };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { openDB, deleteDB } from 'idb';\nimport '../_version.js';\nconst DB_NAME = 'workbox-expiration';\nconst CACHE_OBJECT_STORE = 'cache-entries';\nconst normalizeURL = (unNormalizedUrl) => {\n    const url = new URL(unNormalizedUrl, location.href);\n    url.hash = '';\n    return url.href;\n};\n/**\n * Returns the timestamp model.\n *\n * @private\n */\nclass CacheTimestampsModel {\n    /**\n     *\n     * @param {string} cacheName\n     *\n     * @private\n     */\n    constructor(cacheName) {\n        this._db = null;\n        this._cacheName = cacheName;\n    }\n    /**\n     * Performs an upgrade of indexedDB.\n     *\n     * @param {IDBPDatabase<CacheDbSchema>} db\n     *\n     * @private\n     */\n    _upgradeDb(db) {\n        // TODO(philipwalton): EdgeHTML doesn't support arrays as a keyPath, so we\n        // have to use the `id` keyPath here and create our own values (a\n        // concatenation of `url + cacheName`) instead of simply using\n        // `keyPath: ['url', 'cacheName']`, which is supported in other browsers.\n        const objStore = db.createObjectStore(CACHE_OBJECT_STORE, { keyPath: 'id' });\n        // TODO(philipwalton): once we don't have to support EdgeHTML, we can\n        // create a single index with the keyPath `['cacheName', 'timestamp']`\n        // instead of doing both these indexes.\n        objStore.createIndex('cacheName', 'cacheName', { unique: false });\n        objStore.createIndex('timestamp', 'timestamp', { unique: false });\n    }\n    /**\n     * Performs an upgrade of indexedDB and deletes deprecated DBs.\n     *\n     * @param {IDBPDatabase<CacheDbSchema>} db\n     *\n     * @private\n     */\n    _upgradeDbAndDeleteOldDbs(db) {\n        this._upgradeDb(db);\n        if (this._cacheName) {\n            void deleteDB(this._cacheName);\n        }\n    }\n    /**\n     * @param {string} url\n     * @param {number} timestamp\n     *\n     * @private\n     */\n    async setTimestamp(url, timestamp) {\n        url = normalizeURL(url);\n        const entry = {\n            url,\n            timestamp,\n            cacheName: this._cacheName,\n            // Creating an ID from the URL and cache name won't be necessary once\n            // Edge switches to Chromium and all browsers we support work with\n            // array keyPaths.\n            id: this._getId(url),\n        };\n        const db = await this.getDb();\n        const tx = db.transaction(CACHE_OBJECT_STORE, 'readwrite', {\n            durability: 'relaxed',\n        });\n        await tx.store.put(entry);\n        await tx.done;\n    }\n    /**\n     * Returns the timestamp stored for a given URL.\n     *\n     * @param {string} url\n     * @return {number | undefined}\n     *\n     * @private\n     */\n    async getTimestamp(url) {\n        const db = await this.getDb();\n        const entry = await db.get(CACHE_OBJECT_STORE, this._getId(url));\n        return entry === null || entry === void 0 ? void 0 : entry.timestamp;\n    }\n    /**\n     * Iterates through all the entries in the object store (from newest to\n     * oldest) and removes entries once either `maxCount` is reached or the\n     * entry's timestamp is less than `minTimestamp`.\n     *\n     * @param {number} minTimestamp\n     * @param {number} maxCount\n     * @return {Array<string>}\n     *\n     * @private\n     */\n    async expireEntries(minTimestamp, maxCount) {\n        const db = await this.getDb();\n        let cursor = await db\n            .transaction(CACHE_OBJECT_STORE)\n            .store.index('timestamp')\n            .openCursor(null, 'prev');\n        const entriesToDelete = [];\n        let entriesNotDeletedCount = 0;\n        while (cursor) {\n            const result = cursor.value;\n            // TODO(philipwalton): once we can use a multi-key index, we\n            // won't have to check `cacheName` here.\n            if (result.cacheName === this._cacheName) {\n                // Delete an entry if it's older than the max age or\n                // if we already have the max number allowed.\n                if ((minTimestamp && result.timestamp < minTimestamp) ||\n                    (maxCount && entriesNotDeletedCount >= maxCount)) {\n                    // TODO(philipwalton): we should be able to delete the\n                    // entry right here, but doing so causes an iteration\n                    // bug in Safari stable (fixed in TP). Instead we can\n                    // store the keys of the entries to delete, and then\n                    // delete the separate transactions.\n                    // https://github.com/GoogleChrome/workbox/issues/1978\n                    // cursor.delete();\n                    // We only need to return the URL, not the whole entry.\n                    entriesToDelete.push(cursor.value);\n                }\n                else {\n                    entriesNotDeletedCount++;\n                }\n            }\n            cursor = await cursor.continue();\n        }\n        // TODO(philipwalton): once the Safari bug in the following issue is fixed,\n        // we should be able to remove this loop and do the entry deletion in the\n        // cursor loop above:\n        // https://github.com/GoogleChrome/workbox/issues/1978\n        const urlsDeleted = [];\n        for (const entry of entriesToDelete) {\n            await db.delete(CACHE_OBJECT_STORE, entry.id);\n            urlsDeleted.push(entry.url);\n        }\n        return urlsDeleted;\n    }\n    /**\n     * Takes a URL and returns an ID that will be unique in the object store.\n     *\n     * @param {string} url\n     * @return {string}\n     *\n     * @private\n     */\n    _getId(url) {\n        // Creating an ID from the URL and cache name won't be necessary once\n        // Edge switches to Chromium and all browsers we support work with\n        // array keyPaths.\n        return this._cacheName + '|' + normalizeURL(url);\n    }\n    /**\n     * Returns an open connection to the database.\n     *\n     * @private\n     */\n    async getDb() {\n        if (!this._db) {\n            this._db = await openDB(DB_NAME, 1, {\n                upgrade: this._upgradeDbAndDeleteOldDbs.bind(this),\n            });\n        }\n        return this._db;\n    }\n}\nexport { CacheTimestampsModel };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { dontWaitFor } from 'workbox-core/_private/dontWaitFor.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { CacheTimestampsModel } from './models/CacheTimestampsModel.js';\nimport './_version.js';\n/**\n * The `CacheExpiration` class allows you define an expiration and / or\n * limit on the number of responses stored in a\n * [`Cache`](https://developer.mozilla.org/en-US/docs/Web/API/Cache).\n *\n * @memberof workbox-expiration\n */\nclass CacheExpiration {\n    /**\n     * To construct a new CacheExpiration instance you must provide at least\n     * one of the `config` properties.\n     *\n     * @param {string} cacheName Name of the cache to apply restrictions to.\n     * @param {Object} config\n     * @param {number} [config.maxEntries] The maximum number of entries to cache.\n     * Entries used the least will be removed as the maximum is reached.\n     * @param {number} [config.maxAgeSeconds] The maximum age of an entry before\n     * it's treated as stale and removed.\n     * @param {Object} [config.matchOptions] The [`CacheQueryOptions`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/delete#Parameters)\n     * that will be used when calling `delete()` on the cache.\n     */\n    constructor(cacheName, config = {}) {\n        this._isRunning = false;\n        this._rerunRequested = false;\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(cacheName, 'string', {\n                moduleName: 'workbox-expiration',\n                className: 'CacheExpiration',\n                funcName: 'constructor',\n                paramName: 'cacheName',\n            });\n            if (!(config.maxEntries || config.maxAgeSeconds)) {\n                throw new WorkboxError('max-entries-or-age-required', {\n                    moduleName: 'workbox-expiration',\n                    className: 'CacheExpiration',\n                    funcName: 'constructor',\n                });\n            }\n            if (config.maxEntries) {\n                assert.isType(config.maxEntries, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'CacheExpiration',\n                    funcName: 'constructor',\n                    paramName: 'config.maxEntries',\n                });\n            }\n            if (config.maxAgeSeconds) {\n                assert.isType(config.maxAgeSeconds, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'CacheExpiration',\n                    funcName: 'constructor',\n                    paramName: 'config.maxAgeSeconds',\n                });\n            }\n        }\n        this._maxEntries = config.maxEntries;\n        this._maxAgeSeconds = config.maxAgeSeconds;\n        this._matchOptions = config.matchOptions;\n        this._cacheName = cacheName;\n        this._timestampModel = new CacheTimestampsModel(cacheName);\n    }\n    /**\n     * Expires entries for the given cache and given criteria.\n     */\n    async expireEntries() {\n        if (this._isRunning) {\n            this._rerunRequested = true;\n            return;\n        }\n        this._isRunning = true;\n        const minTimestamp = this._maxAgeSeconds\n            ? Date.now() - this._maxAgeSeconds * 1000\n            : 0;\n        const urlsExpired = await this._timestampModel.expireEntries(minTimestamp, this._maxEntries);\n        // Delete URLs from the cache\n        const cache = await self.caches.open(this._cacheName);\n        for (const url of urlsExpired) {\n            await cache.delete(url, this._matchOptions);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            if (urlsExpired.length > 0) {\n                logger.groupCollapsed(`Expired ${urlsExpired.length} ` +\n                    `${urlsExpired.length === 1 ? 'entry' : 'entries'} and removed ` +\n                    `${urlsExpired.length === 1 ? 'it' : 'them'} from the ` +\n                    `'${this._cacheName}' cache.`);\n                logger.log(`Expired the following ${urlsExpired.length === 1 ? 'URL' : 'URLs'}:`);\n                urlsExpired.forEach((url) => logger.log(`    ${url}`));\n                logger.groupEnd();\n            }\n            else {\n                logger.debug(`Cache expiration ran and found no entries to remove.`);\n            }\n        }\n        this._isRunning = false;\n        if (this._rerunRequested) {\n            this._rerunRequested = false;\n            dontWaitFor(this.expireEntries());\n        }\n    }\n    /**\n     * Update the timestamp for the given URL. This ensures the when\n     * removing entries based on maximum entries, most recently used\n     * is accurate or when expiring, the timestamp is up-to-date.\n     *\n     * @param {string} url\n     */\n    async updateTimestamp(url) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(url, 'string', {\n                moduleName: 'workbox-expiration',\n                className: 'CacheExpiration',\n                funcName: 'updateTimestamp',\n                paramName: 'url',\n            });\n        }\n        await this._timestampModel.setTimestamp(url, Date.now());\n    }\n    /**\n     * Can be used to check if a URL has expired or not before it's used.\n     *\n     * This requires a look up from IndexedDB, so can be slow.\n     *\n     * Note: This method will not remove the cached entry, call\n     * `expireEntries()` to remove indexedDB and Cache entries.\n     *\n     * @param {string} url\n     * @return {boolean}\n     */\n    async isURLExpired(url) {\n        if (!this._maxAgeSeconds) {\n            if (process.env.NODE_ENV !== 'production') {\n                throw new WorkboxError(`expired-test-without-max-age`, {\n                    methodName: 'isURLExpired',\n                    paramName: 'maxAgeSeconds',\n                });\n            }\n            return false;\n        }\n        else {\n            const timestamp = await this._timestampModel.getTimestamp(url);\n            const expireOlderThan = Date.now() - this._maxAgeSeconds * 1000;\n            return timestamp !== undefined ? timestamp < expireOlderThan : true;\n        }\n    }\n    /**\n     * Removes the IndexedDB object store used to keep track of cache expiration\n     * metadata.\n     */\n    async delete() {\n        // Make sure we don't attempt another rerun if we're called in the middle of\n        // a cache expiration.\n        this._rerunRequested = false;\n        await this._timestampModel.expireEntries(Infinity); // Expires all.\n    }\n}\nexport { CacheExpiration };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { dontWaitFor } from 'workbox-core/_private/dontWaitFor.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { registerQuotaErrorCallback } from 'workbox-core/registerQuotaErrorCallback.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { CacheExpiration } from './CacheExpiration.js';\nimport './_version.js';\n/**\n * This plugin can be used in a `workbox-strategy` to regularly enforce a\n * limit on the age and / or the number of cached requests.\n *\n * It can only be used with `workbox-strategy` instances that have a\n * [custom `cacheName` property set](/web/tools/workbox/guides/configure-workbox#custom_cache_names_in_strategies).\n * In other words, it can't be used to expire entries in strategy that uses the\n * default runtime cache name.\n *\n * Whenever a cached response is used or updated, this plugin will look\n * at the associated cache and remove any old or extra responses.\n *\n * When using `maxAgeSeconds`, responses may be used *once* after expiring\n * because the expiration clean up will not have occurred until *after* the\n * cached response has been used. If the response has a \"Date\" header, then\n * a light weight expiration check is performed and the response will not be\n * used immediately.\n *\n * When using `maxEntries`, the entry least-recently requested will be removed\n * from the cache first.\n *\n * @memberof workbox-expiration\n */\nclass ExpirationPlugin {\n    /**\n     * @param {ExpirationPluginOptions} config\n     * @param {number} [config.maxEntries] The maximum number of entries to cache.\n     * Entries used the least will be removed as the maximum is reached.\n     * @param {number} [config.maxAgeSeconds] The maximum age of an entry before\n     * it's treated as stale and removed.\n     * @param {Object} [config.matchOptions] The [`CacheQueryOptions`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/delete#Parameters)\n     * that will be used when calling `delete()` on the cache.\n     * @param {boolean} [config.purgeOnQuotaError] Whether to opt this cache in to\n     * automatic deletion if the available storage quota has been exceeded.\n     */\n    constructor(config = {}) {\n        /**\n         * A \"lifecycle\" callback that will be triggered automatically by the\n         * `workbox-strategies` handlers when a `Response` is about to be returned\n         * from a [Cache](https://developer.mozilla.org/en-US/docs/Web/API/Cache) to\n         * the handler. It allows the `Response` to be inspected for freshness and\n         * prevents it from being used if the `Response`'s `Date` header value is\n         * older than the configured `maxAgeSeconds`.\n         *\n         * @param {Object} options\n         * @param {string} options.cacheName Name of the cache the response is in.\n         * @param {Response} options.cachedResponse The `Response` object that's been\n         *     read from a cache and whose freshness should be checked.\n         * @return {Response} Either the `cachedResponse`, if it's\n         *     fresh, or `null` if the `Response` is older than `maxAgeSeconds`.\n         *\n         * @private\n         */\n        this.cachedResponseWillBeUsed = async ({ event, request, cacheName, cachedResponse, }) => {\n            if (!cachedResponse) {\n                return null;\n            }\n            const isFresh = this._isResponseDateFresh(cachedResponse);\n            // Expire entries to ensure that even if the expiration date has\n            // expired, it'll only be used once.\n            const cacheExpiration = this._getCacheExpiration(cacheName);\n            dontWaitFor(cacheExpiration.expireEntries());\n            // Update the metadata for the request URL to the current timestamp,\n            // but don't `await` it as we don't want to block the response.\n            const updateTimestampDone = cacheExpiration.updateTimestamp(request.url);\n            if (event) {\n                try {\n                    event.waitUntil(updateTimestampDone);\n                }\n                catch (error) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // The event may not be a fetch event; only log the URL if it is.\n                        if ('request' in event) {\n                            logger.warn(`Unable to ensure service worker stays alive when ` +\n                                `updating cache entry for ` +\n                                `'${getFriendlyURL(event.request.url)}'.`);\n                        }\n                    }\n                }\n            }\n            return isFresh ? cachedResponse : null;\n        };\n        /**\n         * A \"lifecycle\" callback that will be triggered automatically by the\n         * `workbox-strategies` handlers when an entry is added to a cache.\n         *\n         * @param {Object} options\n         * @param {string} options.cacheName Name of the cache that was updated.\n         * @param {string} options.request The Request for the cached entry.\n         *\n         * @private\n         */\n        this.cacheDidUpdate = async ({ cacheName, request, }) => {\n            if (process.env.NODE_ENV !== 'production') {\n                assert.isType(cacheName, 'string', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'cacheDidUpdate',\n                    paramName: 'cacheName',\n                });\n                assert.isInstance(request, Request, {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'cacheDidUpdate',\n                    paramName: 'request',\n                });\n            }\n            const cacheExpiration = this._getCacheExpiration(cacheName);\n            await cacheExpiration.updateTimestamp(request.url);\n            await cacheExpiration.expireEntries();\n        };\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(config.maxEntries || config.maxAgeSeconds)) {\n                throw new WorkboxError('max-entries-or-age-required', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'constructor',\n                });\n            }\n            if (config.maxEntries) {\n                assert.isType(config.maxEntries, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'constructor',\n                    paramName: 'config.maxEntries',\n                });\n            }\n            if (config.maxAgeSeconds) {\n                assert.isType(config.maxAgeSeconds, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'constructor',\n                    paramName: 'config.maxAgeSeconds',\n                });\n            }\n        }\n        this._config = config;\n        this._maxAgeSeconds = config.maxAgeSeconds;\n        this._cacheExpirations = new Map();\n        if (config.purgeOnQuotaError) {\n            registerQuotaErrorCallback(() => this.deleteCacheAndMetadata());\n        }\n    }\n    /**\n     * A simple helper method to return a CacheExpiration instance for a given\n     * cache name.\n     *\n     * @param {string} cacheName\n     * @return {CacheExpiration}\n     *\n     * @private\n     */\n    _getCacheExpiration(cacheName) {\n        if (cacheName === cacheNames.getRuntimeName()) {\n            throw new WorkboxError('expire-custom-caches-only');\n        }\n        let cacheExpiration = this._cacheExpirations.get(cacheName);\n        if (!cacheExpiration) {\n            cacheExpiration = new CacheExpiration(cacheName, this._config);\n            this._cacheExpirations.set(cacheName, cacheExpiration);\n        }\n        return cacheExpiration;\n    }\n    /**\n     * @param {Response} cachedResponse\n     * @return {boolean}\n     *\n     * @private\n     */\n    _isResponseDateFresh(cachedResponse) {\n        if (!this._maxAgeSeconds) {\n            // We aren't expiring by age, so return true, it's fresh\n            return true;\n        }\n        // Check if the 'date' header will suffice a quick expiration check.\n        // See https://github.com/GoogleChromeLabs/sw-toolbox/issues/164 for\n        // discussion.\n        const dateHeaderTimestamp = this._getDateHeaderTimestamp(cachedResponse);\n        if (dateHeaderTimestamp === null) {\n            // Unable to parse date, so assume it's fresh.\n            return true;\n        }\n        // If we have a valid headerTime, then our response is fresh iff the\n        // headerTime plus maxAgeSeconds is greater than the current time.\n        const now = Date.now();\n        return dateHeaderTimestamp >= now - this._maxAgeSeconds * 1000;\n    }\n    /**\n     * This method will extract the data header and parse it into a useful\n     * value.\n     *\n     * @param {Response} cachedResponse\n     * @return {number|null}\n     *\n     * @private\n     */\n    _getDateHeaderTimestamp(cachedResponse) {\n        if (!cachedResponse.headers.has('date')) {\n            return null;\n        }\n        const dateHeader = cachedResponse.headers.get('date');\n        const parsedDate = new Date(dateHeader);\n        const headerTime = parsedDate.getTime();\n        // If the Date header was invalid for some reason, parsedDate.getTime()\n        // will return NaN.\n        if (isNaN(headerTime)) {\n            return null;\n        }\n        return headerTime;\n    }\n    /**\n     * This is a helper method that performs two operations:\n     *\n     * - Deletes *all* the underlying Cache instances associated with this plugin\n     * instance, by calling caches.delete() on your behalf.\n     * - Deletes the metadata from IndexedDB used to keep track of expiration\n     * details for each Cache instance.\n     *\n     * When using cache expiration, calling this method is preferable to calling\n     * `caches.delete()` directly, since this will ensure that the IndexedDB\n     * metadata is also cleanly removed and open IndexedDB instances are deleted.\n     *\n     * Note that if you're *not* using cache expiration for a given cache, calling\n     * `caches.delete()` and passing in the cache's name should be sufficient.\n     * There is no Workbox-specific method needed for cleanup in that case.\n     */\n    async deleteCacheAndMetadata() {\n        // Do this one at a time instead of all at once via `Promise.all()` to\n        // reduce the chance of inconsistency if a promise rejects.\n        for (const [cacheName, cacheExpiration] of this._cacheExpirations) {\n            await self.caches.delete(cacheName);\n            await cacheExpiration.delete();\n        }\n        // Reset this._cacheExpirations to its initial state.\n        this._cacheExpirations = new Map();\n    }\n}\nexport { ExpirationPlugin };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from './_private/logger.js';\nimport { assert } from './_private/assert.js';\nimport { quotaErrorCallbacks } from './models/quotaErrorCallbacks.js';\nimport './_version.js';\n/**\n * Adds a function to the set of quotaErrorCallbacks that will be executed if\n * there's a quota error.\n *\n * @param {Function} callback\n * @memberof workbox-core\n */\n// Can't change Function type\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction registerQuotaErrorCallback(callback) {\n    if (process.env.NODE_ENV !== 'production') {\n        assert.isType(callback, 'function', {\n            moduleName: 'workbox-core',\n            funcName: 'register',\n            paramName: 'callback',\n        });\n    }\n    quotaErrorCallbacks.add(callback);\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log('Registered a callback to respond to quota errors.', callback);\n    }\n}\nexport { registerQuotaErrorCallback };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a [cache-first](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#cache-first-falling-back-to-network)\n * request strategy.\n *\n * A cache first strategy is useful for assets that have been revisioned,\n * such as URLs like `/styles/example.a8f5f1.css`, since they\n * can be cached for long periods of time.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\nclass CacheFirst extends Strategy {\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'makeRequest',\n                paramName: 'request',\n            });\n        }\n        let response = await handler.cacheMatch(request);\n        let error = undefined;\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`No response found in the '${this.cacheName}' cache. ` +\n                    `Will respond with a network request.`);\n            }\n            try {\n                response = await handler.fetchAndCachePut(request);\n            }\n            catch (err) {\n                if (err instanceof Error) {\n                    error = err;\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (response) {\n                    logs.push(`Got response from network.`);\n                }\n                else {\n                    logs.push(`Unable to get a response from the network.`);\n                }\n            }\n        }\n        else {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`Found a cached response in the '${this.cacheName}' cache.`);\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n}\nexport { CacheFirst };\n","/// <reference lib=\"webworker\" />\n\nimport { PrecacheEntry } from 'workbox-precaching/_types'\n\ndeclare const self: ServiceWorkerGlobalScope\n\nexport function isDevelopment() {\n  return Boolean(\n    self.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address\n      self.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4\n      self.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/) ||\n      // vercel previews\n      self.location.hostname.endsWith('.vercel.app')\n  )\n}\n\ntype GroupedEntries = { onDemandEntries: (string | PrecacheEntry)[]; precacheEntries: PrecacheEntry[] }\n\n/**\n * Splits entries into on-demand and precachable entries.\n * Effectively, splits out index.html as the only precachable entry.\n */\nexport function groupEntries(entries: (string | PrecacheEntry)[]): GroupedEntries {\n  return entries.reduce<GroupedEntries>(\n    ({ onDemandEntries, precacheEntries }, entry) => {\n      if (typeof entry === 'string' || entry.url.includes('/media/')) {\n        return { precacheEntries, onDemandEntries: [...onDemandEntries, entry] }\n      } else if (entry.revision) {\n        // index.html should be the only non-media entry with a revision, as code chunks have a hashed URL.\n        return { precacheEntries: [...precacheEntries, entry], onDemandEntries }\n      } else {\n        return { precacheEntries, onDemandEntries: [...onDemandEntries, entry] }\n      }\n    },\n    { onDemandEntries: [], precacheEntries: [] }\n  )\n}\n\nexport async function deleteUnusedCaches(caches: CacheStorage, { usedCaches }: { usedCaches: string[] }) {\n  const cacheKeys = await caches.keys()\n  cacheKeys.filter((key) => !usedCaches.includes(key)).forEach((key) => caches.delete(key))\n}\n","import { isAppUniswapOrg, isAppUniswapStagingOrg } from 'utils/env'\nimport { RouteHandlerCallbackOptions, RouteMatchCallbackOptions } from 'workbox-core'\nimport { getCacheKeyForURL, matchPrecache } from 'workbox-precaching'\nimport { Route } from 'workbox-routing'\n\nimport { isDevelopment } from './utils'\n\nconst fileExtensionRegexp = new RegExp('/[^/?]+\\\\.[^/]+$')\nconst DOCUMENT = process.env.PUBLIC_URL + '/index.html'\n\n/**\n * Matches with App Shell-style routing, so that navigation requests are fulfilled with an index.html shell.\n * See https://developers.google.com/web/fundamentals/architecture/app-shell\n */\nexport function matchDocument({ request, url }: RouteMatchCallbackOptions) {\n  // If this isn't a navigation, skip.\n  if (request.mode !== 'navigate') {\n    return false\n  }\n\n  // If this looks like a resource (ie has a file extension), skip.\n  if (url.pathname.match(fileExtensionRegexp)) {\n    return false\n  }\n\n  // If this isn't app.uniswap.org (or a local build), skip.\n  // IPFS gateways may not have domain separation, so they cannot use document caching.\n  if (!(isDevelopment() || isAppUniswapStagingOrg(url) || isAppUniswapOrg(url))) {\n    return false\n  }\n\n  return true\n}\n\ntype HandlerContext = {\n  offlineDocument?: Response\n} | void\n\n/**\n * The returned document should always be fresh, so this handler uses a custom strategy:\n *\n * - Always fetches the document.\n * - When available, compares the etag headers of the fetched and cached documents:\n *   - If matching (fresh) or missing (offline), returns the cached document.\n *   - If not matching (stale), returns the fetched document.\n *\n * This ensures that the user will always see the latest document. It requires a network fetch to check the cached\n * document's freshness, but does not require a full fetch in most cases, so it still saves time. This is identical to\n * the browser's builtin etag strategy, reimplemented in the ServiceWorker.\n *\n * In addition, this handler may serve an offline document if there is no internet connection.\n */\nexport async function handleDocument(this: HandlerContext, { request }: RouteHandlerCallbackOptions) {\n  // If we are offline, serve the offline document.\n  if ('onLine' in navigator && !navigator.onLine) return this?.offlineDocument?.clone() || fetch(request)\n\n  // The exact cache key should be used for requests, as etags will be different for different paths.\n  // This also prevents usage of preloadResponse.\n  const requestUrl = getCacheKeyForURL(DOCUMENT)\n  const cachedResponse = await matchPrecache(DOCUMENT)\n\n  // Responses will throw if offline, but if cached the cached response should still be returned.\n  const controller = new AbortController()\n  let response\n  try {\n    response = await fetch(requestUrl || DOCUMENT, { cache: 'reload', signal: controller.signal })\n    if (!cachedResponse) {\n      return new Response(response.body, response)\n    }\n  } catch (e) {\n    if (!cachedResponse) throw e\n    return CachedDocument.from(cachedResponse)\n  }\n\n  // The etag header can be queried before the entire response body has streamed, so it is still a\n  // performant cache key.\n  const etag = response?.headers.get('etag')\n  const cachedEtag = cachedResponse?.headers.get('etag')\n  if (etag && etag === cachedEtag) {\n    // If the cache is still fresh, cancel the pending response.\n    controller.abort()\n    return CachedDocument.from(cachedResponse)\n  }\n\n  return new Response(response.body, response)\n}\n\nexport class DocumentRoute extends Route {\n  constructor(offlineDocument?: Response) {\n    super(matchDocument, handleDocument.bind({ offlineDocument }), 'GET')\n  }\n}\n\n/**\n * A cache-specific version of the document.\n * This document sets the local `__isDocumentCached` variable to true.\n */\nexport class CachedDocument extends Response {\n  static async from(response: Response) {\n    const text = await response.text()\n\n    // Set the content-type explicitly. Some browsers (Android 12; Chrome 91) use an invalid content-type header.\n    const headers = new Headers(response.headers)\n    headers.set('Content-Type', 'text/html; charset=utf-8')\n    const init = { ...response, headers }\n\n    // Injects a marker into the document so that client code knows it was served from cache.\n    // The marker should be injected immediately in the <body> so it is available to client code.\n    return new CachedDocument(text.replace('<body>', '<body><script>window.__isDocumentCached=true</script>'), init)\n  }\n\n  private constructor(text: string, response: Response) {\n    super(text, response)\n  }\n}\n","export function isDevelopmentEnv(): boolean {\n  return process.env.NODE_ENV === 'development'\n}\n\nexport function isTestEnv(): boolean {\n  return process.env.NODE_ENV === 'test'\n}\n\nexport function isStagingEnv(): boolean {\n  // This is set in vercel builds and deploys from releases/staging.\n  return Boolean(process.env.REACT_APP_STAGING)\n}\n\nexport function isProductionEnv(): boolean {\n  return process.env.NODE_ENV === 'production' && !isStagingEnv()\n}\n\nexport function isAppUniswapOrg({ hostname }: { hostname: string }): boolean {\n  return hostname === 'app.uniswap.org'\n}\n\nexport function isAppUniswapStagingOrg({ hostname }: { hostname: string }): boolean {\n  return hostname === 'app.uniswap-staging.org'\n}\n\nexport function isBrowserRouterEnabled(): boolean {\n  if (isProductionEnv()) {\n    return true;\n  }\n  return true\n}\n\nfunction isLocalhost({ hostname }: { hostname: string }): boolean {\n  return hostname === 'localhost'\n}\n\nexport function isSentryEnabled(): boolean {\n  // Disable in e2e test environments\n  if (isStagingEnv() && !isAppUniswapStagingOrg(window.location)) return false\n  if (isProductionEnv() && !isAppUniswapOrg(window.location)) return false\n  return process.env.REACT_APP_SENTRY_ENABLED === 'true'\n}\n\nexport function getEnvName(): 'production' | 'staging' | 'development' {\n  if (isStagingEnv()) {\n    return 'staging'\n  }\n  if (isProductionEnv()) {\n    return 'production'\n  }\n  return 'development'\n}\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * Takes in a URL, and returns the corresponding URL that could be used to\n * lookup the entry in the precache.\n *\n * If a relative URL is provided, the location of the service worker file will\n * be used as the base.\n *\n * For precached entries without revision information, the cache key will be the\n * same as the original URL.\n *\n * For precached entries with revision information, the cache key will be the\n * original URL with the addition of a query parameter used for keeping track of\n * the revision info.\n *\n * @param {string} url The URL whose cache key to look up.\n * @return {string} The cache key that corresponds to that URL.\n *\n * @memberof workbox-precaching\n */\nfunction getCacheKeyForURL(url) {\n    const precacheController = getOrCreatePrecacheController();\n    return precacheController.getCacheKeyForURL(url);\n}\nexport { getCacheKeyForURL };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * Helper function that calls\n * {@link PrecacheController#matchPrecache} on the default\n * {@link PrecacheController} instance.\n *\n * If you are creating your own {@link PrecacheController}, then call\n * {@link PrecacheController#matchPrecache} on that instance,\n * instead of using this function.\n *\n * @param {string|Request} request The key (without revisioning parameters)\n * to look up in the precache.\n * @return {Promise<Response|undefined>}\n *\n * @memberof workbox-precaching\n */\nfunction matchPrecache(request) {\n    const precacheController = getOrCreatePrecacheController();\n    return precacheController.matchPrecache(request);\n}\nexport { matchPrecache };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport './_version.js';\n/**\n * Claim any currently available clients once the service worker\n * becomes active. This is normally used in conjunction with `skipWaiting()`.\n *\n * @memberof workbox-core\n */\nfunction clientsClaim() {\n    self.addEventListener('activate', () => self.clients.claim());\n}\nexport { clientsClaim };\n","import 'workbox-precaching' // defines __WB_MANIFEST\n\nimport { cacheNames, clientsClaim } from 'workbox-core'\nimport { ExpirationPlugin } from 'workbox-expiration'\nimport { precacheAndRoute } from 'workbox-precaching'\nimport { registerRoute, Route } from 'workbox-routing'\nimport { CacheFirst } from 'workbox-strategies'\n\nimport { DocumentRoute } from './document'\nimport { deleteUnusedCaches, groupEntries } from './utils'\n\ndeclare const self: ServiceWorkerGlobalScope\n\nclientsClaim()\nself.skipWaiting()\n\n// Registers the document route for the precached document.\n// This must be done before setting up workbox-precaching, so that it takes precedence.\nregisterRoute(new DocumentRoute())\n\nconst { onDemandEntries, precacheEntries } = groupEntries(self.__WB_MANIFEST)\nconst onDemandURLs = onDemandEntries.map((entry) => (typeof entry === 'string' ? entry : entry.url))\n\nconst onDemandCacheName = `${cacheNames.prefix}-on-demand-${cacheNames.suffix}`\nregisterRoute(\n  new Route(\n    ({ url }) => onDemandURLs.includes('.' + url.pathname),\n    new CacheFirst({\n      cacheName: onDemandCacheName,\n      plugins: [new ExpirationPlugin({ maxEntries: 64 })],\n    })\n  )\n)\n\nprecacheAndRoute(precacheEntries) // precache cache\n\n// We only use the precache and runtime caches, so we delete the rest to avoid taking space.\n// Wait to do so until 'activate' in case activation fails.\nself.addEventListener('activate', () =>\n  deleteUnusedCaches(self.caches, { usedCaches: [cacheNames.precache, onDemandCacheName] })\n)\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { addRoute } from './addRoute.js';\nimport { precache } from './precache.js';\nimport './_version.js';\n/**\n * This method will add entries to the precache list and add a route to\n * respond to fetch events.\n *\n * This is a convenience method that will call\n * {@link workbox-precaching.precache} and\n * {@link workbox-precaching.addRoute} in a single call.\n *\n * @param {Array<Object|string>} entries Array of entries to precache.\n * @param {Object} [options] See the\n * {@link workbox-precaching.PrecacheRoute} options.\n *\n * @memberof workbox-precaching\n */\nfunction precacheAndRoute(entries, options) {\n    precache(entries);\n    addRoute(options);\n}\nexport { precacheAndRoute };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * Adds items to the precache list, removing any duplicates and\n * stores the files in the\n * {@link workbox-core.cacheNames|\"precache cache\"} when the service\n * worker installs.\n *\n * This method can be called multiple times.\n *\n * Please note: This method **will not** serve any of the cached files for you.\n * It only precaches files. To respond to a network request you call\n * {@link workbox-precaching.addRoute}.\n *\n * If you have a single array of files to precache, you can just call\n * {@link workbox-precaching.precacheAndRoute}.\n *\n * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n *\n * @memberof workbox-precaching\n */\nfunction precache(entries) {\n    const precacheController = getOrCreatePrecacheController();\n    precacheController.precache(entries);\n}\nexport { precache };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { registerRoute } from 'workbox-routing/registerRoute.js';\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport { PrecacheRoute } from './PrecacheRoute.js';\nimport './_version.js';\n/**\n * Add a `fetch` listener to the service worker that will\n * respond to\n * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}\n * with precached assets.\n *\n * Requests for assets that aren't precached, the `FetchEvent` will not be\n * responded to, allowing the event to fall through to other `fetch` event\n * listeners.\n *\n * @param {Object} [options] See the {@link workbox-precaching.PrecacheRoute}\n * options.\n *\n * @memberof workbox-precaching\n */\nfunction addRoute(options) {\n    const precacheController = getOrCreatePrecacheController();\n    const precacheRoute = new PrecacheRoute(precacheController, options);\n    registerRoute(precacheRoute);\n}\nexport { addRoute };\n"]}